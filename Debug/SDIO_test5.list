
SDIO_test5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a14c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800a2dc  0800a2dc  0001a2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a910  0800a910  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a910  0800a910  0001a910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a918  0800a918  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a918  0800a918  0001a918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a91c  0800a91c  0001a91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800a920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00001b80  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20001c24  20001c24  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010342  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ff1  00000000  00000000  00030459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000eb8  00000000  00000000  00033450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b05  00000000  00000000  00034308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024468  00000000  00000000  00034e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015943  00000000  00000000  00059275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb40c  00000000  00000000  0006ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004230  00000000  00000000  00139fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0013e1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2c4 	.word	0x0800a2c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800a2c4 	.word	0x0800a2c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <start_recording>:
		printf("succeded in mounting an sd card \n");
	}
}

void start_recording(uint32_t frequency)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	static char file_name[] = "w_000.wav";
	static uint8_t file_counter = 10;
	int file_number_digits = file_counter;
 8000574:	4b4b      	ldr	r3, [pc, #300]	; (80006a4 <start_recording+0x138>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	60fb      	str	r3, [r7, #12]
	uint32_t byte_rate = frequency * 2 * 2;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	60bb      	str	r3, [r7, #8]
	wav_file_header[24] = (uint8_t)frequency;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b48      	ldr	r3, [pc, #288]	; (80006a8 <start_recording+0x13c>)
 8000586:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	0a1b      	lsrs	r3, r3, #8
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b46      	ldr	r3, [pc, #280]	; (80006a8 <start_recording+0x13c>)
 8000590:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	0c1b      	lsrs	r3, r3, #16
 8000596:	b2da      	uxtb	r2, r3
 8000598:	4b43      	ldr	r3, [pc, #268]	; (80006a8 <start_recording+0x13c>)
 800059a:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	0e1b      	lsrs	r3, r3, #24
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b41      	ldr	r3, [pc, #260]	; (80006a8 <start_recording+0x13c>)
 80005a4:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b3f      	ldr	r3, [pc, #252]	; (80006a8 <start_recording+0x13c>)
 80005ac:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b3c      	ldr	r3, [pc, #240]	; (80006a8 <start_recording+0x13c>)
 80005b6:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b3a      	ldr	r3, [pc, #232]	; (80006a8 <start_recording+0x13c>)
 80005c0:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	0e1b      	lsrs	r3, r3, #24
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <start_recording+0x13c>)
 80005ca:	77da      	strb	r2, [r3, #31]

	// defining a wave file name
	file_name[4] = file_number_digits%10 + 48;
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4b37      	ldr	r3, [pc, #220]	; (80006ac <start_recording+0x140>)
 80005d0:	fb83 1302 	smull	r1, r3, r3, r2
 80005d4:	1099      	asrs	r1, r3, #2
 80005d6:	17d3      	asrs	r3, r2, #31
 80005d8:	1ac9      	subs	r1, r1, r3
 80005da:	460b      	mov	r3, r1
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	440b      	add	r3, r1
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	1ad1      	subs	r1, r2, r3
 80005e4:	b2cb      	uxtb	r3, r1
 80005e6:	3330      	adds	r3, #48	; 0x30
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <start_recording+0x144>)
 80005ec:	711a      	strb	r2, [r3, #4]
	file_number_digits /= 10;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <start_recording+0x140>)
 80005f2:	fb82 1203 	smull	r1, r2, r2, r3
 80005f6:	1092      	asrs	r2, r2, #2
 80005f8:	17db      	asrs	r3, r3, #31
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	60fb      	str	r3, [r7, #12]
	file_name[3] = file_number_digits%10 + 48;
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <start_recording+0x140>)
 8000602:	fb83 1302 	smull	r1, r3, r3, r2
 8000606:	1099      	asrs	r1, r3, #2
 8000608:	17d3      	asrs	r3, r2, #31
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	460b      	mov	r3, r1
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	1ad1      	subs	r1, r2, r3
 8000616:	b2cb      	uxtb	r3, r1
 8000618:	3330      	adds	r3, #48	; 0x30
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <start_recording+0x144>)
 800061e:	70da      	strb	r2, [r3, #3]
	file_number_digits /= 10;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4a22      	ldr	r2, [pc, #136]	; (80006ac <start_recording+0x140>)
 8000624:	fb82 1203 	smull	r1, r2, r2, r3
 8000628:	1092      	asrs	r2, r2, #2
 800062a:	17db      	asrs	r3, r3, #31
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	60fb      	str	r3, [r7, #12]
	file_name[2] = file_number_digits%10 + 48;
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <start_recording+0x140>)
 8000634:	fb83 1302 	smull	r1, r3, r3, r2
 8000638:	1099      	asrs	r1, r3, #2
 800063a:	17d3      	asrs	r3, r2, #31
 800063c:	1ac9      	subs	r1, r1, r3
 800063e:	460b      	mov	r3, r1
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	1ad1      	subs	r1, r2, r3
 8000648:	b2cb      	uxtb	r3, r1
 800064a:	3330      	adds	r3, #48	; 0x30
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <start_recording+0x144>)
 8000650:	709a      	strb	r2, [r3, #2]
	printf("file name %s \n", file_name);
 8000652:	4917      	ldr	r1, [pc, #92]	; (80006b0 <start_recording+0x144>)
 8000654:	4817      	ldr	r0, [pc, #92]	; (80006b4 <start_recording+0x148>)
 8000656:	f008 ff65 	bl	8009524 <iprintf>
	file_counter++;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <start_recording+0x138>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <start_recording+0x138>)
 8000664:	701a      	strb	r2, [r3, #0]

	// creating a file
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 8000666:	220a      	movs	r2, #10
 8000668:	4911      	ldr	r1, [pc, #68]	; (80006b0 <start_recording+0x144>)
 800066a:	4813      	ldr	r0, [pc, #76]	; (80006b8 <start_recording+0x14c>)
 800066c:	f007 fd04 	bl	8008078 <f_open>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <start_recording+0x150>)
 8000676:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <start_recording+0x150>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d006      	beq.n	800068e <start_recording+0x122>
	{
		printf("error in creating a file: %d \n", sd_result);
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <start_recording+0x150>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <start_recording+0x154>)
 8000688:	f008 ff4c 	bl	8009524 <iprintf>
		while(1);
 800068c:	e7fe      	b.n	800068c <start_recording+0x120>
	}
	else
	{
		printf("succeeded in opening a file \n");
 800068e:	480d      	ldr	r0, [pc, #52]	; (80006c4 <start_recording+0x158>)
 8000690:	f008 ffae 	bl	80095f0 <puts>
	}
	wav_file_size = 0;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <start_recording+0x15c>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]


}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	20000000 	.word	0x20000000
 80006ac:	66666667 	.word	0x66666667
 80006b0:	20000030 	.word	0x20000030
 80006b4:	0800a324 	.word	0x0800a324
 80006b8:	200000c4 	.word	0x200000c4
 80006bc:	200000c0 	.word	0x200000c0
 80006c0:	0800a334 	.word	0x0800a334
 80006c4:	0800a354 	.word	0x0800a354
 80006c8:	200002f4 	.word	0x200002f4

080006cc <write2wave_file>:


void write2wave_file(uint8_t *data, uint16_t data_size)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	807b      	strh	r3, [r7, #2]

	uint32_t temp_number;
	printf("w\n");
 80006d8:	481d      	ldr	r0, [pc, #116]	; (8000750 <write2wave_file+0x84>)
 80006da:	f008 ff89 	bl	80095f0 <puts>
	if(first_time == 0)
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <write2wave_file+0x88>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d113      	bne.n	800070e <write2wave_file+0x42>
	{
		for(int i = 0; i < 44; i++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	e00a      	b.n	8000702 <write2wave_file+0x36>
		{
			*(data + i) = wav_file_header[i];
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	4919      	ldr	r1, [pc, #100]	; (8000758 <write2wave_file+0x8c>)
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	440a      	add	r2, r1
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3301      	adds	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b2b      	cmp	r3, #43	; 0x2b
 8000706:	ddf1      	ble.n	80006ec <write2wave_file+0x20>
		}
		first_time = 1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <write2wave_file+0x88>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 800070e:	887a      	ldrh	r2, [r7, #2]
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	4811      	ldr	r0, [pc, #68]	; (800075c <write2wave_file+0x90>)
 8000718:	f007 fe6c 	bl	80083f4 <f_write>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <write2wave_file+0x94>)
 8000722:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <write2wave_file+0x94>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d006      	beq.n	800073a <write2wave_file+0x6e>
	{
		printf("error in writing to the file: %d \n", sd_result);
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <write2wave_file+0x94>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <write2wave_file+0x98>)
 8000734:	f008 fef6 	bl	8009524 <iprintf>
		while(1);
 8000738:	e7fe      	b.n	8000738 <write2wave_file+0x6c>
	}
	wav_file_size += data_size;
 800073a:	887a      	ldrh	r2, [r7, #2]
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <write2wave_file+0x9c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4413      	add	r3, r2
 8000742:	4a09      	ldr	r2, [pc, #36]	; (8000768 <write2wave_file+0x9c>)
 8000744:	6013      	str	r3, [r2, #0]
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	0800a374 	.word	0x0800a374
 8000754:	200002f8 	.word	0x200002f8
 8000758:	20000000 	.word	0x20000000
 800075c:	200000c4 	.word	0x200000c4
 8000760:	200000c0 	.word	0x200000c0
 8000764:	0800a378 	.word	0x0800a378
 8000768:	200002f4 	.word	0x200002f4

0800076c <stop_recording>:

void stop_recording()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <stop_recording+0xc4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3b08      	subs	r3, #8
 8000778:	4a2d      	ldr	r2, [pc, #180]	; (8000830 <stop_recording+0xc4>)
 800077a:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <stop_recording+0xc4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <stop_recording+0xc8>)
 8000784:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <stop_recording+0xc4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <stop_recording+0xc8>)
 8000790:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <stop_recording+0xc4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	0c1b      	lsrs	r3, r3, #16
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <stop_recording+0xc8>)
 800079c:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <stop_recording+0xc4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	0e1b      	lsrs	r3, r3, #24
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <stop_recording+0xc8>)
 80007a8:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <stop_recording+0xc4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3b24      	subs	r3, #36	; 0x24
 80007b0:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <stop_recording+0xc4>)
 80007b2:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <stop_recording+0xc4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <stop_recording+0xc8>)
 80007bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <stop_recording+0xc4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <stop_recording+0xc8>)
 80007ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <stop_recording+0xc4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <stop_recording+0xc8>)
 80007d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <stop_recording+0xc4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	0e1b      	lsrs	r3, r3, #24
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <stop_recording+0xc8>)
 80007e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <stop_recording+0xcc>)
 80007ee:	f008 f81e 	bl	800882e <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80007f2:	1dbb      	adds	r3, r7, #6
 80007f4:	222c      	movs	r2, #44	; 0x2c
 80007f6:	490f      	ldr	r1, [pc, #60]	; (8000834 <stop_recording+0xc8>)
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <stop_recording+0xcc>)
 80007fa:	f007 fdfb 	bl	80083f4 <f_write>
	if(sd_result != 0)
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <stop_recording+0xd0>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <stop_recording+0xa8>
	{
		printf("error in updating the first sector: %d \n", sd_result);
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <stop_recording+0xd0>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <stop_recording+0xd4>)
 800080e:	f008 fe89 	bl	8009524 <iprintf>
		while(1);
 8000812:	e7fe      	b.n	8000812 <stop_recording+0xa6>
	}
	f_close(&wavFile);
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <stop_recording+0xcc>)
 8000816:	f007 ffe0 	bl	80087da <f_close>
	first_time = 0;
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <stop_recording+0xd8>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
	printf("closed the file \n");
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <stop_recording+0xdc>)
 8000822:	f008 fee5 	bl	80095f0 <puts>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200002f4 	.word	0x200002f4
 8000834:	20000000 	.word	0x20000000
 8000838:	200000c4 	.word	0x200000c4
 800083c:	200000c0 	.word	0x200000c0
 8000840:	0800a39c 	.word	0x0800a39c
 8000844:	200002f8 	.word	0x200002f8
 8000848:	0800a3c8 	.word	0x0800a3c8

0800084c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000854:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000858:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	2b00      	cmp	r3, #0
 8000862:	d013      	beq.n	800088c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000864:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000868:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800086c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000870:	2b00      	cmp	r3, #0
 8000872:	d00b      	beq.n	800088c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000874:	e000      	b.n	8000878 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000876:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000878:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f9      	beq.n	8000876 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000882:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800088c:	687b      	ldr	r3, [r7, #4]
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 fcaa 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f8a4 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a8:	f000 f97a 	bl	8000ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ac:	f000 f958 	bl	8000b60 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80008b0:	f000 f936 	bl	8000b20 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80008b4:	f005 f8cc 	bl	8005a50 <MX_FATFS_Init>
  MX_I2S2_Init();
 80008b8:	f000 f904 	bl	8000ac4 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */


  if(BSP_SD_Init() == MSD_OK)
 80008bc:	f005 f8e2 	bl	8005a84 <BSP_SD_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d118      	bne.n	80008f8 <main+0x5c>
  {
	  fresult = f_mount(&fatfs,"",1);
 80008c6:	2201      	movs	r2, #1
 80008c8:	493a      	ldr	r1, [pc, #232]	; (80009b4 <main+0x118>)
 80008ca:	483b      	ldr	r0, [pc, #236]	; (80009b8 <main+0x11c>)
 80008cc:	f007 fb8e 	bl	8007fec <f_mount>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <main+0x120>)
 80008d6:	701a      	strb	r2, [r3, #0]
	  fresult = f_open(&myfile,"sdio_testing.txt",FA_CREATE_ALWAYS|FA_WRITE);
 80008d8:	220a      	movs	r2, #10
 80008da:	4939      	ldr	r1, [pc, #228]	; (80009c0 <main+0x124>)
 80008dc:	4839      	ldr	r0, [pc, #228]	; (80009c4 <main+0x128>)
 80008de:	f007 fbcb 	bl	8008078 <f_open>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b35      	ldr	r3, [pc, #212]	; (80009bc <main+0x120>)
 80008e8:	701a      	strb	r2, [r3, #0]
	  f_printf(&myfile, "ahihi");
 80008ea:	4937      	ldr	r1, [pc, #220]	; (80009c8 <main+0x12c>)
 80008ec:	4835      	ldr	r0, [pc, #212]	; (80009c4 <main+0x128>)
 80008ee:	f008 fa17 	bl	8008d20 <f_printf>
	  f_close(&myfile);
 80008f2:	4834      	ldr	r0, [pc, #208]	; (80009c4 <main+0x128>)
 80008f4:	f007 ff71 	bl	80087da <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(button_flag)
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <main+0x130>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d031      	beq.n	8000966 <main+0xca>
	  {

		  if(start_stop_recording)
 8000902:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <main+0x134>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d011      	beq.n	8000930 <main+0x94>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 800090c:	4831      	ldr	r0, [pc, #196]	; (80009d4 <main+0x138>)
 800090e:	f001 fdcd 	bl	80024ac <HAL_I2S_DMAStop>
			  start_stop_recording = 0;
 8000912:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <main+0x134>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
			  stop_recording();
 8000918:	f7ff ff28 	bl	800076c <stop_recording>
			  half_i2s = 0;
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <main+0x13c>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
			  full_i2s = 0;
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <main+0x140>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
			  printf("stop recording \n");
 8000928:	482d      	ldr	r0, [pc, #180]	; (80009e0 <main+0x144>)
 800092a:	f008 fe61 	bl	80095f0 <puts>
 800092e:	e017      	b.n	8000960 <main+0xc4>
		  }
		  else
		  {
			  start_stop_recording = 1;
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <main+0x134>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
			  start_recording(I2S_AUDIOFREQ_32K);
 8000936:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800093a:	f7ff fe17 	bl	800056c <start_recording>
			  printf("start_recording %d and %d\n", half_i2s, full_i2s);
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <main+0x13c>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4619      	mov	r1, r3
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <main+0x140>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	461a      	mov	r2, r3
 800094e:	4825      	ldr	r0, [pc, #148]	; (80009e4 <main+0x148>)
 8000950:	f008 fde8 	bl	8009524 <iprintf>
			  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
 8000954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000958:	4923      	ldr	r1, [pc, #140]	; (80009e8 <main+0x14c>)
 800095a:	481e      	ldr	r0, [pc, #120]	; (80009d4 <main+0x138>)
 800095c:	f001 fcea 	bl	8002334 <HAL_I2S_Receive_DMA>

		  }
		  button_flag = 0;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <main+0x130>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(start_stop_recording == 1 && half_i2s == 1)
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <main+0x134>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b01      	cmp	r3, #1
 800096e:	d10c      	bne.n	800098a <main+0xee>
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <main+0x13c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b01      	cmp	r3, #1
 8000978:	d107      	bne.n	800098a <main+0xee>
	  	  {
	  		  write2wave_file(((uint8_t*)data_i2s),	 WAV_WRITE_SAMPLE_COUNT);
 800097a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800097e:	481a      	ldr	r0, [pc, #104]	; (80009e8 <main+0x14c>)
 8000980:	f7ff fea4 	bl	80006cc <write2wave_file>
	  		  half_i2s = 0;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <main+0x13c>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if(start_stop_recording == 1 && full_i2s == 1)
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <main+0x134>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b01      	cmp	r3, #1
 8000992:	d1b1      	bne.n	80008f8 <main+0x5c>
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <main+0x140>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b01      	cmp	r3, #1
 800099c:	d1ac      	bne.n	80008f8 <main+0x5c>
	  	  {
	  		  write2wave_file(((uint8_t*)data_i2s) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT);
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <main+0x150>)
 80009a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe91 	bl	80006cc <write2wave_file>
	  		  full_i2s = 0;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <main+0x140>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
	  if(button_flag)
 80009b0:	e7a2      	b.n	80008f8 <main+0x5c>
 80009b2:	bf00      	nop
 80009b4:	0800a3dc 	.word	0x0800a3dc
 80009b8:	20000428 	.word	0x20000428
 80009bc:	2000088c 	.word	0x2000088c
 80009c0:	0800a3e0 	.word	0x0800a3e0
 80009c4:	2000065c 	.word	0x2000065c
 80009c8:	0800a3f4 	.word	0x0800a3f4
 80009cc:	20001890 	.word	0x20001890
 80009d0:	20001891 	.word	0x20001891
 80009d4:	200002fc 	.word	0x200002fc
 80009d8:	20001892 	.word	0x20001892
 80009dc:	20001893 	.word	0x20001893
 80009e0:	0800a3fc 	.word	0x0800a3fc
 80009e4:	0800a40c 	.word	0x0800a40c
 80009e8:	20000890 	.word	0x20000890
 80009ec:	20001090 	.word	0x20001090

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	; 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f008 fed6 	bl	80097b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <SystemClock_Config+0xcc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a27      	ldr	r2, [pc, #156]	; (8000abc <SystemClock_Config+0xcc>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <SystemClock_Config+0xcc>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a6e:	2307      	movs	r3, #7
 8000a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fad6 	bl	8003028 <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a82:	f000 f94b 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2105      	movs	r1, #5
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 fd37 	bl	8003518 <HAL_RCC_ClockConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ab0:	f000 f934 	bl	8000d1c <Error_Handler>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3750      	adds	r7, #80	; 0x50
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_I2S2_Init+0x54>)
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <MX_I2S2_Init+0x58>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_I2S2_Init+0x54>)
 8000ad0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ad4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_I2S2_Init+0x54>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_I2S2_Init+0x54>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <MX_I2S2_Init+0x54>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_I2S2_Init+0x54>)
 8000aea:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000aee:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_I2S2_Init+0x54>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_I2S2_Init+0x54>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_I2S2_Init+0x54>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_I2S2_Init+0x54>)
 8000b04:	f001 fad6 	bl	80020b4 <HAL_I2S_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000b0e:	f000 f905 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200002fc 	.word	0x200002fc
 8000b1c:	40003800 	.word	0x40003800

08000b20 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b26:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <MX_SDIO_SD_Init+0x3c>)
 8000b28:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	200003a4 	.word	0x200003a4
 8000b5c:	40012c00 	.word	0x40012c00

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_DMA_Init+0x3c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <MX_DMA_Init+0x3c>)
 8000b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_DMA_Init+0x3c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	200e      	movs	r0, #14
 8000b88:	f000 fca7 	bl	80014da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f000 fcc0 	bl	8001512 <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a26      	ldr	r2, [pc, #152]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_GPIO_Init+0xd4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <MX_GPIO_Init+0xd8>)
 8000c58:	f001 f878 	bl	8001d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2006      	movs	r0, #6
 8000c62:	f000 fc3a 	bl	80014da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c66:	2006      	movs	r0, #6
 8000c68:	f000 fc53 	bl	8001512 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e009      	b.n	8000ca2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	60ba      	str	r2, [r7, #8]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fdd8 	bl	800084c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	dbf1      	blt.n	8000c8e <_write+0x12>
	}
	return len;
 8000caa:	687b      	ldr	r3, [r7, #4]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_I2S_RxCpltCallback>:
//	l,r,l,r,l,
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

	full_i2s = 1;
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <HAL_I2S_RxCpltCallback+0x1c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20001893 	.word	0x20001893

08000cd4 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	//sample_i2s = data_i2s[0];
	half_i2s = 1;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20001892 	.word	0x20001892

08000cf4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == B1_Pin)
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d102      	bne.n	8000d0a <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x24>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20001890 	.word	0x20001890

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a49      	ldr	r2, [pc, #292]	; (8000ec8 <HAL_I2S_MspInit+0x150>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	f040 808b 	bne.w	8000ec0 <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000daa:	2301      	movs	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000dae:	23c0      	movs	r3, #192	; 0xc0
 8000db0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fd98 	bl	80038f0 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000dc6:	f7ff ffa9 	bl	8000d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <HAL_I2S_MspInit+0x154>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a3e      	ldr	r2, [pc, #248]	; (8000ecc <HAL_I2S_MspInit+0x154>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <HAL_I2S_MspInit+0x154>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <HAL_I2S_MspInit+0x154>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a37      	ldr	r2, [pc, #220]	; (8000ecc <HAL_I2S_MspInit+0x154>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <HAL_I2S_MspInit+0x154>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <HAL_I2S_MspInit+0x154>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <HAL_I2S_MspInit+0x154>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <HAL_I2S_MspInit+0x154>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4825      	ldr	r0, [pc, #148]	; (8000ed0 <HAL_I2S_MspInit+0x158>)
 8000e3a:	f000 ff87 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e50:	2305      	movs	r3, #5
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481e      	ldr	r0, [pc, #120]	; (8000ed4 <HAL_I2S_MspInit+0x15c>)
 8000e5c:	f000 ff76 	bl	8001d4c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000e62:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <HAL_I2S_MspInit+0x164>)
 8000e64:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e7e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e86:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e96:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000ea6:	f000 fb4f 	bl	8001548 <HAL_DMA_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8000eb0:	f7ff ff34 	bl	8000d1c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000eb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_I2S_MspInit+0x160>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3738      	adds	r7, #56	; 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40003800 	.word	0x40003800
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	20000344 	.word	0x20000344
 8000edc:	40026058 	.word	0x40026058

08000ee0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <HAL_SD_MspInit+0xf4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d163      	bne.n	8000fca <HAL_SD_MspInit+0xea>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <HAL_SD_MspInit+0xf8>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a33      	ldr	r2, [pc, #204]	; (8000fd8 <HAL_SD_MspInit+0xf8>)
 8000f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <HAL_SD_MspInit+0xf8>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_SD_MspInit+0xf8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a2c      	ldr	r2, [pc, #176]	; (8000fd8 <HAL_SD_MspInit+0xf8>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_SD_MspInit+0xf8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <HAL_SD_MspInit+0xf8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <HAL_SD_MspInit+0xf8>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HAL_SD_MspInit+0xf8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f68:	230c      	movs	r3, #12
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	481a      	ldr	r0, [pc, #104]	; (8000fdc <HAL_SD_MspInit+0xfc>)
 8000f74:	f000 feea 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4811      	ldr	r0, [pc, #68]	; (8000fdc <HAL_SD_MspInit+0xfc>)
 8000f96:	f000 fed9 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000faa:	230c      	movs	r3, #12
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <HAL_SD_MspInit+0x100>)
 8000fb6:	f000 fec9 	bl	8001d4c <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2031      	movs	r0, #49	; 0x31
 8000fc0:	f000 fa8b 	bl	80014da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000fc4:	2031      	movs	r0, #49	; 0x31
 8000fc6:	f000 faa4 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012c00 	.word	0x40012c00
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f934 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800103c:	2001      	movs	r0, #1
 800103e:	f001 f821 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <DMA1_Stream3_IRQHandler+0x10>)
 800104e:	f000 fc13 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000344 	.word	0x20000344

0800105c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <SDIO_IRQHandler+0x10>)
 8001062:	f003 f9ab 	bl	80043bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200003a4 	.word	0x200003a4

08001070 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e00a      	b.n	8001098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001082:	f3af 8000 	nop.w
 8001086:	4601      	mov	r1, r0
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	b2ca      	uxtb	r2, r1
 8001090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	dbf0      	blt.n	8001082 <_read+0x12>
  }

  return len;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d2:	605a      	str	r2, [r3, #4]
  return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_isatty>:

int _isatty(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f008 fb82 	bl	800984c <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20020000 	.word	0x20020000
 8001174:	00004000 	.word	0x00004000
 8001178:	20001894 	.word	0x20001894
 800117c:	20001c28 	.word	0x20001c28

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011a8:	f7ff ffea 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	; (80011e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	; (80011f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f008 fb41 	bl	8009858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff fb61 	bl	800089c <main>
  bx  lr    
 80011da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80011e8:	0800a920 	.word	0x0800a920
  ldr r2, =_sbss
 80011ec:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80011f0:	20001c24 	.word	0x20001c24

080011f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_Init+0x40>)
 8001202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_Init+0x40>)
 800120e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_Init+0x40>)
 800121a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f94f 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001226:	200f      	movs	r0, #15
 8001228:	f000 f808 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800122c:	f7ff fd7c 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023c00 	.word	0x40023c00

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x54>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x58>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f967 	bl	800152e <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f000 f92f 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_InitTick+0x5c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	2000003c 	.word	0x2000003c
 8001294:	20000044 	.word	0x20000044
 8001298:	20000040 	.word	0x20000040

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000044 	.word	0x20000044
 80012c0:	20001898 	.word	0x20001898

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20001898 	.word	0x20001898

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000044 	.word	0x20000044

08001324 <__NVIC_SetPriorityGrouping>:
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <__NVIC_EnableIRQ+0x38>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff8e 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff29 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff3e 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff8e 	bl	8001418 <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5d 	bl	80013c4 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff31 	bl	8001388 <__NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa2 	bl	8001480 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff feb6 	bl	80012c4 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e099      	b.n	8001698 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2202      	movs	r2, #2
 8001568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001584:	e00f      	b.n	80015a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001586:	f7ff fe9d 	bl	80012c4 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b05      	cmp	r3, #5
 8001592:	d908      	bls.n	80015a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2220      	movs	r2, #32
 8001598:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2203      	movs	r2, #3
 800159e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e078      	b.n	8001698 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1e8      	bne.n	8001586 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <HAL_DMA_Init+0x158>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d107      	bne.n	8001610 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4313      	orrs	r3, r2
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4313      	orrs	r3, r2
 800160e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f023 0307 	bic.w	r3, r3, #7
 8001626:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	2b04      	cmp	r3, #4
 8001638:	d117      	bne.n	800166a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4313      	orrs	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00e      	beq.n	800166a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fb01 	bl	8001c54 <DMA_CheckFifoParam>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2240      	movs	r2, #64	; 0x40
 800165c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001666:	2301      	movs	r3, #1
 8001668:	e016      	b.n	8001698 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fab8 	bl	8001be8 <DMA_CalcBaseAndBitshift>
 8001678:	4603      	mov	r3, r0
 800167a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	223f      	movs	r2, #63	; 0x3f
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	f010803f 	.word	0xf010803f

080016a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_DMA_Start_IT+0x26>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e040      	b.n	800174c <HAL_DMA_Start_IT+0xa8>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d12f      	bne.n	800173e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2202      	movs	r2, #2
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fa4a 	bl	8001b8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	223f      	movs	r2, #63	; 0x3f
 80016fe:	409a      	lsls	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0216 	orr.w	r2, r2, #22
 8001712:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	2b00      	cmp	r3, #0
 800171a:	d007      	beq.n	800172c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0208 	orr.w	r2, r2, #8
 800172a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e005      	b.n	800174a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001746:	2302      	movs	r3, #2
 8001748:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800174a:	7dfb      	ldrb	r3, [r7, #23]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001762:	f7ff fdaf 	bl	80012c4 <HAL_GetTick>
 8001766:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d008      	beq.n	8001786 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e052      	b.n	800182c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0216 	bic.w	r2, r2, #22
 8001794:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d103      	bne.n	80017b6 <HAL_DMA_Abort+0x62>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0208 	bic.w	r2, r2, #8
 80017c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d6:	e013      	b.n	8001800 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017d8:	f7ff fd74 	bl	80012c4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d90c      	bls.n	8001800 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2203      	movs	r2, #3
 80017f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e015      	b.n	800182c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e4      	bne.n	80017d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001812:	223f      	movs	r2, #63	; 0x3f
 8001814:	409a      	lsls	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d004      	beq.n	8001852 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00c      	b.n	800186c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2205      	movs	r2, #5
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001884:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <HAL_DMA_IRQHandler+0x248>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a8e      	ldr	r2, [pc, #568]	; (8001ac4 <HAL_DMA_IRQHandler+0x24c>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0a9b      	lsrs	r3, r3, #10
 8001890:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2208      	movs	r2, #8
 80018a4:	409a      	lsls	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d01a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d013      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0204 	bic.w	r2, r2, #4
 80018ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2208      	movs	r2, #8
 80018d2:	409a      	lsls	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2201      	movs	r2, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d012      	beq.n	800191a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2201      	movs	r2, #1
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	f043 0202 	orr.w	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2204      	movs	r2, #4
 8001920:	409a      	lsls	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d012      	beq.n	8001950 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2204      	movs	r2, #4
 800193e:	409a      	lsls	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001948:	f043 0204 	orr.w	r2, r3, #4
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2210      	movs	r2, #16
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d043      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03c      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2210      	movs	r2, #16
 8001974:	409a      	lsls	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d018      	beq.n	80019ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d108      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d024      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
 80019a6:	e01f      	b.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01b      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
 80019b8:	e016      	b.n	80019e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0208 	bic.w	r2, r2, #8
 80019d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	2220      	movs	r2, #32
 80019ee:	409a      	lsls	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 808f 	beq.w	8001b18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8087 	beq.w	8001b18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0e:	2220      	movs	r2, #32
 8001a10:	409a      	lsls	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d136      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0216 	bic.w	r2, r2, #22
 8001a30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <HAL_DMA_IRQHandler+0x1da>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0208 	bic.w	r2, r2, #8
 8001a60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	223f      	movs	r2, #63	; 0x3f
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d07e      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
        }
        return;
 8001a8e:	e079      	b.n	8001b84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d01d      	beq.n	8001ada <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10d      	bne.n	8001ac8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d031      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e02c      	b.n	8001b18 <HAL_DMA_IRQHandler+0x2a0>
 8001abe:	bf00      	nop
 8001ac0:	2000003c 	.word	0x2000003c
 8001ac4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
 8001ad8:	e01e      	b.n	8001b18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10f      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0210 	bic.w	r2, r2, #16
 8001af6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d032      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d022      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2205      	movs	r2, #5
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d307      	bcc.n	8001b60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f2      	bne.n	8001b44 <HAL_DMA_IRQHandler+0x2cc>
 8001b5e:	e000      	b.n	8001b62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
 8001b82:	e000      	b.n	8001b86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b84:	bf00      	nop
    }
  }
}
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ba8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b40      	cmp	r3, #64	; 0x40
 8001bb8:	d108      	bne.n	8001bcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bca:	e007      	b.n	8001bdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3b10      	subs	r3, #16
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <DMA_CalcBaseAndBitshift+0x64>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <DMA_CalcBaseAndBitshift+0x68>)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d909      	bls.n	8001c2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c1e:	f023 0303 	bic.w	r3, r3, #3
 8001c22:	1d1a      	adds	r2, r3, #4
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	659a      	str	r2, [r3, #88]	; 0x58
 8001c28:	e007      	b.n	8001c3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c32:	f023 0303 	bic.w	r3, r3, #3
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	aaaaaaab 	.word	0xaaaaaaab
 8001c50:	0800a480 	.word	0x0800a480

08001c54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d11f      	bne.n	8001cae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d856      	bhi.n	8001d22 <DMA_CheckFifoParam+0xce>
 8001c74:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <DMA_CheckFifoParam+0x28>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001c9f 	.word	0x08001c9f
 8001c84:	08001c8d 	.word	0x08001c8d
 8001c88:	08001d23 	.word	0x08001d23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d046      	beq.n	8001d26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c9c:	e043      	b.n	8001d26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ca6:	d140      	bne.n	8001d2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cac:	e03d      	b.n	8001d2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb6:	d121      	bne.n	8001cfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d837      	bhi.n	8001d2e <DMA_CheckFifoParam+0xda>
 8001cbe:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <DMA_CheckFifoParam+0x70>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001cd5 	.word	0x08001cd5
 8001cc8:	08001cdb 	.word	0x08001cdb
 8001ccc:	08001cd5 	.word	0x08001cd5
 8001cd0:	08001ced 	.word	0x08001ced
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd8:	e030      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d025      	beq.n	8001d32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cea:	e022      	b.n	8001d32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cf4:	d11f      	bne.n	8001d36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cfa:	e01c      	b.n	8001d36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d903      	bls.n	8001d0a <DMA_CheckFifoParam+0xb6>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d003      	beq.n	8001d10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d08:	e018      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d0e:	e015      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00e      	beq.n	8001d3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d20:	e00b      	b.n	8001d3a <DMA_CheckFifoParam+0xe6>
      break;
 8001d22:	bf00      	nop
 8001d24:	e00a      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;
 8001d26:	bf00      	nop
 8001d28:	e008      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;
 8001d2a:	bf00      	nop
 8001d2c:	e006      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;
 8001d2e:	bf00      	nop
 8001d30:	e004      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;
 8001d32:	bf00      	nop
 8001d34:	e002      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d36:	bf00      	nop
 8001d38:	e000      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;
 8001d3a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e16b      	b.n	8002040 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 815a 	bne.w	800203a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80b4 	beq.w	800203a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b60      	ldr	r3, [pc, #384]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a5f      	ldr	r2, [pc, #380]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b5d      	ldr	r3, [pc, #372]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a5b      	ldr	r2, [pc, #364]	; (800205c <HAL_GPIO_Init+0x310>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_GPIO_Init+0x314>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02b      	beq.n	8001f72 <HAL_GPIO_Init+0x226>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_GPIO_Init+0x318>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x222>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_GPIO_Init+0x31c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x21e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4f      	ldr	r2, [pc, #316]	; (800206c <HAL_GPIO_Init+0x320>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x21a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x216>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_GPIO_Init+0x328>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x212>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4c      	ldr	r2, [pc, #304]	; (8002078 <HAL_GPIO_Init+0x32c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x20e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4b      	ldr	r2, [pc, #300]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x20a>
 8001f52:	2307      	movs	r3, #7
 8001f54:	e00e      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f56:	2308      	movs	r3, #8
 8001f58:	e00c      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f5a:	2306      	movs	r3, #6
 8001f5c:	e00a      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e008      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f72:	2300      	movs	r3, #0
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	f002 0203 	and.w	r2, r2, #3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f84:	4935      	ldr	r1, [pc, #212]	; (800205c <HAL_GPIO_Init+0x310>)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb6:	4a32      	ldr	r2, [pc, #200]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fbc:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe0:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200a:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_GPIO_Init+0x334>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_GPIO_Init+0x334>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_GPIO_Init+0x334>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3301      	adds	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b0f      	cmp	r3, #15
 8002044:	f67f ae90 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40013800 	.word	0x40013800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40020800 	.word	0x40020800
 800206c:	40020c00 	.word	0x40020c00
 8002070:	40021000 	.word	0x40021000
 8002074:	40021400 	.word	0x40021400
 8002078:	40021800 	.word	0x40021800
 800207c:	40021c00 	.word	0x40021c00
 8002080:	40013c00 	.word	0x40013c00

08002084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fe26 	bl	8000cf4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40013c00 	.word	0x40013c00

080020b4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e128      	b.n	8002318 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a90      	ldr	r2, [pc, #576]	; (8002320 <HAL_I2S_Init+0x26c>)
 80020de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7fe fe49 	bl	8000d78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020fc:	f023 030f 	bic.w	r3, r3, #15
 8002100:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2202      	movs	r2, #2
 8002108:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d060      	beq.n	80021d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800211a:	2310      	movs	r3, #16
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e001      	b.n	8002124 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002120:	2320      	movs	r3, #32
 8002122:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b20      	cmp	r3, #32
 800212a:	d802      	bhi.n	8002132 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002132:	2001      	movs	r0, #1
 8002134:	f001 fcbe 	bl	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002138:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002142:	d125      	bne.n	8002190 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d010      	beq.n	800216e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	fbb2 f2f3 	udiv	r2, r2, r3
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	3305      	adds	r3, #5
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e01f      	b.n	80021ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	fbb2 f2f3 	udiv	r2, r2, r3
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	461a      	mov	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	3305      	adds	r3, #5
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	e00e      	b.n	80021ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fbb2 f2f3 	udiv	r2, r2, r3
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	461a      	mov	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	3305      	adds	r3, #5
 80021ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4a5c      	ldr	r2, [pc, #368]	; (8002324 <HAL_I2S_Init+0x270>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	08db      	lsrs	r3, r3, #3
 80021b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	085b      	lsrs	r3, r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	e003      	b.n	80021dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d902      	bls.n	80021e8 <HAL_I2S_Init+0x134>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	2bff      	cmp	r3, #255	; 0xff
 80021e6:	d907      	bls.n	80021f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	f043 0210 	orr.w	r2, r3, #16
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e08f      	b.n	8002318 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	ea42 0103 	orr.w	r1, r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	430a      	orrs	r2, r1
 800220a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002216:	f023 030f 	bic.w	r3, r3, #15
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6851      	ldr	r1, [r2, #4]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6892      	ldr	r2, [r2, #8]
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	68d2      	ldr	r2, [r2, #12]
 8002228:	4311      	orrs	r1, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6992      	ldr	r2, [r2, #24]
 800222e:	430a      	orrs	r2, r1
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d161      	bne.n	8002308 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a38      	ldr	r2, [pc, #224]	; (8002328 <HAL_I2S_Init+0x274>)
 8002248:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a37      	ldr	r2, [pc, #220]	; (800232c <HAL_I2S_Init+0x278>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_I2S_Init+0x1a4>
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_I2S_Init+0x27c>)
 8002256:	e001      	b.n	800225c <HAL_I2S_Init+0x1a8>
 8002258:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	4932      	ldr	r1, [pc, #200]	; (800232c <HAL_I2S_Init+0x278>)
 8002264:	428a      	cmp	r2, r1
 8002266:	d101      	bne.n	800226c <HAL_I2S_Init+0x1b8>
 8002268:	4a31      	ldr	r2, [pc, #196]	; (8002330 <HAL_I2S_Init+0x27c>)
 800226a:	e001      	b.n	8002270 <HAL_I2S_Init+0x1bc>
 800226c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002270:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002274:	f023 030f 	bic.w	r3, r3, #15
 8002278:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2b      	ldr	r2, [pc, #172]	; (800232c <HAL_I2S_Init+0x278>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_I2S_Init+0x1d4>
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_I2S_Init+0x27c>)
 8002286:	e001      	b.n	800228c <HAL_I2S_Init+0x1d8>
 8002288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800228c:	2202      	movs	r2, #2
 800228e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <HAL_I2S_Init+0x278>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_I2S_Init+0x1ea>
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_I2S_Init+0x27c>)
 800229c:	e001      	b.n	80022a2 <HAL_I2S_Init+0x1ee>
 800229e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ae:	d003      	beq.n	80022b8 <HAL_I2S_Init+0x204>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d103      	bne.n	80022c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	e001      	b.n	80022c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022d8:	4313      	orrs	r3, r2
 80022da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	897b      	ldrh	r3, [r7, #10]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_I2S_Init+0x278>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_I2S_Init+0x24c>
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_I2S_Init+0x27c>)
 80022fe:	e001      	b.n	8002304 <HAL_I2S_Init+0x250>
 8002300:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002304:	897a      	ldrh	r2, [r7, #10]
 8002306:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	080029ed 	.word	0x080029ed
 8002324:	cccccccd 	.word	0xcccccccd
 8002328:	08002b75 	.word	0x08002b75
 800232c:	40003800 	.word	0x40003800
 8002330:	40003400 	.word	0x40003400

08002334 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_I2S_Receive_DMA+0x1a>
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0a1      	b.n	8002496 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_I2S_Receive_DMA+0x2e>
 800235e:	2302      	movs	r3, #2
 8002360:	e099      	b.n	8002496 <HAL_I2S_Receive_DMA+0x162>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d005      	beq.n	8002382 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800237e:	2302      	movs	r3, #2
 8002380:	e089      	b.n	8002496 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2204      	movs	r2, #4
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d002      	beq.n	80023ae <HAL_I2S_Receive_DMA+0x7a>
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d10a      	bne.n	80023c4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	865a      	strh	r2, [r3, #50]	; 0x32
 80023c2:	e005      	b.n	80023d0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	88fa      	ldrh	r2, [r7, #6]
 80023ce:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	4a32      	ldr	r2, [pc, #200]	; (80024a0 <HAL_I2S_Receive_DMA+0x16c>)
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <HAL_I2S_Receive_DMA+0x170>)
 80023de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	4a30      	ldr	r2, [pc, #192]	; (80024a8 <HAL_I2S_Receive_DMA+0x174>)
 80023e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023f6:	d10a      	bne.n	800240e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	4619      	mov	r1, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002424:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002426:	f7ff f93d 	bl	80016a4 <HAL_DMA_Start_IT>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00f      	beq.n	8002450 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f043 0208 	orr.w	r2, r3, #8
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e022      	b.n	8002496 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245a:	2b00      	cmp	r3, #0
 800245c:	d107      	bne.n	800246e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800246c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d107      	bne.n	800248c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	080028cb 	.word	0x080028cb
 80024a4:	08002889 	.word	0x08002889
 80024a8:	080028e7 	.word	0x080028e7

080024ac <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c0:	d004      	beq.n	80024cc <HAL_I2S_DMAStop+0x20>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80d1 	bne.w	800266e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00f      	beq.n	80024f4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff f93b 	bl	8001754 <HAL_DMA_Abort>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	f043 0208 	orr.w	r2, r3, #8
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80024f4:	2364      	movs	r3, #100	; 0x64
 80024f6:	2201      	movs	r2, #1
 80024f8:	2102      	movs	r1, #2
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fb00 	bl	8002b00 <I2S_WaitFlagStateUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800251e:	2364      	movs	r3, #100	; 0x64
 8002520:	2200      	movs	r2, #0
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 faeb 	bl	8002b00 <I2S_WaitFlagStateUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002556:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0202 	bic.w	r2, r2, #2
 8002574:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b05      	cmp	r3, #5
 8002580:	f040 8165 	bne.w	800284e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00f      	beq.n	80025ac <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f8df 	bl	8001754 <HAL_DMA_Abort>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	f043 0208 	orr.w	r2, r3, #8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a8a      	ldr	r2, [pc, #552]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <HAL_I2S_DMAStop+0x10e>
 80025b6:	4b8a      	ldr	r3, [pc, #552]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 80025b8:	e001      	b.n	80025be <HAL_I2S_DMAStop+0x112>
 80025ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4985      	ldr	r1, [pc, #532]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 80025c6:	428b      	cmp	r3, r1
 80025c8:	d101      	bne.n	80025ce <HAL_I2S_DMAStop+0x122>
 80025ca:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 80025cc:	e001      	b.n	80025d2 <HAL_I2S_DMAStop+0x126>
 80025ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d6:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a7e      	ldr	r2, [pc, #504]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_I2S_DMAStop+0x13e>
 80025e6:	4b7e      	ldr	r3, [pc, #504]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 80025e8:	e001      	b.n	80025ee <HAL_I2S_DMAStop+0x142>
 80025ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a79      	ldr	r2, [pc, #484]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_I2S_DMAStop+0x154>
 80025fc:	4b78      	ldr	r3, [pc, #480]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 80025fe:	e001      	b.n	8002604 <HAL_I2S_DMAStop+0x158>
 8002600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a73      	ldr	r2, [pc, #460]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_I2S_DMAStop+0x16c>
 8002614:	4b72      	ldr	r3, [pc, #456]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 8002616:	e001      	b.n	800261c <HAL_I2S_DMAStop+0x170>
 8002618:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	496e      	ldr	r1, [pc, #440]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 8002624:	428b      	cmp	r3, r1
 8002626:	d101      	bne.n	800262c <HAL_I2S_DMAStop+0x180>
 8002628:	4b6d      	ldr	r3, [pc, #436]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 800262a:	e001      	b.n	8002630 <HAL_I2S_DMAStop+0x184>
 800262c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002656:	e0fa      	b.n	800284e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5f      	ldr	r2, [pc, #380]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_I2S_DMAStop+0x1ba>
 8002662:	4b5f      	ldr	r3, [pc, #380]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 8002664:	e001      	b.n	800266a <HAL_I2S_DMAStop+0x1be>
 8002666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800266a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800266c:	e0ef      	b.n	800284e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002676:	d005      	beq.n	8002684 <HAL_I2S_DMAStop+0x1d8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002680:	f040 80e5 	bne.w	800284e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00f      	beq.n	80026ac <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff f85f 	bl	8001754 <HAL_DMA_Abort>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	f043 0208 	orr.w	r2, r3, #8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	f040 809a 	bne.w	80027ee <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00f      	beq.n	80026e2 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f844 	bl	8001754 <HAL_DMA_Abort>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f043 0208 	orr.w	r2, r3, #8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80026e2:	f7fe fdef 	bl	80012c4 <HAL_GetTick>
 80026e6:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80026e8:	e012      	b.n	8002710 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80026ea:	f7fe fdeb 	bl	80012c4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b64      	cmp	r3, #100	; 0x64
 80026f6:	d90b      	bls.n	8002710 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_I2S_DMAStop+0x272>
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 800271c:	e001      	b.n	8002722 <HAL_I2S_DMAStop+0x276>
 800271e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d1de      	bne.n	80026ea <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800272c:	e012      	b.n	8002754 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800272e:	f7fe fdc9 	bl	80012c4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	; 0x64
 800273a:	d90b      	bls.n	8002754 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_I2S_DMAStop+0x2b6>
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 8002760:	e001      	b.n	8002766 <HAL_I2S_DMAStop+0x2ba>
 8002762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	2b80      	cmp	r3, #128	; 0x80
 800276e:	d0de      	beq.n	800272e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_I2S_DMAStop+0x2d2>
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 800277c:	e001      	b.n	8002782 <HAL_I2S_DMAStop+0x2d6>
 800277e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4914      	ldr	r1, [pc, #80]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 800278a:	428b      	cmp	r3, r1
 800278c:	d101      	bne.n	8002792 <HAL_I2S_DMAStop+0x2e6>
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 8002790:	e001      	b.n	8002796 <HAL_I2S_DMAStop+0x2ea>
 8002792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_I2S_DMAStop+0x302>
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 80027ac:	e001      	b.n	80027b2 <HAL_I2S_DMAStop+0x306>
 80027ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_I2S_DMAStop+0x31a>
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 80027c4:	e001      	b.n	80027ca <HAL_I2S_DMAStop+0x31e>
 80027c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4902      	ldr	r1, [pc, #8]	; (80027dc <HAL_I2S_DMAStop+0x330>)
 80027d2:	428b      	cmp	r3, r1
 80027d4:	d106      	bne.n	80027e4 <HAL_I2S_DMAStop+0x338>
 80027d6:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <HAL_I2S_DMAStop+0x334>)
 80027d8:	e006      	b.n	80027e8 <HAL_I2S_DMAStop+0x33c>
 80027da:	bf00      	nop
 80027dc:	40003800 	.word	0x40003800
 80027e0:	40003400 	.word	0x40003400
 80027e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027e8:	f022 0202 	bic.w	r2, r2, #2
 80027ec:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fc:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282c:	d10c      	bne.n	8002848 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	77fb      	strb	r3, [r7, #31]
 8002846:	e002      	b.n	800284e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002856:	7ffb      	ldrb	r3, [r7, #31]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10e      	bne.n	80028bc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7fe f9f9 	bl	8000cb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f7fe f9fb 	bl	8000cd4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0203 	bic.w	r2, r2, #3
 8002902:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	f043 0208 	orr.w	r2, r3, #8
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff ffa5 	bl	8002874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	1c9a      	adds	r2, r3, #2
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10e      	bne.n	8002986 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002976:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff6d 	bl	8002860 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	b292      	uxth	r2, r2
 80029a2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	1c9a      	adds	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10e      	bne.n	80029e4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe f968 	bl	8000cb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d13a      	bne.n	8002a7e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d109      	bne.n	8002a26 <I2S_IRQHandler+0x3a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d102      	bne.n	8002a26 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ffb4 	bl	800298e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d126      	bne.n	8002a7e <I2S_IRQHandler+0x92>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d11f      	bne.n	8002a7e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a4c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	f043 0202 	orr.w	r2, r3, #2
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fefb 	bl	8002874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d136      	bne.n	8002af8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d109      	bne.n	8002aa8 <I2S_IRQHandler+0xbc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	2b80      	cmp	r3, #128	; 0x80
 8002aa0:	d102      	bne.n	8002aa8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ff45 	bl	8002932 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d122      	bne.n	8002af8 <I2S_IRQHandler+0x10c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d11b      	bne.n	8002af8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ace:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f043 0204 	orr.w	r2, r3, #4
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff febe 	bl	8002874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b10:	f7fe fbd8 	bl	80012c4 <HAL_GetTick>
 8002b14:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b16:	e018      	b.n	8002b4a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d014      	beq.n	8002b4a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002b20:	f7fe fbd0 	bl	80012c4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d902      	bls.n	8002b36 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e00f      	b.n	8002b6a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1d7      	bne.n	8002b18 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a92      	ldr	r2, [pc, #584]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b8e:	4b92      	ldr	r3, [pc, #584]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b90:	e001      	b.n	8002b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a8b      	ldr	r2, [pc, #556]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d101      	bne.n	8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bac:	4b8a      	ldr	r3, [pc, #552]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bae:	e001      	b.n	8002bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002bb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc0:	d004      	beq.n	8002bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 8099 	bne.w	8002cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d107      	bne.n	8002be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f925 	bl	8002e30 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f9c8 	bl	8002f90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b40      	cmp	r3, #64	; 0x40
 8002c08:	d13a      	bne.n	8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d035      	beq.n	8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6e      	ldr	r2, [pc, #440]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c1e:	4b6e      	ldr	r3, [pc, #440]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c20:	e001      	b.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4969      	ldr	r1, [pc, #420]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c2e:	428b      	cmp	r3, r1
 8002c30:	d101      	bne.n	8002c36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c32:	4b69      	ldr	r3, [pc, #420]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c34:	e001      	b.n	8002c3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c3e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f043 0202 	orr.w	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fdfa 	bl	8002874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	f040 80c3 	bne.w	8002e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80bd 	beq.w	8002e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ca6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a49      	ldr	r2, [pc, #292]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002cb2:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cb4:	e001      	b.n	8002cba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4944      	ldr	r1, [pc, #272]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cc2:	428b      	cmp	r3, r1
 8002cc4:	d101      	bne.n	8002cca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cc6:	4b44      	ldr	r3, [pc, #272]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cc8:	e001      	b.n	8002cce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cd2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f043 0204 	orr.w	r2, r3, #4
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff fdbc 	bl	8002874 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cfc:	e089      	b.n	8002e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d107      	bne.n	8002d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8be 	bl	8002e94 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f8fd 	bl	8002f2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d12f      	bne.n	8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02a      	beq.n	8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d54:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d62:	e001      	b.n	8002d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4919      	ldr	r1, [pc, #100]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d70:	428b      	cmp	r3, r1
 8002d72:	d101      	bne.n	8002d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d76:	e001      	b.n	8002d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d80:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f043 0202 	orr.w	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fd6c 	bl	8002874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d136      	bne.n	8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d031      	beq.n	8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dbc:	e001      	b.n	8002dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4902      	ldr	r1, [pc, #8]	; (8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dca:	428b      	cmp	r3, r1
 8002dcc:	d106      	bne.n	8002ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002dce:	4b02      	ldr	r3, [pc, #8]	; (8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dd0:	e006      	b.n	8002de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002dd2:	bf00      	nop
 8002dd4:	40003800 	.word	0x40003800
 8002dd8:	40003400 	.word	0x40003400
 8002ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002de4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002df4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f043 0204 	orr.w	r2, r3, #4
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff fd32 	bl	8002874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e10:	e000      	b.n	8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e12:	bf00      	nop
}
 8002e14:	bf00      	nop
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	1c99      	adds	r1, r3, #2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6251      	str	r1, [r2, #36]	; 0x24
 8002e42:	881a      	ldrh	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d113      	bne.n	8002e8a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ffc9 	bl	8002e1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	1c99      	adds	r1, r3, #2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ea6:	8819      	ldrh	r1, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <I2SEx_TxISR_I2SExt+0x90>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <I2SEx_TxISR_I2SExt+0x22>
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <I2SEx_TxISR_I2SExt+0x94>)
 8002eb4:	e001      	b.n	8002eba <I2SEx_TxISR_I2SExt+0x26>
 8002eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eba:	460a      	mov	r2, r1
 8002ebc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d121      	bne.n	8002f1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <I2SEx_TxISR_I2SExt+0x90>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d101      	bne.n	8002ee4 <I2SEx_TxISR_I2SExt+0x50>
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <I2SEx_TxISR_I2SExt+0x94>)
 8002ee2:	e001      	b.n	8002ee8 <I2SEx_TxISR_I2SExt+0x54>
 8002ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	490d      	ldr	r1, [pc, #52]	; (8002f24 <I2SEx_TxISR_I2SExt+0x90>)
 8002ef0:	428b      	cmp	r3, r1
 8002ef2:	d101      	bne.n	8002ef8 <I2SEx_TxISR_I2SExt+0x64>
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <I2SEx_TxISR_I2SExt+0x94>)
 8002ef6:	e001      	b.n	8002efc <I2SEx_TxISR_I2SExt+0x68>
 8002ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002efc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff81 	bl	8002e1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40003800 	.word	0x40003800
 8002f28:	40003400 	.word	0x40003400

08002f2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68d8      	ldr	r0, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	1c99      	adds	r1, r3, #2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f44:	b282      	uxth	r2, r0
 8002f46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d113      	bne.n	8002f88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ff4a 	bl	8002e1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a20      	ldr	r2, [pc, #128]	; (8003020 <I2SEx_RxISR_I2SExt+0x90>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <I2SEx_RxISR_I2SExt+0x16>
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <I2SEx_RxISR_I2SExt+0x94>)
 8002fa4:	e001      	b.n	8002faa <I2SEx_RxISR_I2SExt+0x1a>
 8002fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002faa:	68d8      	ldr	r0, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	1c99      	adds	r1, r3, #2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fb6:	b282      	uxth	r2, r0
 8002fb8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d121      	bne.n	8003016 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a12      	ldr	r2, [pc, #72]	; (8003020 <I2SEx_RxISR_I2SExt+0x90>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d101      	bne.n	8002fe0 <I2SEx_RxISR_I2SExt+0x50>
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <I2SEx_RxISR_I2SExt+0x94>)
 8002fde:	e001      	b.n	8002fe4 <I2SEx_RxISR_I2SExt+0x54>
 8002fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	490d      	ldr	r1, [pc, #52]	; (8003020 <I2SEx_RxISR_I2SExt+0x90>)
 8002fec:	428b      	cmp	r3, r1
 8002fee:	d101      	bne.n	8002ff4 <I2SEx_RxISR_I2SExt+0x64>
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <I2SEx_RxISR_I2SExt+0x94>)
 8002ff2:	e001      	b.n	8002ff8 <I2SEx_RxISR_I2SExt+0x68>
 8002ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ffc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d106      	bne.n	8003016 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff03 	bl	8002e1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40003800 	.word	0x40003800
 8003024:	40003400 	.word	0x40003400

08003028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e267      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d075      	beq.n	8003132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003046:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b04      	cmp	r3, #4
 8003050:	d00c      	beq.n	800306c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003052:	4b85      	ldr	r3, [pc, #532]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800305a:	2b08      	cmp	r3, #8
 800305c:	d112      	bne.n	8003084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305e:	4b82      	ldr	r3, [pc, #520]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306a:	d10b      	bne.n	8003084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	4b7e      	ldr	r3, [pc, #504]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d05b      	beq.n	8003130 <HAL_RCC_OscConfig+0x108>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d157      	bne.n	8003130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e242      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308c:	d106      	bne.n	800309c <HAL_RCC_OscConfig+0x74>
 800308e:	4b76      	ldr	r3, [pc, #472]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a75      	ldr	r2, [pc, #468]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0xb0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x98>
 80030a6:	4b70      	ldr	r3, [pc, #448]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6f      	ldr	r2, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6c      	ldr	r2, [pc, #432]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0xb0>
 80030c0:	4b69      	ldr	r3, [pc, #420]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a68      	ldr	r2, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b66      	ldr	r3, [pc, #408]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a65      	ldr	r2, [pc, #404]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe f8f0 	bl	80012c4 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fe f8ec 	bl	80012c4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e207      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b5b      	ldr	r3, [pc, #364]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0xc0>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe f8dc 	bl	80012c4 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe f8d8 	bl	80012c4 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1f3      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	4b51      	ldr	r3, [pc, #324]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0xe8>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d063      	beq.n	8003206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800313e:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003152:	2b08      	cmp	r3, #8
 8003154:	d11c      	bne.n	8003190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003156:	4b44      	ldr	r3, [pc, #272]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d116      	bne.n	8003190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x152>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1c7      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4937      	ldr	r1, [pc, #220]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	e03a      	b.n	8003206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003198:	4b34      	ldr	r3, [pc, #208]	; (800326c <HAL_RCC_OscConfig+0x244>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe f891 	bl	80012c4 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fe f88d 	bl	80012c4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1a8      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b28      	ldr	r3, [pc, #160]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4925      	ldr	r1, [pc, #148]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031da:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_OscConfig+0x244>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe f870 	bl	80012c4 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fe f86c 	bl	80012c4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e187      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d036      	beq.n	8003280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_RCC_OscConfig+0x248>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fe f850 	bl	80012c4 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003228:	f7fe f84c 	bl	80012c4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e167      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_OscConfig+0x240>)
 800323c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x200>
 8003246:	e01b      	b.n	8003280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_OscConfig+0x248>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7fe f839 	bl	80012c4 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	e00e      	b.n	8003274 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe f835 	bl	80012c4 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d907      	bls.n	8003274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e150      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
 8003268:	40023800 	.word	0x40023800
 800326c:	42470000 	.word	0x42470000
 8003270:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ea      	bne.n	8003256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8097 	beq.w	80033bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003292:	4b81      	ldr	r3, [pc, #516]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10f      	bne.n	80032be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	4b7d      	ldr	r3, [pc, #500]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a7c      	ldr	r2, [pc, #496]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b77      	ldr	r3, [pc, #476]	; (800349c <HAL_RCC_OscConfig+0x474>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4b74      	ldr	r3, [pc, #464]	; (800349c <HAL_RCC_OscConfig+0x474>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a73      	ldr	r2, [pc, #460]	; (800349c <HAL_RCC_OscConfig+0x474>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d6:	f7fd fff5 	bl	80012c4 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032de:	f7fd fff1 	bl	80012c4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e10c      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b6a      	ldr	r3, [pc, #424]	; (800349c <HAL_RCC_OscConfig+0x474>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x2ea>
 8003304:	4b64      	ldr	r3, [pc, #400]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a63      	ldr	r2, [pc, #396]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	e01c      	b.n	800334c <HAL_RCC_OscConfig+0x324>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x30c>
 800331a:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a5e      	ldr	r2, [pc, #376]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
 8003326:	4b5c      	ldr	r3, [pc, #368]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	4a5b      	ldr	r2, [pc, #364]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6713      	str	r3, [r2, #112]	; 0x70
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0x324>
 8003334:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a57      	ldr	r2, [pc, #348]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
 8003340:	4b55      	ldr	r3, [pc, #340]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a54      	ldr	r2, [pc, #336]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003346:	f023 0304 	bic.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d015      	beq.n	8003380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7fd ffb6 	bl	80012c4 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335a:	e00a      	b.n	8003372 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fd ffb2 	bl	80012c4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0cb      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	4b49      	ldr	r3, [pc, #292]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0ee      	beq.n	800335c <HAL_RCC_OscConfig+0x334>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003380:	f7fd ffa0 	bl	80012c4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003386:	e00a      	b.n	800339e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fd ff9c 	bl	80012c4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0b5      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1ee      	bne.n	8003388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b39      	ldr	r3, [pc, #228]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	4a38      	ldr	r2, [pc, #224]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a1 	beq.w	8003508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033c6:	4b34      	ldr	r3, [pc, #208]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d05c      	beq.n	800348c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d141      	bne.n	800345e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033da:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCC_OscConfig+0x478>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fd ff70 	bl	80012c4 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fd ff6c 	bl	80012c4 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e087      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	019b      	lsls	r3, r3, #6
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	491b      	ldr	r1, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x478>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7fd ff45 	bl	80012c4 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343e:	f7fd ff41 	bl	80012c4 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e05c      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x416>
 800345c:	e054      	b.n	8003508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_RCC_OscConfig+0x478>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fd ff2e 	bl	80012c4 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346c:	f7fd ff2a 	bl	80012c4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e045      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCC_OscConfig+0x470>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x444>
 800348a:	e03d      	b.n	8003508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e038      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
 8003498:	40023800 	.word	0x40023800
 800349c:	40007000 	.word	0x40007000
 80034a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x4ec>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d028      	beq.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d121      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d11a      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034dc:	4293      	cmp	r3, r2
 80034de:	d111      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	3b01      	subs	r3, #1
 80034ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0cc      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b68      	ldr	r3, [pc, #416]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d90c      	bls.n	8003554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0b8      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800358e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	494d      	ldr	r1, [pc, #308]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d044      	beq.n	8003638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d119      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e067      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4934      	ldr	r1, [pc, #208]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7fd fe5c 	bl	80012c4 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fd fe58 	bl	80012c4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e04f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d20c      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e032      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4916      	ldr	r1, [pc, #88]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800369e:	f000 f821 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	490a      	ldr	r1, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	5ccb      	ldrb	r3, [r1, r3]
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fdbc 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40023c00 	.word	0x40023c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	0800a470 	.word	0x0800a470
 80036dc:	2000003c 	.word	0x2000003c
 80036e0:	20000040 	.word	0x20000040

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e8:	b094      	sub	sp, #80	; 0x50
 80036ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	647b      	str	r3, [r7, #68]	; 0x44
 80036f0:	2300      	movs	r3, #0
 80036f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f4:	2300      	movs	r3, #0
 80036f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fc:	4b79      	ldr	r3, [pc, #484]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d00d      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x40>
 8003708:	2b08      	cmp	r3, #8
 800370a:	f200 80e1 	bhi.w	80038d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x34>
 8003712:	2b04      	cmp	r3, #4
 8003714:	d003      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x3a>
 8003716:	e0db      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003718:	4b73      	ldr	r3, [pc, #460]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800371a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800371c:	e0db      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800371e:	4b73      	ldr	r3, [pc, #460]	; (80038ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003720:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003722:	e0d8      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003724:	4b6f      	ldr	r3, [pc, #444]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800372c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800372e:	4b6d      	ldr	r3, [pc, #436]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d063      	beq.n	8003802 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373a:	4b6a      	ldr	r3, [pc, #424]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	099b      	lsrs	r3, r3, #6
 8003740:	2200      	movs	r2, #0
 8003742:	63bb      	str	r3, [r7, #56]	; 0x38
 8003744:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374c:	633b      	str	r3, [r7, #48]	; 0x30
 800374e:	2300      	movs	r3, #0
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
 8003752:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003756:	4622      	mov	r2, r4
 8003758:	462b      	mov	r3, r5
 800375a:	f04f 0000 	mov.w	r0, #0
 800375e:	f04f 0100 	mov.w	r1, #0
 8003762:	0159      	lsls	r1, r3, #5
 8003764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003768:	0150      	lsls	r0, r2, #5
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4621      	mov	r1, r4
 8003770:	1a51      	subs	r1, r2, r1
 8003772:	6139      	str	r1, [r7, #16]
 8003774:	4629      	mov	r1, r5
 8003776:	eb63 0301 	sbc.w	r3, r3, r1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003788:	4659      	mov	r1, fp
 800378a:	018b      	lsls	r3, r1, #6
 800378c:	4651      	mov	r1, sl
 800378e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003792:	4651      	mov	r1, sl
 8003794:	018a      	lsls	r2, r1, #6
 8003796:	4651      	mov	r1, sl
 8003798:	ebb2 0801 	subs.w	r8, r2, r1
 800379c:	4659      	mov	r1, fp
 800379e:	eb63 0901 	sbc.w	r9, r3, r1
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037b6:	4690      	mov	r8, r2
 80037b8:	4699      	mov	r9, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	eb18 0303 	adds.w	r3, r8, r3
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	462b      	mov	r3, r5
 80037c4:	eb49 0303 	adc.w	r3, r9, r3
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037d6:	4629      	mov	r1, r5
 80037d8:	024b      	lsls	r3, r1, #9
 80037da:	4621      	mov	r1, r4
 80037dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037e0:	4621      	mov	r1, r4
 80037e2:	024a      	lsls	r2, r1, #9
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ea:	2200      	movs	r2, #0
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037f4:	f7fc fd3c 	bl	8000270 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4613      	mov	r3, r2
 80037fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003800:	e058      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003802:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	099b      	lsrs	r3, r3, #6
 8003808:	2200      	movs	r2, #0
 800380a:	4618      	mov	r0, r3
 800380c:	4611      	mov	r1, r2
 800380e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003812:	623b      	str	r3, [r7, #32]
 8003814:	2300      	movs	r3, #0
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
 8003818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800381c:	4642      	mov	r2, r8
 800381e:	464b      	mov	r3, r9
 8003820:	f04f 0000 	mov.w	r0, #0
 8003824:	f04f 0100 	mov.w	r1, #0
 8003828:	0159      	lsls	r1, r3, #5
 800382a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800382e:	0150      	lsls	r0, r2, #5
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4641      	mov	r1, r8
 8003836:	ebb2 0a01 	subs.w	sl, r2, r1
 800383a:	4649      	mov	r1, r9
 800383c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800384c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003850:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003854:	ebb2 040a 	subs.w	r4, r2, sl
 8003858:	eb63 050b 	sbc.w	r5, r3, fp
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	00eb      	lsls	r3, r5, #3
 8003866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800386a:	00e2      	lsls	r2, r4, #3
 800386c:	4614      	mov	r4, r2
 800386e:	461d      	mov	r5, r3
 8003870:	4643      	mov	r3, r8
 8003872:	18e3      	adds	r3, r4, r3
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	464b      	mov	r3, r9
 8003878:	eb45 0303 	adc.w	r3, r5, r3
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800388a:	4629      	mov	r1, r5
 800388c:	028b      	lsls	r3, r1, #10
 800388e:	4621      	mov	r1, r4
 8003890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003894:	4621      	mov	r1, r4
 8003896:	028a      	lsls	r2, r1, #10
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389e:	2200      	movs	r2, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	61fa      	str	r2, [r7, #28]
 80038a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a8:	f7fc fce2 	bl	8000270 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4613      	mov	r3, r2
 80038b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	3301      	adds	r3, #1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038ce:	e002      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3750      	adds	r7, #80	; 0x50
 80038dc:	46bd      	mov	sp, r7
 80038de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	00f42400 	.word	0x00f42400
 80038ec:	007a1200 	.word	0x007a1200

080038f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003914:	2b00      	cmp	r3, #0
 8003916:	d035      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003918:	4b62      	ldr	r3, [pc, #392]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800391e:	f7fd fcd1 	bl	80012c4 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003926:	f7fd fccd 	bl	80012c4 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0b0      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003938:	4b5b      	ldr	r3, [pc, #364]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f0      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	019a      	lsls	r2, r3, #6
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	071b      	lsls	r3, r3, #28
 8003950:	4955      	ldr	r1, [pc, #340]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003958:	4b52      	ldr	r3, [pc, #328]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800395e:	f7fd fcb1 	bl	80012c4 <HAL_GetTick>
 8003962:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003966:	f7fd fcad 	bl	80012c4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e090      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003978:	4b4b      	ldr	r3, [pc, #300]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8083 	beq.w	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	4b44      	ldr	r3, [pc, #272]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	4a43      	ldr	r2, [pc, #268]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	6413      	str	r3, [r2, #64]	; 0x40
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039ae:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3e      	ldr	r2, [pc, #248]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039ba:	f7fd fc83 	bl	80012c4 <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fd fc7f 	bl	80012c4 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e062      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039d4:	4b35      	ldr	r3, [pc, #212]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039e0:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02f      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d028      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039fe:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a08:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a14:	4a24      	ldr	r2, [pc, #144]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a1a:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d114      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fd fc4d 	bl	80012c4 <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fd fc49 	bl	80012c4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e02a      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a44:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0ee      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a5c:	d10d      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a72:	490d      	ldr	r1, [pc, #52]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]
 8003a78:	e005      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a84:	6093      	str	r3, [r2, #8]
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a92:	4905      	ldr	r1, [pc, #20]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	42470068 	.word	0x42470068
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40007000 	.word	0x40007000
 8003ab0:	42470e40 	.word	0x42470e40

08003ab4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d13f      	bne.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ad2:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ae8:	d12f      	bne.n	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003aea:	4b1f      	ldr	r3, [pc, #124]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003aec:	617b      	str	r3, [r7, #20]
          break;
 8003aee:	e02f      	b.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afc:	d108      	bne.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003afe:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b06:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	e007      	b.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3a:	0f1b      	lsrs	r3, r3, #28
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	617b      	str	r3, [r7, #20]
          break;
 8003b48:	e002      	b.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
          break;
 8003b4e:	bf00      	nop
        }
      }
      break;
 8003b50:	e000      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8003b52:	bf00      	nop
    }
  }
  return frequency;
 8003b54:	697b      	ldr	r3, [r7, #20]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00bb8000 	.word	0x00bb8000
 8003b6c:	007a1200 	.word	0x007a1200
 8003b70:	00f42400 	.word	0x00f42400

08003b74 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e022      	b.n	8003bcc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fd f9a1 	bl	8000ee0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f814 	bl	8003bd4 <HAL_SD_InitCard>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00a      	b.n	8003bcc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003bd4:	b5b0      	push	{r4, r5, r7, lr}
 8003bd6:	b08e      	sub	sp, #56	; 0x38
 8003bd8:	af04      	add	r7, sp, #16
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003bf0:	2376      	movs	r3, #118	; 0x76
 8003bf2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681d      	ldr	r5, [r3, #0]
 8003bf8:	466c      	mov	r4, sp
 8003bfa:	f107 0314 	add.w	r3, r7, #20
 8003bfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c06:	f107 0308 	add.w	r3, r7, #8
 8003c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f001 f9ed 	bl	8004fec <SDIO_Init>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e04f      	b.n	8003cc4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003c24:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <HAL_SD_InitCard+0xf8>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fa25 	bl	800507e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_SD_InitCard+0xf8>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003c3a:	2002      	movs	r0, #2
 8003c3c:	f7fd fb4e 	bl	80012dc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f001 f877 	bl	8004d34 <SD_PowerON>
 8003c46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e02e      	b.n	8003cc4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 ff96 	bl	8004b98 <SD_InitCard>
 8003c6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e01b      	b.n	8003cc4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 fa84 	bl	80051a2 <SDMMC_CmdBlockLength>
 8003c9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00f      	beq.n	8003cc2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <HAL_SD_InitCard+0xfc>)
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3728      	adds	r7, #40	; 0x28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bdb0      	pop	{r4, r5, r7, pc}
 8003ccc:	422580a0 	.word	0x422580a0
 8003cd0:	004005ff 	.word	0x004005ff

08003cd4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b092      	sub	sp, #72	; 0x48
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003ce2:	f7fd faef 	bl	80012c4 <HAL_GetTick>
 8003ce6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e1c5      	b.n	8004092 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	f040 81b8 	bne.w	8004084 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	441a      	add	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d907      	bls.n	8003d38 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e1ac      	b.n	8004092 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2200      	movs	r2, #0
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d002      	beq.n	8003d56 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	025b      	lsls	r3, r3, #9
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	025b      	lsls	r3, r3, #9
 8003d60:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d62:	2390      	movs	r3, #144	; 0x90
 8003d64:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d66:	2302      	movs	r3, #2
 8003d68:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f107 0214 	add.w	r2, r7, #20
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 f9e4 	bl	800514a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d90a      	bls.n	8003d9e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d94:	4618      	mov	r0, r3
 8003d96:	f001 fa48 	bl	800522a <SDMMC_CmdReadMultiBlock>
 8003d9a:	6478      	str	r0, [r7, #68]	; 0x44
 8003d9c:	e009      	b.n	8003db2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 fa1b 	bl	80051e6 <SDMMC_CmdReadSingleBlock>
 8003db0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d012      	beq.n	8003dde <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a7e      	ldr	r2, [pc, #504]	; (8003fb8 <HAL_SD_ReadBlocks+0x2e4>)
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e159      	b.n	8004092 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003de2:	e061      	b.n	8003ea8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d03c      	beq.n	8003e6c <HAL_SD_ReadBlocks+0x198>
 8003df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d039      	beq.n	8003e6c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8003dfc:	e033      	b.n	8003e66 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f001 f91d 	bl	8005042 <SDIO_ReadFIFO>
 8003e08:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	3301      	adds	r3, #1
 8003e16:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e30:	3b01      	subs	r3, #1
 8003e32:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	3301      	adds	r3, #1
 8003e42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e46:	3b01      	subs	r3, #1
 8003e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	0e1b      	lsrs	r3, r3, #24
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	3301      	adds	r3, #1
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e62:	3301      	adds	r3, #1
 8003e64:	643b      	str	r3, [r7, #64]	; 0x40
 8003e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e68:	2b07      	cmp	r3, #7
 8003e6a:	d9c8      	bls.n	8003dfe <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e6c:	f7fd fa2a 	bl	80012c4 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d902      	bls.n	8003e82 <HAL_SD_ReadBlocks+0x1ae>
 8003e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d112      	bne.n	8003ea8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a4c      	ldr	r2, [pc, #304]	; (8003fb8 <HAL_SD_ReadBlocks+0x2e4>)
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e0f4      	b.n	8004092 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eae:	f240 332a 	movw	r3, #810	; 0x32a
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d095      	beq.n	8003de4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d022      	beq.n	8003f0c <HAL_SD_ReadBlocks+0x238>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d91f      	bls.n	8003f0c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d01b      	beq.n	8003f0c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 fa0d 	bl	80052f8 <SDMMC_CmdStopTransfer>
 8003ede:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a33      	ldr	r2, [pc, #204]	; (8003fb8 <HAL_SD_ReadBlocks+0x2e4>)
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0c2      	b.n	8004092 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_SD_ReadBlocks+0x254>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d012      	beq.n	8003f4e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <HAL_SD_ReadBlocks+0x2e4>)
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	f043 0208 	orr.w	r2, r3, #8
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0a1      	b.n	8004092 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d012      	beq.n	8003f82 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <HAL_SD_ReadBlocks+0x2e4>)
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	f043 0202 	orr.w	r2, r3, #2
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e087      	b.n	8004092 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d064      	beq.n	800405a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <HAL_SD_ReadBlocks+0x2e4>)
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e06d      	b.n	8004092 <HAL_SD_ReadBlocks+0x3be>
 8003fb6:	bf00      	nop
 8003fb8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 f83e 	bl	8005042 <SDIO_ReadFIFO>
 8003fc6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe8:	3301      	adds	r3, #1
 8003fea:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	3301      	adds	r3, #1
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004004:	3b01      	subs	r3, #1
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	0e1b      	lsrs	r3, r3, #24
 800400c:	b2da      	uxtb	r2, r3
 800400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004010:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004014:	3301      	adds	r3, #1
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401a:	3b01      	subs	r3, #1
 800401c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800401e:	f7fd f951 	bl	80012c4 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800402a:	429a      	cmp	r2, r3
 800402c:	d902      	bls.n	8004034 <HAL_SD_ReadBlocks+0x360>
 800402e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004030:	2b00      	cmp	r3, #0
 8004032:	d112      	bne.n	800405a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_SD_ReadBlocks+0x3c8>)
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e01b      	b.n	8004092 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_SD_ReadBlocks+0x39a>
 8004068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1a6      	bne.n	8003fbc <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f240 523a 	movw	r2, #1338	; 0x53a
 8004076:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e006      	b.n	8004092 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3748      	adds	r7, #72	; 0x48
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	004005ff 	.word	0x004005ff

080040a0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b092      	sub	sp, #72	; 0x48
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80040ae:	f7fd f909 	bl	80012c4 <HAL_GetTick>
 80040b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e16d      	b.n	80043ae <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	f040 8160 	bne.w	80043a0 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80040e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	441a      	add	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d907      	bls.n	8004104 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e154      	b.n	80043ae <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2203      	movs	r2, #3
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2200      	movs	r2, #0
 8004112:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	2b01      	cmp	r3, #1
 800411a:	d002      	beq.n	8004122 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	025b      	lsls	r3, r3, #9
 8004120:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
 8004126:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	025b      	lsls	r3, r3, #9
 800412c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800412e:	2390      	movs	r3, #144	; 0x90
 8004130:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004132:	2300      	movs	r3, #0
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004136:	2300      	movs	r3, #0
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800413a:	2301      	movs	r3, #1
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f107 0218 	add.w	r2, r7, #24
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fffe 	bl	800514a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d90a      	bls.n	800416a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004160:	4618      	mov	r0, r3
 8004162:	f001 f8a6 	bl	80052b2 <SDMMC_CmdWriteMultiBlock>
 8004166:	6478      	str	r0, [r7, #68]	; 0x44
 8004168:	e009      	b.n	800417e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2210      	movs	r2, #16
 800416e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004176:	4618      	mov	r0, r3
 8004178:	f001 f879 	bl	800526e <SDMMC_CmdWriteSingleBlock>
 800417c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800417e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004180:	2b00      	cmp	r3, #0
 8004182:	d012      	beq.n	80041aa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a8b      	ldr	r2, [pc, #556]	; (80043b8 <HAL_SD_WriteBlocks+0x318>)
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004192:	431a      	orrs	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e101      	b.n	80043ae <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80041ae:	e065      	b.n	800427c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d040      	beq.n	8004240 <HAL_SD_WriteBlocks+0x1a0>
 80041be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d03d      	beq.n	8004240 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80041c4:	2300      	movs	r3, #0
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40
 80041c8:	e037      	b.n	800423a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80041ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d2:	3301      	adds	r3, #1
 80041d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80041d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d8:	3b01      	subs	r3, #1
 80041da:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	021a      	lsls	r2, r3, #8
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ea:	3301      	adds	r3, #1
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80041ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f0:	3b01      	subs	r3, #1
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	041a      	lsls	r2, r3, #16
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004202:	3301      	adds	r3, #1
 8004204:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004208:	3b01      	subs	r3, #1
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800420c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	061a      	lsls	r2, r3, #24
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421a:	3301      	adds	r3, #1
 800421c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800421e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004220:	3b01      	subs	r3, #1
 8004222:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f107 0214 	add.w	r2, r7, #20
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f000 ff14 	bl	800505c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004236:	3301      	adds	r3, #1
 8004238:	643b      	str	r3, [r7, #64]	; 0x40
 800423a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423c:	2b07      	cmp	r3, #7
 800423e:	d9c4      	bls.n	80041ca <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004240:	f7fd f840 	bl	80012c4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800424c:	429a      	cmp	r2, r3
 800424e:	d902      	bls.n	8004256 <HAL_SD_WriteBlocks+0x1b6>
 8004250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004252:	2b00      	cmp	r3, #0
 8004254:	d112      	bne.n	800427c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a57      	ldr	r2, [pc, #348]	; (80043b8 <HAL_SD_WriteBlocks+0x318>)
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004264:	431a      	orrs	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e098      	b.n	80043ae <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004282:	f240 331a 	movw	r3, #794	; 0x31a
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d091      	beq.n	80041b0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d022      	beq.n	80042e0 <HAL_SD_WriteBlocks+0x240>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d91f      	bls.n	80042e0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d01b      	beq.n	80042e0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 f823 	bl	80052f8 <SDMMC_CmdStopTransfer>
 80042b2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80042b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d012      	beq.n	80042e0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a3e      	ldr	r2, [pc, #248]	; (80043b8 <HAL_SD_WriteBlocks+0x318>)
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e066      	b.n	80043ae <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_SD_WriteBlocks+0x25c>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d012      	beq.n	8004322 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <HAL_SD_WriteBlocks+0x318>)
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	f043 0208 	orr.w	r2, r3, #8
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e045      	b.n	80043ae <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d012      	beq.n	8004356 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <HAL_SD_WriteBlocks+0x318>)
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	f043 0202 	orr.w	r2, r3, #2
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e02b      	b.n	80043ae <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	d012      	beq.n	800438a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_SD_WriteBlocks+0x318>)
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	f043 0210 	orr.w	r2, r3, #16
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e011      	b.n	80043ae <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004392:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e006      	b.n	80043ae <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3748      	adds	r7, #72	; 0x48
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	004005ff 	.word	0x004005ff

080043bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_SD_IRQHandler+0x2e>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fd5c 	bl	8004ea0 <SD_Read_IT>
 80043e8:	e165      	b.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 808f 	beq.w	8004518 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004402:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004412:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004416:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d039      	beq.n	80044a6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <HAL_SD_IRQHandler+0x8a>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d011      	beq.n	800446a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f000 ff54 	bl	80052f8 <SDMMC_CmdStopTransfer>
 8004450:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f92f 	bl	80046c8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004472:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <HAL_SD_IRQHandler+0xda>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f001 fb7a 	bl	8005b90 <HAL_SD_RxCpltCallback>
 800449c:	e10b      	b.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f001 fb6c 	bl	8005b7c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80044a4:	e107      	b.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8102 	beq.w	80046b6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d011      	beq.n	80044e0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 ff19 	bl	80052f8 <SDMMC_CmdStopTransfer>
 80044c6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8f4 	bl	80046c8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f040 80e5 	bne.w	80046b6 <HAL_SD_IRQHandler+0x2fa>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 80df 	bne.w	80046b6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0208 	bic.w	r2, r2, #8
 8004506:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f001 fb33 	bl	8005b7c <HAL_SD_TxCpltCallback>
}
 8004516:	e0ce      	b.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d008      	beq.n	8004538 <HAL_SD_IRQHandler+0x17c>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fd06 	bl	8004f42 <SD_Write_IT>
 8004536:	e0be      	b.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800453e:	f240 233a 	movw	r3, #570	; 0x23a
 8004542:	4013      	ands	r3, r2
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80b6 	beq.w	80046b6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	f043 0202 	orr.w	r2, r3, #2
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	f043 0208 	orr.w	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	f043 0210 	orr.w	r2, r3, #16
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	f043 0208 	orr.w	r2, r3, #8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f240 723a 	movw	r2, #1850	; 0x73a
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80045e4:	f023 0302 	bic.w	r3, r3, #2
 80045e8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fe82 	bl	80052f8 <SDMMC_CmdStopTransfer>
 80045f4:	4602      	mov	r2, r0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f855 	bl	80046c8 <HAL_SD_ErrorCallback>
}
 800461e:	e04a      	b.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d045      	beq.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_SD_IRQHandler+0x282>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d011      	beq.n	8004662 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <HAL_SD_IRQHandler+0x304>)
 8004644:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd f8f2 	bl	8001834 <HAL_DMA_Abort_IT>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d02f      	beq.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fa2e 	bl	8004abc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004660:	e029      	b.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d104      	bne.n	8004676 <HAL_SD_IRQHandler+0x2ba>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d011      	beq.n	800469a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <HAL_SD_IRQHandler+0x308>)
 800467c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd f8d6 	bl	8001834 <HAL_DMA_Abort_IT>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d013      	beq.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fa49 	bl	8004b2a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004698:	e00d      	b.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f001 fa5a 	bl	8005b68 <HAL_SD_AbortCallback>
}
 80046b4:	e7ff      	b.n	80046b6 <HAL_SD_IRQHandler+0x2fa>
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	08004abd 	.word	0x08004abd
 80046c4:	08004b2b 	.word	0x08004b2b

080046c8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ea:	0f9b      	lsrs	r3, r3, #30
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f6:	0e9b      	lsrs	r3, r3, #26
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004708:	0e1b      	lsrs	r3, r3, #24
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	b2da      	uxtb	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800471a:	0c1b      	lsrs	r3, r3, #16
 800471c:	b2da      	uxtb	r2, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	b2da      	uxtb	r2, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004732:	b2da      	uxtb	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800473c:	0d1b      	lsrs	r3, r3, #20
 800473e:	b29a      	uxth	r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	b2da      	uxtb	r2, r3
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800475a:	0bdb      	lsrs	r3, r3, #15
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	b2da      	uxtb	r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800476c:	0b9b      	lsrs	r3, r3, #14
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	b2da      	uxtb	r2, r3
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800477e:	0b5b      	lsrs	r3, r3, #13
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	b2da      	uxtb	r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004790:	0b1b      	lsrs	r3, r3, #12
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	b2da      	uxtb	r2, r3
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d163      	bne.n	8004874 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b0:	009a      	lsls	r2, r3, #2
 80047b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047b6:	4013      	ands	r3, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80047bc:	0f92      	lsrs	r2, r2, #30
 80047be:	431a      	orrs	r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c8:	0edb      	lsrs	r3, r3, #27
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047da:	0e1b      	lsrs	r3, r3, #24
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ec:	0d5b      	lsrs	r3, r3, #21
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fe:	0c9b      	lsrs	r3, r3, #18
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	b2da      	uxtb	r2, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004810:	0bdb      	lsrs	r3, r3, #15
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	b2da      	uxtb	r2, r3
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	7e1b      	ldrb	r3, [r3, #24]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	3302      	adds	r3, #2
 8004834:	2201      	movs	r2, #1
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800483e:	fb03 f202 	mul.w	r2, r3, r2
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	7a1b      	ldrb	r3, [r3, #8]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	2201      	movs	r2, #1
 8004852:	409a      	lsls	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004860:	0a52      	lsrs	r2, r2, #9
 8004862:	fb03 f202 	mul.w	r2, r3, r2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004870:	661a      	str	r2, [r3, #96]	; 0x60
 8004872:	e031      	b.n	80048d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004878:	2b01      	cmp	r3, #1
 800487a:	d11d      	bne.n	80048b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488a:	0c1b      	lsrs	r3, r3, #16
 800488c:	431a      	orrs	r2, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	3301      	adds	r3, #1
 8004898:	029a      	lsls	r2, r3, #10
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	661a      	str	r2, [r3, #96]	; 0x60
 80048b6:	e00f      	b.n	80048d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a58      	ldr	r2, [pc, #352]	; (8004a20 <HAL_SD_GetCardCSD+0x344>)
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e09d      	b.n	8004a14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048dc:	0b9b      	lsrs	r3, r3, #14
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ee:	09db      	lsrs	r3, r3, #7
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004906:	b2da      	uxtb	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	0fdb      	lsrs	r3, r3, #31
 8004912:	b2da      	uxtb	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	0f5b      	lsrs	r3, r3, #29
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	b2da      	uxtb	r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492e:	0e9b      	lsrs	r3, r3, #26
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	b2da      	uxtb	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	0d9b      	lsrs	r3, r3, #22
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	b2da      	uxtb	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	0d5b      	lsrs	r3, r3, #21
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	0c1b      	lsrs	r3, r3, #16
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	b2da      	uxtb	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	0bdb      	lsrs	r3, r3, #15
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	0b9b      	lsrs	r3, r3, #14
 8004998:	b2db      	uxtb	r3, r3
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	0b5b      	lsrs	r3, r3, #13
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	0b1b      	lsrs	r3, r3, #12
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	0a9b      	lsrs	r3, r3, #10
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	004005ff 	.word	0x004005ff

08004a24 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004a88:	f107 030c 	add.w	r3, r7, #12
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f9de 	bl	8004e50 <SD_SendStatus>
 8004a94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	0a5b      	lsrs	r3, r3, #9
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004ab2:	693b      	ldr	r3, [r7, #16]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ad2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ffd1 	bl	8004a7c <HAL_SD_GetCardState>
 8004ada:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b06      	cmp	r3, #6
 8004aee:	d002      	beq.n	8004af6 <SD_DMATxAbort+0x3a>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b05      	cmp	r3, #5
 8004af4:	d10a      	bne.n	8004b0c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fbfc 	bl	80052f8 <SDMMC_CmdStopTransfer>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	431a      	orrs	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d103      	bne.n	8004b1c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f001 f827 	bl	8005b68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b1a:	e002      	b.n	8004b22 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff fdd3 	bl	80046c8 <HAL_SD_ErrorCallback>
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b40:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff ff9a 	bl	8004a7c <HAL_SD_GetCardState>
 8004b48:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b06      	cmp	r3, #6
 8004b5c:	d002      	beq.n	8004b64 <SD_DMARxAbort+0x3a>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b05      	cmp	r3, #5
 8004b62:	d10a      	bne.n	8004b7a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fbc5 	bl	80052f8 <SDMMC_CmdStopTransfer>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d103      	bne.n	8004b8a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fff0 	bl	8005b68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b88:	e002      	b.n	8004b90 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff fd9c 	bl	80046c8 <HAL_SD_ErrorCallback>
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b98:	b5b0      	push	{r4, r5, r7, lr}
 8004b9a:	b094      	sub	sp, #80	; 0x50
 8004b9c:	af04      	add	r7, sp, #16
 8004b9e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fa76 	bl	800509a <SDIO_GetPowerState>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004bb8:	e0b8      	b.n	8004d2c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d02f      	beq.n	8004c22 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fc5d 	bl	8005486 <SDMMC_CmdSendCID>
 8004bcc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <SD_InitCard+0x40>
    {
      return errorstate;
 8004bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd6:	e0a9      	b.n	8004d2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 faa0 	bl	8005124 <SDIO_GetResponse>
 8004be4:	4602      	mov	r2, r0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2104      	movs	r1, #4
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fa97 	bl	8005124 <SDIO_GetResponse>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2108      	movs	r1, #8
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fa8e 	bl	8005124 <SDIO_GetResponse>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	210c      	movs	r1, #12
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fa85 	bl	8005124 <SDIO_GetResponse>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d00d      	beq.n	8004c46 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f107 020e 	add.w	r2, r7, #14
 8004c32:	4611      	mov	r1, r2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fc63 	bl	8005500 <SDMMC_CmdSetRelAdd>
 8004c3a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <SD_InitCard+0xae>
    {
      return errorstate;
 8004c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c44:	e072      	b.n	8004d2c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d036      	beq.n	8004cbc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004c4e:	89fb      	ldrh	r3, [r7, #14]
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	4619      	mov	r1, r3
 8004c62:	4610      	mov	r0, r2
 8004c64:	f000 fc2d 	bl	80054c2 <SDMMC_CmdSendCSD>
 8004c68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	e05b      	b.n	8004d2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fa52 	bl	8005124 <SDIO_GetResponse>
 8004c80:	4602      	mov	r2, r0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2104      	movs	r1, #4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fa49 	bl	8005124 <SDIO_GetResponse>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2108      	movs	r1, #8
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fa40 	bl	8005124 <SDIO_GetResponse>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	210c      	movs	r1, #12
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fa37 	bl	8005124 <SDIO_GetResponse>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2104      	movs	r1, #4
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fa2e 	bl	8005124 <SDIO_GetResponse>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	0d1a      	lsrs	r2, r3, #20
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004cd0:	f107 0310 	add.w	r3, r7, #16
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff fd00 	bl	80046dc <HAL_SD_GetCardCSD>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ce2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ce6:	e021      	b.n	8004d2c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6819      	ldr	r1, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	041b      	lsls	r3, r3, #16
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	461c      	mov	r4, r3
 8004cf6:	4615      	mov	r5, r2
 8004cf8:	4622      	mov	r2, r4
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	f000 fb1d 	bl	800533c <SDMMC_CmdSelDesel>
 8004d02:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <SD_InitCard+0x176>
  {
    return errorstate;
 8004d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0c:	e00e      	b.n	8004d2c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681d      	ldr	r5, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	466c      	mov	r4, sp
 8004d16:	f103 0210 	add.w	r2, r3, #16
 8004d1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d20:	3304      	adds	r3, #4
 8004d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 f961 	bl	8004fec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3740      	adds	r7, #64	; 0x40
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bdb0      	pop	{r4, r5, r7, pc}

08004d34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fb18 	bl	8005382 <SDMMC_CmdGoIdleState>
 8004d52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <SD_PowerON+0x2a>
  {
    return errorstate;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	e072      	b.n	8004e44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fb2b 	bl	80053be <SDMMC_CmdOperCond>
 8004d68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00d      	beq.n	8004d8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fb01 	bl	8005382 <SDMMC_CmdGoIdleState>
 8004d80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	e05b      	b.n	8004e44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d137      	bne.n	8004e0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fb2b 	bl	80053fc <SDMMC_CmdAppCommand>
 8004da6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d02d      	beq.n	8004e0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004db2:	e047      	b.n	8004e44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fb1e 	bl	80053fc <SDMMC_CmdAppCommand>
 8004dc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <SD_PowerON+0x98>
    {
      return errorstate;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	e03b      	b.n	8004e44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	491e      	ldr	r1, [pc, #120]	; (8004e4c <SD_PowerON+0x118>)
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fb34 	bl	8005440 <SDMMC_CmdAppOperCommand>
 8004dd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004de4:	e02e      	b.n	8004e44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f999 	bl	8005124 <SDIO_GetResponse>
 8004df2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	0fdb      	lsrs	r3, r3, #31
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <SD_PowerON+0xcc>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <SD_PowerON+0xce>
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]

    count++;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3301      	adds	r3, #1
 8004e08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d802      	bhi.n	8004e1a <SD_PowerON+0xe6>
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0cc      	beq.n	8004db4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d902      	bls.n	8004e2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e28:	e00c      	b.n	8004e44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44
 8004e3a:	e002      	b.n	8004e42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	c1100000 	.word	0xc1100000

08004e50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d102      	bne.n	8004e66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e64:	e018      	b.n	8004e98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f000 fb65 	bl	8005542 <SDMMC_CmdSendStatus>
 8004e78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	e009      	b.n	8004e98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f94a 	bl	8005124 <SDIO_GetResponse>
 8004e90:	4602      	mov	r2, r0
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d03f      	beq.n	8004f3a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e033      	b.n	8004f28 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 f8bc 	bl	8005042 <SDIO_ReadFIFO>
 8004eca:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3301      	adds	r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3301      	adds	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	0e1b      	lsrs	r3, r3, #24
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	3301      	adds	r3, #1
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b07      	cmp	r3, #7
 8004f2c:	d9c8      	bls.n	8004ec0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004f3a:	bf00      	nop
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d043      	beq.n	8004fe4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e037      	b.n	8004fd2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	021a      	lsls	r2, r3, #8
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	041a      	lsls	r2, r3, #16
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	061a      	lsls	r2, r3, #24
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f107 0208 	add.w	r2, r7, #8
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f848 	bl	800505c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b07      	cmp	r3, #7
 8004fd6:	d9c4      	bls.n	8004f62 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004fec:	b084      	sub	sp, #16
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	f107 001c 	add.w	r0, r7, #28
 8004ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005002:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005004:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005006:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800500a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800500e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005012:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005016:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	b004      	add	sp, #16
 8005040:	4770      	bx	lr

08005042 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2203      	movs	r2, #3
 800508a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0303 	and.w	r3, r3, #3
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050d4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80050da:	431a      	orrs	r2, r3
                       Command->CPSM);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80050e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80050f0:	f023 030f 	bic.w	r3, r3, #15
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	b2db      	uxtb	r3, r3
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3314      	adds	r3, #20
 8005132:	461a      	mov	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4413      	add	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
}  
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005170:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005176:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800517c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005194:	2300      	movs	r3, #0

}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b088      	sub	sp, #32
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80051b0:	2310      	movs	r3, #16
 80051b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051b4:	2340      	movs	r3, #64	; 0x40
 80051b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051c2:	f107 0308 	add.w	r3, r7, #8
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff ff74 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80051ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d2:	2110      	movs	r1, #16
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f9d7 	bl	8005588 <SDMMC_GetCmdResp1>
 80051da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051dc:	69fb      	ldr	r3, [r7, #28]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b088      	sub	sp, #32
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80051f4:	2311      	movs	r3, #17
 80051f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051f8:	2340      	movs	r3, #64	; 0x40
 80051fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005204:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005206:	f107 0308 	add.w	r3, r7, #8
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff ff52 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005212:	f241 3288 	movw	r2, #5000	; 0x1388
 8005216:	2111      	movs	r1, #17
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f9b5 	bl	8005588 <SDMMC_GetCmdResp1>
 800521e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005220:	69fb      	ldr	r3, [r7, #28]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b088      	sub	sp, #32
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005238:	2312      	movs	r3, #18
 800523a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800523c:	2340      	movs	r3, #64	; 0x40
 800523e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005248:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800524a:	f107 0308 	add.w	r3, r7, #8
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ff30 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005256:	f241 3288 	movw	r2, #5000	; 0x1388
 800525a:	2112      	movs	r1, #18
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f993 	bl	8005588 <SDMMC_GetCmdResp1>
 8005262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005264:	69fb      	ldr	r3, [r7, #28]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b088      	sub	sp, #32
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800527c:	2318      	movs	r3, #24
 800527e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800528c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff ff0e 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800529a:	f241 3288 	movw	r2, #5000	; 0x1388
 800529e:	2118      	movs	r1, #24
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f971 	bl	8005588 <SDMMC_GetCmdResp1>
 80052a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052a8:	69fb      	ldr	r3, [r7, #28]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b088      	sub	sp, #32
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80052c0:	2319      	movs	r3, #25
 80052c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052c4:	2340      	movs	r3, #64	; 0x40
 80052c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052d2:	f107 0308 	add.w	r3, r7, #8
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff feec 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80052de:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e2:	2119      	movs	r1, #25
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f94f 	bl	8005588 <SDMMC_GetCmdResp1>
 80052ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ec:	69fb      	ldr	r3, [r7, #28]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005304:	230c      	movs	r3, #12
 8005306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005308:	2340      	movs	r3, #64	; 0x40
 800530a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005314:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff feca 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005322:	4a05      	ldr	r2, [pc, #20]	; (8005338 <SDMMC_CmdStopTransfer+0x40>)
 8005324:	210c      	movs	r1, #12
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f92e 	bl	8005588 <SDMMC_GetCmdResp1>
 800532c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800532e:	69fb      	ldr	r3, [r7, #28]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	05f5e100 	.word	0x05f5e100

0800533c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08a      	sub	sp, #40	; 0x28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800534c:	2307      	movs	r3, #7
 800534e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005350:	2340      	movs	r3, #64	; 0x40
 8005352:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800535c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800535e:	f107 0310 	add.w	r3, r7, #16
 8005362:	4619      	mov	r1, r3
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff fea6 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800536a:	f241 3288 	movw	r2, #5000	; 0x1388
 800536e:	2107      	movs	r1, #7
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f909 	bl	8005588 <SDMMC_GetCmdResp1>
 8005376:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800537a:	4618      	mov	r0, r3
 800537c:	3728      	adds	r7, #40	; 0x28
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b088      	sub	sp, #32
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800539a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800539e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053a0:	f107 0308 	add.w	r3, r7, #8
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fe85 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fb23 	bl	80059f8 <SDMMC_GetCmdError>
 80053b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053b4:	69fb      	ldr	r3, [r7, #28]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b088      	sub	sp, #32
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80053c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80053ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80053cc:	2308      	movs	r3, #8
 80053ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053d0:	2340      	movs	r3, #64	; 0x40
 80053d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053de:	f107 0308 	add.w	r3, r7, #8
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fe66 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fab6 	bl	800595c <SDMMC_GetCmdResp7>
 80053f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053f2:	69fb      	ldr	r3, [r7, #28]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800540a:	2337      	movs	r3, #55	; 0x37
 800540c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800540e:	2340      	movs	r3, #64	; 0x40
 8005410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800541a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800541c:	f107 0308 	add.w	r3, r7, #8
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fe47 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005428:	f241 3288 	movw	r2, #5000	; 0x1388
 800542c:	2137      	movs	r1, #55	; 0x37
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f8aa 	bl	8005588 <SDMMC_GetCmdResp1>
 8005434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005436:	69fb      	ldr	r3, [r7, #28]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005456:	2329      	movs	r3, #41	; 0x29
 8005458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800545a:	2340      	movs	r3, #64	; 0x40
 800545c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005466:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005468:	f107 0308 	add.w	r3, r7, #8
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fe21 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f9bd 	bl	80057f4 <SDMMC_GetCmdResp3>
 800547a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800547c:	69fb      	ldr	r3, [r7, #28]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b088      	sub	sp, #32
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005492:	2302      	movs	r3, #2
 8005494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005496:	23c0      	movs	r3, #192	; 0xc0
 8005498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800549e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054a4:	f107 0308 	add.w	r3, r7, #8
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff fe03 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f957 	bl	8005764 <SDMMC_GetCmdResp2>
 80054b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054b8:	69fb      	ldr	r3, [r7, #28]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b088      	sub	sp, #32
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80054d0:	2309      	movs	r3, #9
 80054d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80054d4:	23c0      	movs	r3, #192	; 0xc0
 80054d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054e2:	f107 0308 	add.w	r3, r7, #8
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff fde4 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f938 	bl	8005764 <SDMMC_GetCmdResp2>
 80054f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f6:	69fb      	ldr	r3, [r7, #28]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3720      	adds	r7, #32
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800550e:	2303      	movs	r3, #3
 8005510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005512:	2340      	movs	r3, #64	; 0x40
 8005514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800551a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800551e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005520:	f107 0308 	add.w	r3, r7, #8
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff fdc5 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	2103      	movs	r1, #3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f99d 	bl	8005870 <SDMMC_GetCmdResp6>
 8005536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005538:	69fb      	ldr	r3, [r7, #28]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b088      	sub	sp, #32
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005550:	230d      	movs	r3, #13
 8005552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005554:	2340      	movs	r3, #64	; 0x40
 8005556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800555c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005560:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fda4 	bl	80050b6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	210d      	movs	r1, #13
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f807 	bl	8005588 <SDMMC_GetCmdResp1>
 800557a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800557c:	69fb      	ldr	r3, [r7, #28]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	460b      	mov	r3, r1
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005596:	4b70      	ldr	r3, [pc, #448]	; (8005758 <SDMMC_GetCmdResp1+0x1d0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a70      	ldr	r2, [pc, #448]	; (800575c <SDMMC_GetCmdResp1+0x1d4>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	0a5a      	lsrs	r2, r3, #9
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
 80055a8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	1e5a      	subs	r2, r3, #1
 80055ae:	61fa      	str	r2, [r7, #28]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055b8:	e0c9      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0ef      	beq.n	80055aa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1ea      	bne.n	80055aa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2204      	movs	r2, #4
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055e6:	2304      	movs	r3, #4
 80055e8:	e0b1      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0a6      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	22c5      	movs	r2, #197	; 0xc5
 8005604:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff fd7f 	bl	800510a <SDIO_GetCommandResponse>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	7afb      	ldrb	r3, [r7, #11]
 8005612:	4293      	cmp	r3, r2
 8005614:	d001      	beq.n	800561a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005616:	2301      	movs	r3, #1
 8005618:	e099      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800561a:	2100      	movs	r1, #0
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7ff fd81 	bl	8005124 <SDIO_GetResponse>
 8005622:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4b4e      	ldr	r3, [pc, #312]	; (8005760 <SDMMC_GetCmdResp1+0x1d8>)
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800562e:	2300      	movs	r3, #0
 8005630:	e08d      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	da02      	bge.n	800563e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005638:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800563c:	e087      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005648:	2340      	movs	r3, #64	; 0x40
 800564a:	e080      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	e079      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005668:	e071      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005678:	e069      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005688:	e061      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005694:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005698:	e059      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056a8:	e051      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b8:	e049      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80056c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056c8:	e041      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80056d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d8:	e039      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80056e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056e8:	e031      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80056f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056f8:	e029      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005704:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005708:	e021      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005714:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005718:	e019      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005724:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005728:	e011      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005734:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005738:	e009      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005744:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005748:	e001      	b.n	800574e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800574a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	2000003c 	.word	0x2000003c
 800575c:	10624dd3 	.word	0x10624dd3
 8005760:	fdffe008 	.word	0xfdffe008

08005764 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800576c:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <SDMMC_GetCmdResp2+0x88>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <SDMMC_GetCmdResp2+0x8c>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	0a5b      	lsrs	r3, r3, #9
 8005778:	f241 3288 	movw	r2, #5000	; 0x1388
 800577c:	fb02 f303 	mul.w	r3, r2, r3
 8005780:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1e5a      	subs	r2, r3, #1
 8005786:	60fa      	str	r2, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800578c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005790:	e026      	b.n	80057e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005796:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0ef      	beq.n	8005782 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1ea      	bne.n	8005782 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2204      	movs	r2, #4
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057be:	2304      	movs	r3, #4
 80057c0:	e00e      	b.n	80057e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e003      	b.n	80057e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	22c5      	movs	r2, #197	; 0xc5
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	2000003c 	.word	0x2000003c
 80057f0:	10624dd3 	.word	0x10624dd3

080057f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057fc:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <SDMMC_GetCmdResp3+0x74>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1a      	ldr	r2, [pc, #104]	; (800586c <SDMMC_GetCmdResp3+0x78>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	0a5b      	lsrs	r3, r3, #9
 8005808:	f241 3288 	movw	r2, #5000	; 0x1388
 800580c:	fb02 f303 	mul.w	r3, r2, r3
 8005810:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	60fa      	str	r2, [r7, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d102      	bne.n	8005822 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800581c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005820:	e01b      	b.n	800585a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0ef      	beq.n	8005812 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ea      	bne.n	8005812 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2204      	movs	r2, #4
 800584c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800584e:	2304      	movs	r3, #4
 8005850:	e003      	b.n	800585a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	22c5      	movs	r2, #197	; 0xc5
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	2000003c 	.word	0x2000003c
 800586c:	10624dd3 	.word	0x10624dd3

08005870 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	460b      	mov	r3, r1
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800587e:	4b35      	ldr	r3, [pc, #212]	; (8005954 <SDMMC_GetCmdResp6+0xe4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a35      	ldr	r2, [pc, #212]	; (8005958 <SDMMC_GetCmdResp6+0xe8>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	0a5b      	lsrs	r3, r3, #9
 800588a:	f241 3288 	movw	r2, #5000	; 0x1388
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	1e5a      	subs	r2, r3, #1
 8005898:	61fa      	str	r2, [r7, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800589e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058a2:	e052      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ef      	beq.n	8005894 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1ea      	bne.n	8005894 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2204      	movs	r2, #4
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058d0:	2304      	movs	r3, #4
 80058d2:	e03a      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d004      	beq.n	80058ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e02f      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff fc0d 	bl	800510a <SDIO_GetCommandResponse>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	7afb      	ldrb	r3, [r7, #11]
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d001      	beq.n	80058fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e025      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	22c5      	movs	r2, #197	; 0xc5
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005904:	2100      	movs	r1, #0
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f7ff fc0c 	bl	8005124 <SDIO_GetResponse>
 800590c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d106      	bne.n	8005926 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	0c1b      	lsrs	r3, r3, #16
 800591c:	b29a      	uxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005922:	2300      	movs	r3, #0
 8005924:	e011      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005934:	e009      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005944:	e001      	b.n	800594a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	2000003c 	.word	0x2000003c
 8005958:	10624dd3 	.word	0x10624dd3

0800595c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005964:	4b22      	ldr	r3, [pc, #136]	; (80059f0 <SDMMC_GetCmdResp7+0x94>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a22      	ldr	r2, [pc, #136]	; (80059f4 <SDMMC_GetCmdResp7+0x98>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	0a5b      	lsrs	r3, r3, #9
 8005970:	f241 3288 	movw	r2, #5000	; 0x1388
 8005974:	fb02 f303 	mul.w	r3, r2, r3
 8005978:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1e5a      	subs	r2, r3, #1
 800597e:	60fa      	str	r2, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005988:	e02c      	b.n	80059e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0ef      	beq.n	800597a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1ea      	bne.n	800597a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2204      	movs	r2, #4
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059b6:	2304      	movs	r3, #4
 80059b8:	e014      	b.n	80059e4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e009      	b.n	80059e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2240      	movs	r2, #64	; 0x40
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80059e2:	2300      	movs	r3, #0
  
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	2000003c 	.word	0x2000003c
 80059f4:	10624dd3 	.word	0x10624dd3

080059f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a00:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <SDMMC_GetCmdError+0x50>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a11      	ldr	r2, [pc, #68]	; (8005a4c <SDMMC_GetCmdError+0x54>)
 8005a06:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0a:	0a5b      	lsrs	r3, r3, #9
 8005a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a10:	fb02 f303 	mul.w	r3, r2, r3
 8005a14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1e5a      	subs	r2, r3, #1
 8005a1a:	60fa      	str	r2, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a24:	e009      	b.n	8005a3a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f1      	beq.n	8005a16 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	22c5      	movs	r2, #197	; 0xc5
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	2000003c 	.word	0x2000003c
 8005a4c:	10624dd3 	.word	0x10624dd3

08005a50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005a54:	4904      	ldr	r1, [pc, #16]	; (8005a68 <MX_FATFS_Init+0x18>)
 8005a56:	4805      	ldr	r0, [pc, #20]	; (8005a6c <MX_FATFS_Init+0x1c>)
 8005a58:	f003 fbcc 	bl	80091f4 <FATFS_LinkDriver>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <MX_FATFS_Init+0x20>)
 8005a62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a64:	bf00      	nop
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	200018a0 	.word	0x200018a0
 8005a6c:	0800a488 	.word	0x0800a488
 8005a70:	2000189c 	.word	0x2000189c

08005a74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005a8e:	f000 f89e 	bl	8005bce <BSP_SD_IsDetected>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d001      	beq.n	8005a9c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e005      	b.n	8005aa8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005a9c:	4804      	ldr	r0, [pc, #16]	; (8005ab0 <BSP_SD_Init+0x2c>)
 8005a9e:	f7fe f869 	bl	8003b74 <HAL_SD_Init>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	200003a4 	.word	0x200003a4

08005ab4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	4806      	ldr	r0, [pc, #24]	; (8005aec <BSP_SD_ReadBlocks+0x38>)
 8005ad2:	f7fe f8ff 	bl	8003cd4 <HAL_SD_ReadBlocks>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	200003a4 	.word	0x200003a4

08005af0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	68f9      	ldr	r1, [r7, #12]
 8005b0c:	4806      	ldr	r0, [pc, #24]	; (8005b28 <BSP_SD_WriteBlocks+0x38>)
 8005b0e:	f7fe fac7 	bl	80040a0 <HAL_SD_WriteBlocks>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200003a4 	.word	0x200003a4

08005b2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005b30:	4805      	ldr	r0, [pc, #20]	; (8005b48 <BSP_SD_GetCardState+0x1c>)
 8005b32:	f7fe ffa3 	bl	8004a7c <HAL_SD_GetCardState>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	bf14      	ite	ne
 8005b3c:	2301      	movne	r3, #1
 8005b3e:	2300      	moveq	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200003a4 	.word	0x200003a4

08005b4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	4803      	ldr	r0, [pc, #12]	; (8005b64 <BSP_SD_GetCardInfo+0x18>)
 8005b58:	f7fe ff64 	bl	8004a24 <HAL_SD_GetCardInfo>
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	200003a4 	.word	0x200003a4

08005b68 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005b70:	f000 f818 	bl	8005ba4 <BSP_SD_AbortCallback>
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005b84:	f000 f815 	bl	8005bb2 <BSP_SD_WriteCpltCallback>
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005b98:	f000 f812 	bl	8005bc0 <BSP_SD_ReadCpltCallback>
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0

}
 8005ba8:	bf00      	nop
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	af00      	add	r7, sp, #0

}
 8005bb6:	bf00      	nop
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0

}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	b2db      	uxtb	r3, r3
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <SD_CheckStatus+0x38>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005bf8:	f7ff ff98 	bl	8005b2c <BSP_SD_GetCardState>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <SD_CheckStatus+0x38>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <SD_CheckStatus+0x38>)
 8005c10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005c12:	4b03      	ldr	r3, [pc, #12]	; (8005c20 <SD_CheckStatus+0x38>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	b2db      	uxtb	r3, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000045 	.word	0x20000045

08005c24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <SD_initialize+0x38>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005c34:	f7ff ff26 	bl	8005a84 <BSP_SD_Init>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ffd1 	bl	8005be8 <SD_CheckStatus>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <SD_initialize+0x38>)
 8005c4c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005c4e:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <SD_initialize+0x38>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	b2db      	uxtb	r3, r3
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000045 	.word	0x20000045

08005c60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff ffbb 	bl	8005be8 <SD_CheckStatus>
 8005c72:	4603      	mov	r3, r0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005c90:	f04f 33ff 	mov.w	r3, #4294967295
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	68b8      	ldr	r0, [r7, #8]
 8005c9a:	f7ff ff0b 	bl	8005ab4 <BSP_SD_ReadBlocks>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d107      	bne.n	8005cb4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005ca4:	bf00      	nop
 8005ca6:	f7ff ff41 	bl	8005b2c <BSP_SD_GetCardState>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1fa      	bne.n	8005ca6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b086      	sub	sp, #24
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4603      	mov	r3, r0
 8005ccc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	68b8      	ldr	r0, [r7, #8]
 8005cdc:	f7ff ff08 	bl	8005af0 <BSP_SD_WriteBlocks>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005ce6:	bf00      	nop
 8005ce8:	f7ff ff20 	bl	8005b2c <BSP_SD_GetCardState>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1fa      	bne.n	8005ce8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08c      	sub	sp, #48	; 0x30
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	4603      	mov	r3, r0
 8005d08:	603a      	str	r2, [r7, #0]
 8005d0a:	71fb      	strb	r3, [r7, #7]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005d16:	4b25      	ldr	r3, [pc, #148]	; (8005dac <SD_ioctl+0xac>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <SD_ioctl+0x28>
 8005d24:	2303      	movs	r3, #3
 8005d26:	e03c      	b.n	8005da2 <SD_ioctl+0xa2>

  switch (cmd)
 8005d28:	79bb      	ldrb	r3, [r7, #6]
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d834      	bhi.n	8005d98 <SD_ioctl+0x98>
 8005d2e:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <SD_ioctl+0x34>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d45 	.word	0x08005d45
 8005d38:	08005d4d 	.word	0x08005d4d
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d7f 	.word	0x08005d7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d4a:	e028      	b.n	8005d9e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d4c:	f107 030c 	add.w	r3, r7, #12
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fefb 	bl	8005b4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d62:	e01c      	b.n	8005d9e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff feef 	bl	8005b4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d7c:	e00f      	b.n	8005d9e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d7e:	f107 030c 	add.w	r3, r7, #12
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff fee2 	bl	8005b4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	0a5a      	lsrs	r2, r3, #9
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d96:	e002      	b.n	8005d9e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005d98:	2304      	movs	r3, #4
 8005d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3730      	adds	r7, #48	; 0x30
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000045 	.word	0x20000045

08005db0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	4a08      	ldr	r2, [pc, #32]	; (8005de0 <disk_status+0x30>)
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	79fa      	ldrb	r2, [r7, #7]
 8005dc8:	4905      	ldr	r1, [pc, #20]	; (8005de0 <disk_status+0x30>)
 8005dca:	440a      	add	r2, r1
 8005dcc:	7a12      	ldrb	r2, [r2, #8]
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4798      	blx	r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20001acc 	.word	0x20001acc

08005de4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	4a0e      	ldr	r2, [pc, #56]	; (8005e30 <disk_initialize+0x4c>)
 8005df6:	5cd3      	ldrb	r3, [r2, r3]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d114      	bne.n	8005e26 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	4a0c      	ldr	r2, [pc, #48]	; (8005e30 <disk_initialize+0x4c>)
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	79fa      	ldrb	r2, [r7, #7]
 8005e0a:	4909      	ldr	r1, [pc, #36]	; (8005e30 <disk_initialize+0x4c>)
 8005e0c:	440a      	add	r2, r1
 8005e0e:	7a12      	ldrb	r2, [r2, #8]
 8005e10:	4610      	mov	r0, r2
 8005e12:	4798      	blx	r3
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d103      	bne.n	8005e26 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	4a03      	ldr	r2, [pc, #12]	; (8005e30 <disk_initialize+0x4c>)
 8005e22:	2101      	movs	r1, #1
 8005e24:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20001acc 	.word	0x20001acc

08005e34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <disk_read+0x3c>)
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	689c      	ldr	r4, [r3, #8]
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	4a07      	ldr	r2, [pc, #28]	; (8005e70 <disk_read+0x3c>)
 8005e54:	4413      	add	r3, r2
 8005e56:	7a18      	ldrb	r0, [r3, #8]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	47a0      	blx	r4
 8005e60:	4603      	mov	r3, r0
 8005e62:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd90      	pop	{r4, r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20001acc 	.word	0x20001acc

08005e74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	4603      	mov	r3, r0
 8005e82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	4a0a      	ldr	r2, [pc, #40]	; (8005eb0 <disk_write+0x3c>)
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68dc      	ldr	r4, [r3, #12]
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	4a07      	ldr	r2, [pc, #28]	; (8005eb0 <disk_write+0x3c>)
 8005e94:	4413      	add	r3, r2
 8005e96:	7a18      	ldrb	r0, [r3, #8]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	47a0      	blx	r4
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd90      	pop	{r4, r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20001acc 	.word	0x20001acc

08005eb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	603a      	str	r2, [r7, #0]
 8005ebe:	71fb      	strb	r3, [r7, #7]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	4a09      	ldr	r2, [pc, #36]	; (8005eec <disk_ioctl+0x38>)
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	79fa      	ldrb	r2, [r7, #7]
 8005ed2:	4906      	ldr	r1, [pc, #24]	; (8005eec <disk_ioctl+0x38>)
 8005ed4:	440a      	add	r2, r1
 8005ed6:	7a10      	ldrb	r0, [r2, #8]
 8005ed8:	79b9      	ldrb	r1, [r7, #6]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	4798      	blx	r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]
  return res;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20001acc 	.word	0x20001acc

08005ef0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3301      	adds	r3, #1
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005f00:	89fb      	ldrh	r3, [r7, #14]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	b21a      	sxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	b21b      	sxth	r3, r3
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	b21b      	sxth	r3, r3
 8005f10:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005f12:	89fb      	ldrh	r3, [r7, #14]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3303      	adds	r3, #3
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	3202      	adds	r2, #2
 8005f38:	7812      	ldrb	r2, [r2, #0]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	3201      	adds	r2, #1
 8005f46:	7812      	ldrb	r2, [r2, #0]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	7812      	ldrb	r2, [r2, #0]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
	return rv;
 8005f58:	68fb      	ldr	r3, [r7, #12]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	887a      	ldrh	r2, [r7, #2]
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	887b      	ldrh	r3, [r7, #2]
 8005f80:	0a1b      	lsrs	r3, r3, #8
 8005f82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	887a      	ldrh	r2, [r7, #2]
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	0a1b      	lsrs	r3, r3, #8
 8005fda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00d      	beq.n	800602a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	1c53      	adds	r3, r2, #1
 8006012:	613b      	str	r3, [r7, #16]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	1c59      	adds	r1, r3, #1
 8006018:	6179      	str	r1, [r7, #20]
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3b01      	subs	r3, #1
 8006022:	607b      	str	r3, [r7, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f1      	bne.n	800600e <mem_cpy+0x1a>
	}
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006036:	b480      	push	{r7}
 8006038:	b087      	sub	sp, #28
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	617a      	str	r2, [r7, #20]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3b01      	subs	r3, #1
 8006056:	607b      	str	r3, [r7, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1f3      	bne.n	8006046 <mem_set+0x10>
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	; 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	61fa      	str	r2, [r7, #28]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	4619      	mov	r1, r3
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	61ba      	str	r2, [r7, #24]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	1acb      	subs	r3, r1, r3
 8006098:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3b01      	subs	r3, #1
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <mem_cmp+0x40>
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0eb      	beq.n	8006084 <mem_cmp+0x18>

	return r;
 80060ac:	697b      	ldr	r3, [r7, #20]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3724      	adds	r7, #36	; 0x24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80060c4:	e002      	b.n	80060cc <chk_chr+0x12>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3301      	adds	r3, #1
 80060ca:	607b      	str	r3, [r7, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <chk_chr+0x26>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	4293      	cmp	r3, r2
 80060de:	d1f2      	bne.n	80060c6 <chk_chr+0xc>
	return *str;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	781b      	ldrb	r3, [r3, #0]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80060fa:	2300      	movs	r3, #0
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	e029      	b.n	8006158 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006104:	4a27      	ldr	r2, [pc, #156]	; (80061a4 <chk_lock+0xb4>)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	4413      	add	r3, r2
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01d      	beq.n	800614e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006112:	4a24      	ldr	r2, [pc, #144]	; (80061a4 <chk_lock+0xb4>)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	4413      	add	r3, r2
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	429a      	cmp	r2, r3
 8006122:	d116      	bne.n	8006152 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006124:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <chk_lock+0xb4>)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	4413      	add	r3, r2
 800612c:	3304      	adds	r3, #4
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006134:	429a      	cmp	r2, r3
 8006136:	d10c      	bne.n	8006152 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006138:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <chk_lock+0xb4>)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	4413      	add	r3, r2
 8006140:	3308      	adds	r3, #8
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006148:	429a      	cmp	r2, r3
 800614a:	d102      	bne.n	8006152 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800614c:	e007      	b.n	800615e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800614e:	2301      	movs	r3, #1
 8006150:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d9d2      	bls.n	8006104 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d109      	bne.n	8006178 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d102      	bne.n	8006170 <chk_lock+0x80>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d101      	bne.n	8006174 <chk_lock+0x84>
 8006170:	2300      	movs	r3, #0
 8006172:	e010      	b.n	8006196 <chk_lock+0xa6>
 8006174:	2312      	movs	r3, #18
 8006176:	e00e      	b.n	8006196 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d108      	bne.n	8006190 <chk_lock+0xa0>
 800617e:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <chk_lock+0xb4>)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	4413      	add	r3, r2
 8006186:	330c      	adds	r3, #12
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800618e:	d101      	bne.n	8006194 <chk_lock+0xa4>
 8006190:	2310      	movs	r3, #16
 8006192:	e000      	b.n	8006196 <chk_lock+0xa6>
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	200018ac 	.word	0x200018ac

080061a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061ae:	2300      	movs	r3, #0
 80061b0:	607b      	str	r3, [r7, #4]
 80061b2:	e002      	b.n	80061ba <enq_lock+0x12>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3301      	adds	r3, #1
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d806      	bhi.n	80061ce <enq_lock+0x26>
 80061c0:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <enq_lock+0x40>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	4413      	add	r3, r2
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f2      	bne.n	80061b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
}
 80061da:	4618      	mov	r0, r3
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	200018ac 	.word	0x200018ac

080061ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	e01f      	b.n	800623c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80061fc:	4a41      	ldr	r2, [pc, #260]	; (8006304 <inc_lock+0x118>)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	4413      	add	r3, r2
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d113      	bne.n	8006236 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800620e:	4a3d      	ldr	r2, [pc, #244]	; (8006304 <inc_lock+0x118>)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	4413      	add	r3, r2
 8006216:	3304      	adds	r3, #4
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800621e:	429a      	cmp	r2, r3
 8006220:	d109      	bne.n	8006236 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006222:	4a38      	ldr	r2, [pc, #224]	; (8006304 <inc_lock+0x118>)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	4413      	add	r3, r2
 800622a:	3308      	adds	r3, #8
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006232:	429a      	cmp	r2, r3
 8006234:	d006      	beq.n	8006244 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d9dc      	bls.n	80061fc <inc_lock+0x10>
 8006242:	e000      	b.n	8006246 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006244:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d132      	bne.n	80062b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e002      	b.n	8006258 <inc_lock+0x6c>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3301      	adds	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d806      	bhi.n	800626c <inc_lock+0x80>
 800625e:	4a29      	ldr	r2, [pc, #164]	; (8006304 <inc_lock+0x118>)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	4413      	add	r3, r2
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1f2      	bne.n	8006252 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d101      	bne.n	8006276 <inc_lock+0x8a>
 8006272:	2300      	movs	r3, #0
 8006274:	e040      	b.n	80062f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4922      	ldr	r1, [pc, #136]	; (8006304 <inc_lock+0x118>)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	440b      	add	r3, r1
 8006282:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	491e      	ldr	r1, [pc, #120]	; (8006304 <inc_lock+0x118>)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	440b      	add	r3, r1
 8006290:	3304      	adds	r3, #4
 8006292:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	491a      	ldr	r1, [pc, #104]	; (8006304 <inc_lock+0x118>)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	440b      	add	r3, r1
 80062a0:	3308      	adds	r3, #8
 80062a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80062a4:	4a17      	ldr	r2, [pc, #92]	; (8006304 <inc_lock+0x118>)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	4413      	add	r3, r2
 80062ac:	330c      	adds	r3, #12
 80062ae:	2200      	movs	r2, #0
 80062b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <inc_lock+0xe0>
 80062b8:	4a12      	ldr	r2, [pc, #72]	; (8006304 <inc_lock+0x118>)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	4413      	add	r3, r2
 80062c0:	330c      	adds	r3, #12
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <inc_lock+0xe0>
 80062c8:	2300      	movs	r3, #0
 80062ca:	e015      	b.n	80062f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d108      	bne.n	80062e4 <inc_lock+0xf8>
 80062d2:	4a0c      	ldr	r2, [pc, #48]	; (8006304 <inc_lock+0x118>)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	4413      	add	r3, r2
 80062da:	330c      	adds	r3, #12
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	3301      	adds	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	e001      	b.n	80062e8 <inc_lock+0xfc>
 80062e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062e8:	4906      	ldr	r1, [pc, #24]	; (8006304 <inc_lock+0x118>)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	440b      	add	r3, r1
 80062f0:	330c      	adds	r3, #12
 80062f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3301      	adds	r3, #1
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	200018ac 	.word	0x200018ac

08006308 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3b01      	subs	r3, #1
 8006314:	607b      	str	r3, [r7, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d825      	bhi.n	8006368 <dec_lock+0x60>
		n = Files[i].ctr;
 800631c:	4a17      	ldr	r2, [pc, #92]	; (800637c <dec_lock+0x74>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	4413      	add	r3, r2
 8006324:	330c      	adds	r3, #12
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800632a:	89fb      	ldrh	r3, [r7, #14]
 800632c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006330:	d101      	bne.n	8006336 <dec_lock+0x2e>
 8006332:	2300      	movs	r3, #0
 8006334:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006336:	89fb      	ldrh	r3, [r7, #14]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <dec_lock+0x3a>
 800633c:	89fb      	ldrh	r3, [r7, #14]
 800633e:	3b01      	subs	r3, #1
 8006340:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006342:	4a0e      	ldr	r2, [pc, #56]	; (800637c <dec_lock+0x74>)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	4413      	add	r3, r2
 800634a:	330c      	adds	r3, #12
 800634c:	89fa      	ldrh	r2, [r7, #14]
 800634e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006350:	89fb      	ldrh	r3, [r7, #14]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d105      	bne.n	8006362 <dec_lock+0x5a>
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <dec_lock+0x74>)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	4413      	add	r3, r2
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	737b      	strb	r3, [r7, #13]
 8006366:	e001      	b.n	800636c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006368:	2302      	movs	r3, #2
 800636a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800636c:	7b7b      	ldrb	r3, [r7, #13]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	200018ac 	.word	0x200018ac

08006380 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	e010      	b.n	80063b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800638e:	4a0d      	ldr	r2, [pc, #52]	; (80063c4 <clear_lock+0x44>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	4413      	add	r3, r2
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d105      	bne.n	80063aa <clear_lock+0x2a>
 800639e:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <clear_lock+0x44>)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	4413      	add	r3, r2
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3301      	adds	r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d9eb      	bls.n	800638e <clear_lock+0xe>
	}
}
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	200018ac 	.word	0x200018ac

080063c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	78db      	ldrb	r3, [r3, #3]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d034      	beq.n	8006446 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	7858      	ldrb	r0, [r3, #1]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80063ec:	2301      	movs	r3, #1
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	f7ff fd40 	bl	8005e74 <disk_write>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <sync_window+0x38>
			res = FR_DISK_ERR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	73fb      	strb	r3, [r7, #15]
 80063fe:	e022      	b.n	8006446 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	1ad2      	subs	r2, r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	429a      	cmp	r2, r3
 8006414:	d217      	bcs.n	8006446 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	789b      	ldrb	r3, [r3, #2]
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	e010      	b.n	8006440 <sync_window+0x78>
					wsect += fs->fsize;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	7858      	ldrb	r0, [r3, #1]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006432:	2301      	movs	r3, #1
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	f7ff fd1d 	bl	8005e74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3b01      	subs	r3, #1
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d8eb      	bhi.n	800641e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d01b      	beq.n	80064a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff ffad 	bl	80063c8 <sync_window>
 800646e:	4603      	mov	r3, r0
 8006470:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d113      	bne.n	80064a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	7858      	ldrb	r0, [r3, #1]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006482:	2301      	movs	r3, #1
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	f7ff fcd5 	bl	8005e34 <disk_read>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006490:	f04f 33ff 	mov.w	r3, #4294967295
 8006494:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006496:	2301      	movs	r3, #1
 8006498:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff ff87 	bl	80063c8 <sync_window>
 80064ba:	4603      	mov	r3, r0
 80064bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d158      	bne.n	8006576 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d148      	bne.n	800655e <sync_fs+0xb2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	791b      	ldrb	r3, [r3, #4]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d144      	bne.n	800655e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3334      	adds	r3, #52	; 0x34
 80064d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff fda9 	bl	8006036 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3334      	adds	r3, #52	; 0x34
 80064e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064ec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fd38 	bl	8005f66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3334      	adds	r3, #52	; 0x34
 80064fa:	4921      	ldr	r1, [pc, #132]	; (8006580 <sync_fs+0xd4>)
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff fd4d 	bl	8005f9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3334      	adds	r3, #52	; 0x34
 8006506:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800650a:	491e      	ldr	r1, [pc, #120]	; (8006584 <sync_fs+0xd8>)
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fd45 	bl	8005f9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3334      	adds	r3, #52	; 0x34
 8006516:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f7ff fd3b 	bl	8005f9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3334      	adds	r3, #52	; 0x34
 800652a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f7ff fd31 	bl	8005f9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	7858      	ldrb	r0, [r3, #1]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006552:	2301      	movs	r3, #1
 8006554:	f7ff fc8e 	bl	8005e74 <disk_write>
			fs->fsi_flag = 0;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	785b      	ldrb	r3, [r3, #1]
 8006562:	2200      	movs	r2, #0
 8006564:	2100      	movs	r1, #0
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fca4 	bl	8005eb4 <disk_ioctl>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <sync_fs+0xca>
 8006572:	2301      	movs	r3, #1
 8006574:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	41615252 	.word	0x41615252
 8006584:	61417272 	.word	0x61417272

08006588 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	3b02      	subs	r3, #2
 8006596:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	3b02      	subs	r3, #2
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d301      	bcc.n	80065a8 <clust2sect+0x20>
 80065a4:	2300      	movs	r3, #0
 80065a6:	e008      	b.n	80065ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	895b      	ldrh	r3, [r3, #10]
 80065ac:	461a      	mov	r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	fb03 f202 	mul.w	r2, r3, r2
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4413      	add	r3, r2
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d904      	bls.n	80065e6 <get_fat+0x20>
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <get_fat+0x26>
		val = 1;	/* Internal error */
 80065e6:	2301      	movs	r3, #1
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	e08f      	b.n	800670c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80065ec:	f04f 33ff 	mov.w	r3, #4294967295
 80065f0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d062      	beq.n	80066c0 <get_fat+0xfa>
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	dc7c      	bgt.n	80066f8 <get_fat+0x132>
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d002      	beq.n	8006608 <get_fat+0x42>
 8006602:	2b02      	cmp	r3, #2
 8006604:	d042      	beq.n	800668c <get_fat+0xc6>
 8006606:	e077      	b.n	80066f8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	0a5b      	lsrs	r3, r3, #9
 800661e:	4413      	add	r3, r2
 8006620:	4619      	mov	r1, r3
 8006622:	6938      	ldr	r0, [r7, #16]
 8006624:	f7ff ff14 	bl	8006450 <move_window>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d167      	bne.n	80066fe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	60fa      	str	r2, [r7, #12]
 8006634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4413      	add	r3, r2
 800663c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006640:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	0a5b      	lsrs	r3, r3, #9
 800664a:	4413      	add	r3, r2
 800664c:	4619      	mov	r1, r3
 800664e:	6938      	ldr	r0, [r7, #16]
 8006650:	f7ff fefe 	bl	8006450 <move_window>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d153      	bne.n	8006702 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	461a      	mov	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4313      	orrs	r3, r2
 8006670:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <get_fat+0xbc>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	091b      	lsrs	r3, r3, #4
 8006680:	e002      	b.n	8006688 <get_fat+0xc2>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006688:	617b      	str	r3, [r7, #20]
			break;
 800668a:	e03f      	b.n	800670c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	4413      	add	r3, r2
 8006696:	4619      	mov	r1, r3
 8006698:	6938      	ldr	r0, [r7, #16]
 800669a:	f7ff fed9 	bl	8006450 <move_window>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d130      	bne.n	8006706 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80066b2:	4413      	add	r3, r2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff fc1b 	bl	8005ef0 <ld_word>
 80066ba:	4603      	mov	r3, r0
 80066bc:	617b      	str	r3, [r7, #20]
			break;
 80066be:	e025      	b.n	800670c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	09db      	lsrs	r3, r3, #7
 80066c8:	4413      	add	r3, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	6938      	ldr	r0, [r7, #16]
 80066ce:	f7ff febf 	bl	8006450 <move_window>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d118      	bne.n	800670a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80066e6:	4413      	add	r3, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff fc19 	bl	8005f20 <ld_dword>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066f4:	617b      	str	r3, [r7, #20]
			break;
 80066f6:	e009      	b.n	800670c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80066f8:	2301      	movs	r3, #1
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e006      	b.n	800670c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066fe:	bf00      	nop
 8006700:	e004      	b.n	800670c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800670a:	bf00      	nop
		}
	}

	return val;
 800670c:	697b      	ldr	r3, [r7, #20]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006716:	b590      	push	{r4, r7, lr}
 8006718:	b089      	sub	sp, #36	; 0x24
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006722:	2302      	movs	r3, #2
 8006724:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b01      	cmp	r3, #1
 800672a:	f240 80d9 	bls.w	80068e0 <put_fat+0x1ca>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	429a      	cmp	r2, r3
 8006736:	f080 80d3 	bcs.w	80068e0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b03      	cmp	r3, #3
 8006740:	f000 8096 	beq.w	8006870 <put_fat+0x15a>
 8006744:	2b03      	cmp	r3, #3
 8006746:	f300 80cb 	bgt.w	80068e0 <put_fat+0x1ca>
 800674a:	2b01      	cmp	r3, #1
 800674c:	d002      	beq.n	8006754 <put_fat+0x3e>
 800674e:	2b02      	cmp	r3, #2
 8006750:	d06e      	beq.n	8006830 <put_fat+0x11a>
 8006752:	e0c5      	b.n	80068e0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	085b      	lsrs	r3, r3, #1
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	4413      	add	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	0a5b      	lsrs	r3, r3, #9
 800676a:	4413      	add	r3, r2
 800676c:	4619      	mov	r1, r3
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff fe6e 	bl	8006450 <move_window>
 8006774:	4603      	mov	r3, r0
 8006776:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006778:	7ffb      	ldrb	r3, [r7, #31]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f040 80a9 	bne.w	80068d2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	1c59      	adds	r1, r3, #1
 800678a:	61b9      	str	r1, [r7, #24]
 800678c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006790:	4413      	add	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00d      	beq.n	80067ba <put_fat+0xa4>
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	b25b      	sxtb	r3, r3
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	b25a      	sxtb	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b25b      	sxtb	r3, r3
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	e001      	b.n	80067be <put_fat+0xa8>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	0a5b      	lsrs	r3, r3, #9
 80067d0:	4413      	add	r3, r2
 80067d2:	4619      	mov	r1, r3
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff fe3b 	bl	8006450 <move_window>
 80067da:	4603      	mov	r3, r0
 80067dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067de:	7ffb      	ldrb	r3, [r7, #31]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d178      	bne.n	80068d6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f0:	4413      	add	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <put_fat+0xf0>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	b2db      	uxtb	r3, r3
 8006804:	e00e      	b.n	8006824 <put_fat+0x10e>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	b25b      	sxtb	r3, r3
 800680c:	f023 030f 	bic.w	r3, r3, #15
 8006810:	b25a      	sxtb	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0a1b      	lsrs	r3, r3, #8
 8006816:	b25b      	sxtb	r3, r3
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	b25b      	sxtb	r3, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	b25b      	sxtb	r3, r3
 8006822:	b2db      	uxtb	r3, r3
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	70da      	strb	r2, [r3, #3]
			break;
 800682e:	e057      	b.n	80068e0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	0a1b      	lsrs	r3, r3, #8
 8006838:	4413      	add	r3, r2
 800683a:	4619      	mov	r1, r3
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff fe07 	bl	8006450 <move_window>
 8006842:	4603      	mov	r3, r0
 8006844:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006846:	7ffb      	ldrb	r3, [r7, #31]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d146      	bne.n	80068da <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800685a:	4413      	add	r3, r2
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	b292      	uxth	r2, r2
 8006860:	4611      	mov	r1, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fb7f 	bl	8005f66 <st_word>
			fs->wflag = 1;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	70da      	strb	r2, [r3, #3]
			break;
 800686e:	e037      	b.n	80068e0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	09db      	lsrs	r3, r3, #7
 8006878:	4413      	add	r3, r2
 800687a:	4619      	mov	r1, r3
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7ff fde7 	bl	8006450 <move_window>
 8006882:	4603      	mov	r3, r0
 8006884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006886:	7ffb      	ldrb	r3, [r7, #31]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d128      	bne.n	80068de <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80068a0:	4413      	add	r3, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff fb3c 	bl	8005f20 <ld_dword>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80068ae:	4323      	orrs	r3, r4
 80068b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80068c0:	4413      	add	r3, r2
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fb69 	bl	8005f9c <st_dword>
			fs->wflag = 1;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	70da      	strb	r2, [r3, #3]
			break;
 80068d0:	e006      	b.n	80068e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80068d2:	bf00      	nop
 80068d4:	e004      	b.n	80068e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80068d6:	bf00      	nop
 80068d8:	e002      	b.n	80068e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80068da:	bf00      	nop
 80068dc:	e000      	b.n	80068e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80068de:	bf00      	nop
		}
	}
	return res;
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3724      	adds	r7, #36	; 0x24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd90      	pop	{r4, r7, pc}

080068ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b088      	sub	sp, #32
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d904      	bls.n	8006910 <remove_chain+0x26>
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	429a      	cmp	r2, r3
 800690e:	d301      	bcc.n	8006914 <remove_chain+0x2a>
 8006910:	2302      	movs	r3, #2
 8006912:	e04b      	b.n	80069ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00c      	beq.n	8006934 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800691a:	f04f 32ff 	mov.w	r2, #4294967295
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	69b8      	ldr	r0, [r7, #24]
 8006922:	f7ff fef8 	bl	8006716 <put_fat>
 8006926:	4603      	mov	r3, r0
 8006928:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800692a:	7ffb      	ldrb	r3, [r7, #31]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <remove_chain+0x4a>
 8006930:	7ffb      	ldrb	r3, [r7, #31]
 8006932:	e03b      	b.n	80069ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff fe45 	bl	80065c6 <get_fat>
 800693c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d031      	beq.n	80069a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <remove_chain+0x64>
 800694a:	2302      	movs	r3, #2
 800694c:	e02e      	b.n	80069ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006954:	d101      	bne.n	800695a <remove_chain+0x70>
 8006956:	2301      	movs	r3, #1
 8006958:	e028      	b.n	80069ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800695a:	2200      	movs	r2, #0
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	69b8      	ldr	r0, [r7, #24]
 8006960:	f7ff fed9 	bl	8006716 <put_fat>
 8006964:	4603      	mov	r3, r0
 8006966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006968:	7ffb      	ldrb	r3, [r7, #31]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <remove_chain+0x88>
 800696e:	7ffb      	ldrb	r3, [r7, #31]
 8006970:	e01c      	b.n	80069ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	3b02      	subs	r3, #2
 800697c:	429a      	cmp	r2, r3
 800697e:	d20b      	bcs.n	8006998 <remove_chain+0xae>
			fs->free_clst++;
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	791b      	ldrb	r3, [r3, #4]
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	b2da      	uxtb	r2, r3
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d3c6      	bcc.n	8006934 <remove_chain+0x4a>
 80069a6:	e000      	b.n	80069aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80069a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3720      	adds	r7, #32
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10d      	bne.n	80069e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d004      	beq.n	80069e0 <create_chain+0x2c>
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d31b      	bcc.n	8006a18 <create_chain+0x64>
 80069e0:	2301      	movs	r3, #1
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	e018      	b.n	8006a18 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff fdec 	bl	80065c6 <get_fat>
 80069ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d801      	bhi.n	80069fa <create_chain+0x46>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e070      	b.n	8006adc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a00:	d101      	bne.n	8006a06 <create_chain+0x52>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	e06a      	b.n	8006adc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d201      	bcs.n	8006a14 <create_chain+0x60>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	e063      	b.n	8006adc <create_chain+0x128>
		scl = clst;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d307      	bcc.n	8006a3c <create_chain+0x88>
				ncl = 2;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d901      	bls.n	8006a3c <create_chain+0x88>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e04f      	b.n	8006adc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006a3c:	69f9      	ldr	r1, [r7, #28]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fdc1 	bl	80065c6 <get_fat>
 8006a44:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00e      	beq.n	8006a6a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d003      	beq.n	8006a5a <create_chain+0xa6>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d101      	bne.n	8006a5e <create_chain+0xaa>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	e03e      	b.n	8006adc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d1da      	bne.n	8006a1c <create_chain+0x68>
 8006a66:	2300      	movs	r3, #0
 8006a68:	e038      	b.n	8006adc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006a6a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a70:	69f9      	ldr	r1, [r7, #28]
 8006a72:	6938      	ldr	r0, [r7, #16]
 8006a74:	f7ff fe4f 	bl	8006716 <put_fat>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d109      	bne.n	8006a96 <create_chain+0xe2>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d006      	beq.n	8006a96 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6938      	ldr	r0, [r7, #16]
 8006a8e:	f7ff fe42 	bl	8006716 <put_fat>
 8006a92:	4603      	mov	r3, r0
 8006a94:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d116      	bne.n	8006aca <create_chain+0x116>
		fs->last_clst = ncl;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	69fa      	ldr	r2, [r7, #28]
 8006aa0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	695a      	ldr	r2, [r3, #20]
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	3b02      	subs	r3, #2
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d804      	bhi.n	8006aba <create_chain+0x106>
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	1e5a      	subs	r2, r3, #1
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	711a      	strb	r2, [r3, #4]
 8006ac8:	e007      	b.n	8006ada <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d102      	bne.n	8006ad6 <create_chain+0x122>
 8006ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad4:	e000      	b.n	8006ad8 <create_chain+0x124>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ada:	69fb      	ldr	r3, [r7, #28]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	3304      	adds	r3, #4
 8006afa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	0a5b      	lsrs	r3, r3, #9
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	8952      	ldrh	r2, [r2, #10]
 8006b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1d1a      	adds	r2, r3, #4
 8006b0e:	613a      	str	r2, [r7, #16]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <clmt_clust+0x3a>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e010      	b.n	8006b40 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d307      	bcc.n	8006b36 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	3304      	adds	r3, #4
 8006b32:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b34:	e7e9      	b.n	8006b0a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006b36:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	4413      	add	r3, r2
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b62:	d204      	bcs.n	8006b6e <dir_sdi+0x22>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e063      	b.n	8006c3a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d106      	bne.n	8006b92 <dir_sdi+0x46>
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d902      	bls.n	8006b92 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10c      	bne.n	8006bb2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	8912      	ldrh	r2, [r2, #8]
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d301      	bcc.n	8006ba8 <dir_sdi+0x5c>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e048      	b.n	8006c3a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	61da      	str	r2, [r3, #28]
 8006bb0:	e029      	b.n	8006c06 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	895b      	ldrh	r3, [r3, #10]
 8006bb6:	025b      	lsls	r3, r3, #9
 8006bb8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006bba:	e019      	b.n	8006bf0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6979      	ldr	r1, [r7, #20]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff fd00 	bl	80065c6 <get_fat>
 8006bc6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d101      	bne.n	8006bd4 <dir_sdi+0x88>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e032      	b.n	8006c3a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d904      	bls.n	8006be4 <dir_sdi+0x98>
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d301      	bcc.n	8006be8 <dir_sdi+0x9c>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e028      	b.n	8006c3a <dir_sdi+0xee>
			ofs -= csz;
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d2e1      	bcs.n	8006bbc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006bf8:	6979      	ldr	r1, [r7, #20]
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f7ff fcc4 	bl	8006588 <clust2sect>
 8006c00:	4602      	mov	r2, r0
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <dir_sdi+0xcc>
 8006c14:	2302      	movs	r3, #2
 8006c16:	e010      	b.n	8006c3a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	0a5b      	lsrs	r3, r3, #9
 8006c20:	441a      	add	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c32:	441a      	add	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	3320      	adds	r3, #32
 8006c58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <dir_next+0x28>
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c68:	d301      	bcc.n	8006c6e <dir_next+0x2c>
 8006c6a:	2304      	movs	r3, #4
 8006c6c:	e0aa      	b.n	8006dc4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f040 8098 	bne.w	8006daa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10b      	bne.n	8006ca4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	8912      	ldrh	r2, [r2, #8]
 8006c94:	4293      	cmp	r3, r2
 8006c96:	f0c0 8088 	bcc.w	8006daa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	61da      	str	r2, [r3, #28]
 8006ca0:	2304      	movs	r3, #4
 8006ca2:	e08f      	b.n	8006dc4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	0a5b      	lsrs	r3, r3, #9
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	8952      	ldrh	r2, [r2, #10]
 8006cac:	3a01      	subs	r2, #1
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d17a      	bne.n	8006daa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	f7ff fc82 	bl	80065c6 <get_fat>
 8006cc2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d801      	bhi.n	8006cce <dir_next+0x8c>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e07a      	b.n	8006dc4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd4:	d101      	bne.n	8006cda <dir_next+0x98>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e074      	b.n	8006dc4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d358      	bcc.n	8006d96 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	61da      	str	r2, [r3, #28]
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	e067      	b.n	8006dc4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	f7ff fe59 	bl	80069b4 <create_chain>
 8006d02:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <dir_next+0xcc>
 8006d0a:	2307      	movs	r3, #7
 8006d0c:	e05a      	b.n	8006dc4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <dir_next+0xd6>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e055      	b.n	8006dc4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d101      	bne.n	8006d24 <dir_next+0xe2>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e04f      	b.n	8006dc4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fb4f 	bl	80063c8 <sync_window>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <dir_next+0xf2>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e047      	b.n	8006dc4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3334      	adds	r3, #52	; 0x34
 8006d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff f979 	bl	8006036 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d44:	2300      	movs	r3, #0
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	6979      	ldr	r1, [r7, #20]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff fc1c 	bl	8006588 <clust2sect>
 8006d50:	4602      	mov	r2, r0
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30
 8006d56:	e012      	b.n	8006d7e <dir_next+0x13c>
						fs->wflag = 1;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f7ff fb32 	bl	80063c8 <sync_window>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <dir_next+0x12c>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e02a      	b.n	8006dc4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3301      	adds	r3, #1
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	895b      	ldrh	r3, [r3, #10]
 8006d82:	461a      	mov	r2, r3
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d3e6      	bcc.n	8006d58 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad2      	subs	r2, r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006d9c:	6979      	ldr	r1, [r7, #20]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f7ff fbf2 	bl	8006588 <clust2sect>
 8006da4:	4602      	mov	r2, r0
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dbc:	441a      	add	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006ddc:	2100      	movs	r1, #0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff feb4 	bl	8006b4c <dir_sdi>
 8006de4:	4603      	mov	r3, r0
 8006de6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d12b      	bne.n	8006e46 <dir_alloc+0x7a>
		n = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	4619      	mov	r1, r3
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7ff fb29 	bl	8006450 <move_window>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d11d      	bne.n	8006e44 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2be5      	cmp	r3, #229	; 0xe5
 8006e10:	d004      	beq.n	8006e1c <dir_alloc+0x50>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d107      	bne.n	8006e2c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d102      	bne.n	8006e30 <dir_alloc+0x64>
 8006e2a:	e00c      	b.n	8006e46 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006e30:	2101      	movs	r1, #1
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff ff05 	bl	8006c42 <dir_next>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0d7      	beq.n	8006df2 <dir_alloc+0x26>
 8006e42:	e000      	b.n	8006e46 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006e44:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d101      	bne.n	8006e50 <dir_alloc+0x84>
 8006e4c:	2307      	movs	r3, #7
 8006e4e:	75fb      	strb	r3, [r7, #23]
	return res;
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	331a      	adds	r3, #26
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff f841 	bl	8005ef0 <ld_word>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d109      	bne.n	8006e8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	3314      	adds	r3, #20
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff f836 	bl	8005ef0 <ld_word>
 8006e84:	4603      	mov	r3, r0
 8006e86:	041b      	lsls	r3, r3, #16
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	331a      	adds	r3, #26
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	b292      	uxth	r2, r2
 8006eac:	4611      	mov	r1, r2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff f859 	bl	8005f66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d109      	bne.n	8006ed0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f103 0214 	add.w	r2, r3, #20
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7ff f84b 	bl	8005f66 <st_word>
	}
}
 8006ed0:	bf00      	nop
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	331a      	adds	r3, #26
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff f802 	bl	8005ef0 <ld_word>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <cmp_lfn+0x1e>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e059      	b.n	8006faa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006efe:	1e5a      	subs	r2, r3, #1
 8006f00:	4613      	mov	r3, r2
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	81fb      	strh	r3, [r7, #14]
 8006f10:	2300      	movs	r3, #0
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	e033      	b.n	8006f7e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006f16:	4a27      	ldr	r2, [pc, #156]	; (8006fb4 <cmp_lfn+0xdc>)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	4413      	add	r3, r2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fe ffe3 	bl	8005ef0 <ld_word>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006f2e:	89fb      	ldrh	r3, [r7, #14]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01a      	beq.n	8006f6a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2bfe      	cmp	r3, #254	; 0xfe
 8006f38:	d812      	bhi.n	8006f60 <cmp_lfn+0x88>
 8006f3a:	89bb      	ldrh	r3, [r7, #12]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f002 f9a5 	bl	800928c <ff_wtoupper>
 8006f42:	4603      	mov	r3, r0
 8006f44:	461c      	mov	r4, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	617a      	str	r2, [r7, #20]
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f002 f999 	bl	800928c <ff_wtoupper>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	429c      	cmp	r4, r3
 8006f5e:	d001      	beq.n	8006f64 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006f60:	2300      	movs	r3, #0
 8006f62:	e022      	b.n	8006faa <cmp_lfn+0xd2>
			}
			wc = uc;
 8006f64:	89bb      	ldrh	r3, [r7, #12]
 8006f66:	81fb      	strh	r3, [r7, #14]
 8006f68:	e006      	b.n	8006f78 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006f6a:	89bb      	ldrh	r3, [r7, #12]
 8006f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d001      	beq.n	8006f78 <cmp_lfn+0xa0>
 8006f74:	2300      	movs	r3, #0
 8006f76:	e018      	b.n	8006faa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b0c      	cmp	r3, #12
 8006f82:	d9c8      	bls.n	8006f16 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <cmp_lfn+0xd0>
 8006f90:	89fb      	ldrh	r3, [r7, #14]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <cmp_lfn+0xd0>
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <cmp_lfn+0xd0>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e000      	b.n	8006faa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006fa8:	2301      	movs	r3, #1
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd90      	pop	{r4, r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	0800a51c 	.word	0x0800a51c

08006fb8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	71fb      	strb	r3, [r7, #7]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	330d      	adds	r3, #13
 8006fd2:	79ba      	ldrb	r2, [r7, #6]
 8006fd4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	330b      	adds	r3, #11
 8006fda:	220f      	movs	r2, #15
 8006fdc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	330c      	adds	r3, #12
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	331a      	adds	r3, #26
 8006fea:	2100      	movs	r1, #0
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe ffba 	bl	8005f66 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	1e5a      	subs	r2, r3, #1
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	82fb      	strh	r3, [r7, #22]
 8007006:	2300      	movs	r3, #0
 8007008:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800700a:	8afb      	ldrh	r3, [r7, #22]
 800700c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007010:	4293      	cmp	r3, r2
 8007012:	d007      	beq.n	8007024 <put_lfn+0x6c>
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	61fa      	str	r2, [r7, #28]
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007024:	4a17      	ldr	r2, [pc, #92]	; (8007084 <put_lfn+0xcc>)
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	4413      	add	r3, r2
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4413      	add	r3, r2
 8007032:	8afa      	ldrh	r2, [r7, #22]
 8007034:	4611      	mov	r1, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe ff95 	bl	8005f66 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800703c:	8afb      	ldrh	r3, [r7, #22]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d102      	bne.n	8007048 <put_lfn+0x90>
 8007042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007046:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	3301      	adds	r3, #1
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b0c      	cmp	r3, #12
 8007052:	d9da      	bls.n	800700a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007054:	8afb      	ldrh	r3, [r7, #22]
 8007056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800705a:	4293      	cmp	r3, r2
 800705c:	d006      	beq.n	800706c <put_lfn+0xb4>
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <put_lfn+0xbc>
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007072:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	79fa      	ldrb	r2, [r7, #7]
 8007078:	701a      	strb	r2, [r3, #0]
}
 800707a:	bf00      	nop
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	0800a51c 	.word	0x0800a51c

08007088 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08c      	sub	sp, #48	; 0x30
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007096:	220b      	movs	r2, #11
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7fe ffaa 	bl	8005ff4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	d92b      	bls.n	80070fe <gen_numname+0x76>
		sr = seq;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80070aa:	e022      	b.n	80070f2 <gen_numname+0x6a>
			wc = *lfn++;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	1c9a      	adds	r2, r3, #2
 80070b0:	607a      	str	r2, [r7, #4]
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80070b6:	2300      	movs	r3, #0
 80070b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ba:	e017      	b.n	80070ec <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	005a      	lsls	r2, r3, #1
 80070c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	4413      	add	r3, r2
 80070c8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80070ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <gen_numname+0x5e>
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80070e0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80070e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	3301      	adds	r3, #1
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d9e4      	bls.n	80070bc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1d8      	bne.n	80070ac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80070fe:	2307      	movs	r3, #7
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	b2db      	uxtb	r3, r3
 800710c:	3330      	adds	r3, #48	; 0x30
 800710e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007116:	2b39      	cmp	r3, #57	; 0x39
 8007118:	d904      	bls.n	8007124 <gen_numname+0x9c>
 800711a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800711e:	3307      	adds	r3, #7
 8007120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	1e5a      	subs	r2, r3, #1
 8007128:	62ba      	str	r2, [r7, #40]	; 0x28
 800712a:	3330      	adds	r3, #48	; 0x30
 800712c:	443b      	add	r3, r7
 800712e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007132:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	091b      	lsrs	r3, r3, #4
 800713a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1df      	bne.n	8007102 <gen_numname+0x7a>
	ns[i] = '~';
 8007142:	f107 0214 	add.w	r2, r7, #20
 8007146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007148:	4413      	add	r3, r2
 800714a:	227e      	movs	r2, #126	; 0x7e
 800714c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800714e:	2300      	movs	r3, #0
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
 8007152:	e002      	b.n	800715a <gen_numname+0xd2>
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	3301      	adds	r3, #1
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
 800715a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	429a      	cmp	r2, r3
 8007160:	d205      	bcs.n	800716e <gen_numname+0xe6>
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	4413      	add	r3, r2
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b20      	cmp	r3, #32
 800716c:	d1f2      	bne.n	8007154 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	2b07      	cmp	r3, #7
 8007172:	d807      	bhi.n	8007184 <gen_numname+0xfc>
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	62ba      	str	r2, [r7, #40]	; 0x28
 800717a:	3330      	adds	r3, #48	; 0x30
 800717c:	443b      	add	r3, r7
 800717e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007182:	e000      	b.n	8007186 <gen_numname+0xfe>
 8007184:	2120      	movs	r1, #32
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	627a      	str	r2, [r7, #36]	; 0x24
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	460a      	mov	r2, r1
 8007192:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	2b07      	cmp	r3, #7
 8007198:	d9e9      	bls.n	800716e <gen_numname+0xe6>
}
 800719a:	bf00      	nop
 800719c:	bf00      	nop
 800719e:	3730      	adds	r7, #48	; 0x30
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80071b0:	230b      	movs	r3, #11
 80071b2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	0852      	lsrs	r2, r2, #1
 80071ba:	01db      	lsls	r3, r3, #7
 80071bc:	4313      	orrs	r3, r2
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	1c59      	adds	r1, r3, #1
 80071c4:	6079      	str	r1, [r7, #4]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	4413      	add	r3, r2
 80071ca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1ed      	bne.n	80071b4 <sum_sfn+0x10>
	return sum;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b086      	sub	sp, #24
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80071f4:	2100      	movs	r1, #0
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff fca8 	bl	8006b4c <dir_sdi>
 80071fc:	4603      	mov	r3, r0
 80071fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007200:	7dfb      	ldrb	r3, [r7, #23]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <dir_find+0x24>
 8007206:	7dfb      	ldrb	r3, [r7, #23]
 8007208:	e0a9      	b.n	800735e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800720a:	23ff      	movs	r3, #255	; 0xff
 800720c:	753b      	strb	r3, [r7, #20]
 800720e:	7d3b      	ldrb	r3, [r7, #20]
 8007210:	757b      	strb	r3, [r7, #21]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f04f 32ff 	mov.w	r2, #4294967295
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	4619      	mov	r1, r3
 8007220:	6938      	ldr	r0, [r7, #16]
 8007222:	f7ff f915 	bl	8006450 <move_window>
 8007226:	4603      	mov	r3, r0
 8007228:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f040 8090 	bne.w	8007352 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800723a:	7dbb      	ldrb	r3, [r7, #22]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <dir_find+0x60>
 8007240:	2304      	movs	r3, #4
 8007242:	75fb      	strb	r3, [r7, #23]
 8007244:	e08a      	b.n	800735c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	330b      	adds	r3, #11
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007252:	73fb      	strb	r3, [r7, #15]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	7bfa      	ldrb	r2, [r7, #15]
 8007258:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800725a:	7dbb      	ldrb	r3, [r7, #22]
 800725c:	2be5      	cmp	r3, #229	; 0xe5
 800725e:	d007      	beq.n	8007270 <dir_find+0x8a>
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d009      	beq.n	800727e <dir_find+0x98>
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	2b0f      	cmp	r3, #15
 800726e:	d006      	beq.n	800727e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007270:	23ff      	movs	r3, #255	; 0xff
 8007272:	757b      	strb	r3, [r7, #21]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f04f 32ff 	mov.w	r2, #4294967295
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
 800727c:	e05e      	b.n	800733c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	2b0f      	cmp	r3, #15
 8007282:	d136      	bne.n	80072f2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d154      	bne.n	800733c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007292:	7dbb      	ldrb	r3, [r7, #22]
 8007294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00d      	beq.n	80072b8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	7b5b      	ldrb	r3, [r3, #13]
 80072a2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80072a4:	7dbb      	ldrb	r3, [r7, #22]
 80072a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072aa:	75bb      	strb	r3, [r7, #22]
 80072ac:	7dbb      	ldrb	r3, [r7, #22]
 80072ae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	695a      	ldr	r2, [r3, #20]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80072b8:	7dba      	ldrb	r2, [r7, #22]
 80072ba:	7d7b      	ldrb	r3, [r7, #21]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d115      	bne.n	80072ec <dir_find+0x106>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	330d      	adds	r3, #13
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	7d3a      	ldrb	r2, [r7, #20]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d10e      	bne.n	80072ec <dir_find+0x106>
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f7ff fdfd 	bl	8006ed8 <cmp_lfn>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <dir_find+0x106>
 80072e4:	7d7b      	ldrb	r3, [r7, #21]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	e000      	b.n	80072ee <dir_find+0x108>
 80072ec:	23ff      	movs	r3, #255	; 0xff
 80072ee:	757b      	strb	r3, [r7, #21]
 80072f0:	e024      	b.n	800733c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80072f2:	7d7b      	ldrb	r3, [r7, #21]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d109      	bne.n	800730c <dir_find+0x126>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff ff51 	bl	80071a4 <sum_sfn>
 8007302:	4603      	mov	r3, r0
 8007304:	461a      	mov	r2, r3
 8007306:	7d3b      	ldrb	r3, [r7, #20]
 8007308:	4293      	cmp	r3, r2
 800730a:	d024      	beq.n	8007356 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10a      	bne.n	8007330 <dir_find+0x14a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a18      	ldr	r0, [r3, #32]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3324      	adds	r3, #36	; 0x24
 8007322:	220b      	movs	r2, #11
 8007324:	4619      	mov	r1, r3
 8007326:	f7fe fea1 	bl	800606c <mem_cmp>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d014      	beq.n	800735a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007330:	23ff      	movs	r3, #255	; 0xff
 8007332:	757b      	strb	r3, [r7, #21]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f04f 32ff 	mov.w	r2, #4294967295
 800733a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800733c:	2100      	movs	r1, #0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff fc7f 	bl	8006c42 <dir_next>
 8007344:	4603      	mov	r3, r0
 8007346:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f43f af65 	beq.w	800721a <dir_find+0x34>
 8007350:	e004      	b.n	800735c <dir_find+0x176>
		if (res != FR_OK) break;
 8007352:	bf00      	nop
 8007354:	e002      	b.n	800735c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007356:	bf00      	nop
 8007358:	e000      	b.n	800735c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800735a:	bf00      	nop

	return res;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08c      	sub	sp, #48	; 0x30
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800737c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <dir_register+0x20>
 8007384:	2306      	movs	r3, #6
 8007386:	e0e0      	b.n	800754a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007388:	2300      	movs	r3, #0
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
 800738c:	e002      	b.n	8007394 <dir_register+0x2c>
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	3301      	adds	r3, #1
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	4413      	add	r3, r2
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f4      	bne.n	800738e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80073aa:	f107 030c 	add.w	r3, r7, #12
 80073ae:	220c      	movs	r2, #12
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe fe1f 	bl	8005ff4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d032      	beq.n	8007426 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2240      	movs	r2, #64	; 0x40
 80073c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80073c8:	2301      	movs	r3, #1
 80073ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80073cc:	e016      	b.n	80073fc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	f107 010c 	add.w	r1, r7, #12
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	f7ff fe53 	bl	8007088 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff feff 	bl	80071e6 <dir_find>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80073ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	3301      	adds	r3, #1
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	2b63      	cmp	r3, #99	; 0x63
 8007400:	d9e5      	bls.n	80073ce <dir_register+0x66>
 8007402:	e000      	b.n	8007406 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007404:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	2b64      	cmp	r3, #100	; 0x64
 800740a:	d101      	bne.n	8007410 <dir_register+0xa8>
 800740c:	2307      	movs	r3, #7
 800740e:	e09c      	b.n	800754a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007414:	2b04      	cmp	r3, #4
 8007416:	d002      	beq.n	800741e <dir_register+0xb6>
 8007418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800741c:	e095      	b.n	800754a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800741e:	7dfa      	ldrb	r2, [r7, #23]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <dir_register+0xd8>
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	330c      	adds	r3, #12
 8007434:	4a47      	ldr	r2, [pc, #284]	; (8007554 <dir_register+0x1ec>)
 8007436:	fba2 2303 	umull	r2, r3, r2, r3
 800743a:	089b      	lsrs	r3, r3, #2
 800743c:	3301      	adds	r3, #1
 800743e:	e000      	b.n	8007442 <dir_register+0xda>
 8007440:	2301      	movs	r3, #1
 8007442:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007444:	6a39      	ldr	r1, [r7, #32]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fcc0 	bl	8006dcc <dir_alloc>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007456:	2b00      	cmp	r3, #0
 8007458:	d148      	bne.n	80074ec <dir_register+0x184>
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	3b01      	subs	r3, #1
 800745e:	623b      	str	r3, [r7, #32]
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d042      	beq.n	80074ec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	015b      	lsls	r3, r3, #5
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff fb6a 	bl	8006b4c <dir_sdi>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800747e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007482:	2b00      	cmp	r3, #0
 8007484:	d132      	bne.n	80074ec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3324      	adds	r3, #36	; 0x24
 800748a:	4618      	mov	r0, r3
 800748c:	f7ff fe8a 	bl	80071a4 <sum_sfn>
 8007490:	4603      	mov	r3, r0
 8007492:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	4619      	mov	r1, r3
 800749a:	69f8      	ldr	r0, [r7, #28]
 800749c:	f7fe ffd8 	bl	8006450 <move_window>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80074a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d11d      	bne.n	80074ea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	68d8      	ldr	r0, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a19      	ldr	r1, [r3, #32]
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	7efb      	ldrb	r3, [r7, #27]
 80074bc:	f7ff fd7c 	bl	8006fb8 <put_lfn>
				fs->wflag = 1;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	2201      	movs	r2, #1
 80074c4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80074c6:	2100      	movs	r1, #0
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff fbba 	bl	8006c42 <dir_next>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80074d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d107      	bne.n	80074ec <dir_register+0x184>
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	3b01      	subs	r3, #1
 80074e0:	623b      	str	r3, [r7, #32]
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1d5      	bne.n	8007494 <dir_register+0x12c>
 80074e8:	e000      	b.n	80074ec <dir_register+0x184>
				if (res != FR_OK) break;
 80074ea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80074ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d128      	bne.n	8007546 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	4619      	mov	r1, r3
 80074fa:	69f8      	ldr	r0, [r7, #28]
 80074fc:	f7fe ffa8 	bl	8006450 <move_window>
 8007500:	4603      	mov	r3, r0
 8007502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800750a:	2b00      	cmp	r3, #0
 800750c:	d11b      	bne.n	8007546 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	2220      	movs	r2, #32
 8007514:	2100      	movs	r1, #0
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe fd8d 	bl	8006036 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a18      	ldr	r0, [r3, #32]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	220b      	movs	r2, #11
 8007526:	4619      	mov	r1, r3
 8007528:	f7fe fd64 	bl	8005ff4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	330c      	adds	r3, #12
 8007538:	f002 0218 	and.w	r2, r2, #24
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2201      	movs	r2, #1
 8007544:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800754a:	4618      	mov	r0, r3
 800754c:	3730      	adds	r7, #48	; 0x30
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	4ec4ec4f 	.word	0x4ec4ec4f

08007558 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	; 0x28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	61ba      	str	r2, [r7, #24]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4413      	add	r3, r2
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007588:	2b1f      	cmp	r3, #31
 800758a:	d940      	bls.n	800760e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800758c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800758e:	2b2f      	cmp	r3, #47	; 0x2f
 8007590:	d006      	beq.n	80075a0 <create_name+0x48>
 8007592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007594:	2b5c      	cmp	r3, #92	; 0x5c
 8007596:	d110      	bne.n	80075ba <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007598:	e002      	b.n	80075a0 <create_name+0x48>
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	3301      	adds	r3, #1
 800759e:	61bb      	str	r3, [r7, #24]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	4413      	add	r3, r2
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b2f      	cmp	r3, #47	; 0x2f
 80075aa:	d0f6      	beq.n	800759a <create_name+0x42>
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	4413      	add	r3, r2
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b5c      	cmp	r3, #92	; 0x5c
 80075b6:	d0f0      	beq.n	800759a <create_name+0x42>
			break;
 80075b8:	e02a      	b.n	8007610 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2bfe      	cmp	r3, #254	; 0xfe
 80075be:	d901      	bls.n	80075c4 <create_name+0x6c>
 80075c0:	2306      	movs	r3, #6
 80075c2:	e17d      	b.n	80078c0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80075c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80075ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075cc:	2101      	movs	r1, #1
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 fe20 	bl	8009214 <ff_convert>
 80075d4:	4603      	mov	r3, r0
 80075d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80075d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <create_name+0x8a>
 80075de:	2306      	movs	r3, #6
 80075e0:	e16e      	b.n	80078c0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80075e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075e4:	2b7f      	cmp	r3, #127	; 0x7f
 80075e6:	d809      	bhi.n	80075fc <create_name+0xa4>
 80075e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ea:	4619      	mov	r1, r3
 80075ec:	488d      	ldr	r0, [pc, #564]	; (8007824 <create_name+0x2cc>)
 80075ee:	f7fe fd64 	bl	80060ba <chk_chr>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <create_name+0xa4>
 80075f8:	2306      	movs	r3, #6
 80075fa:	e161      	b.n	80078c0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	617a      	str	r2, [r7, #20]
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800760a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800760c:	e7b4      	b.n	8007578 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800760e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	441a      	add	r2, r3
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800761a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800761c:	2b1f      	cmp	r3, #31
 800761e:	d801      	bhi.n	8007624 <create_name+0xcc>
 8007620:	2304      	movs	r3, #4
 8007622:	e000      	b.n	8007626 <create_name+0xce>
 8007624:	2300      	movs	r3, #0
 8007626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800762a:	e011      	b.n	8007650 <create_name+0xf8>
		w = lfn[di - 1];
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007632:	3b01      	subs	r3, #1
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800763e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007640:	2b20      	cmp	r3, #32
 8007642:	d002      	beq.n	800764a <create_name+0xf2>
 8007644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007646:	2b2e      	cmp	r3, #46	; 0x2e
 8007648:	d106      	bne.n	8007658 <create_name+0x100>
		di--;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	3b01      	subs	r3, #1
 800764e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1ea      	bne.n	800762c <create_name+0xd4>
 8007656:	e000      	b.n	800765a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007658:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	2200      	movs	r2, #0
 8007664:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <create_name+0x118>
 800766c:	2306      	movs	r3, #6
 800766e:	e127      	b.n	80078c0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3324      	adds	r3, #36	; 0x24
 8007674:	220b      	movs	r2, #11
 8007676:	2120      	movs	r1, #32
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fcdc 	bl	8006036 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800767e:	2300      	movs	r3, #0
 8007680:	61bb      	str	r3, [r7, #24]
 8007682:	e002      	b.n	800768a <create_name+0x132>
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	3301      	adds	r3, #1
 8007688:	61bb      	str	r3, [r7, #24]
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	2b20      	cmp	r3, #32
 8007696:	d0f5      	beq.n	8007684 <create_name+0x12c>
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	2b2e      	cmp	r3, #46	; 0x2e
 80076a4:	d0ee      	beq.n	8007684 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d009      	beq.n	80076c0 <create_name+0x168>
 80076ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076b0:	f043 0303 	orr.w	r3, r3, #3
 80076b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80076b8:	e002      	b.n	80076c0 <create_name+0x168>
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	3b01      	subs	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <create_name+0x182>
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80076cc:	3b01      	subs	r3, #1
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	2b2e      	cmp	r3, #46	; 0x2e
 80076d8:	d1ef      	bne.n	80076ba <create_name+0x162>

	i = b = 0; ni = 8;
 80076da:	2300      	movs	r3, #0
 80076dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80076e0:	2300      	movs	r3, #0
 80076e2:	623b      	str	r3, [r7, #32]
 80076e4:	2308      	movs	r3, #8
 80076e6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	61ba      	str	r2, [r7, #24]
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80076f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8090 	beq.w	8007820 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007702:	2b20      	cmp	r3, #32
 8007704:	d006      	beq.n	8007714 <create_name+0x1bc>
 8007706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007708:	2b2e      	cmp	r3, #46	; 0x2e
 800770a:	d10a      	bne.n	8007722 <create_name+0x1ca>
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	429a      	cmp	r2, r3
 8007712:	d006      	beq.n	8007722 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007718:	f043 0303 	orr.w	r3, r3, #3
 800771c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007720:	e07d      	b.n	800781e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007722:	6a3a      	ldr	r2, [r7, #32]
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	429a      	cmp	r2, r3
 8007728:	d203      	bcs.n	8007732 <create_name+0x1da>
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	429a      	cmp	r2, r3
 8007730:	d123      	bne.n	800777a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	2b0b      	cmp	r3, #11
 8007736:	d106      	bne.n	8007746 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800773c:	f043 0303 	orr.w	r3, r3, #3
 8007740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007744:	e075      	b.n	8007832 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	429a      	cmp	r2, r3
 800774c:	d005      	beq.n	800775a <create_name+0x202>
 800774e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007752:	f043 0303 	orr.w	r3, r3, #3
 8007756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	429a      	cmp	r2, r3
 8007760:	d866      	bhi.n	8007830 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	2308      	movs	r3, #8
 8007768:	623b      	str	r3, [r7, #32]
 800776a:	230b      	movs	r3, #11
 800776c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800776e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007778:	e051      	b.n	800781e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800777a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800777c:	2b7f      	cmp	r3, #127	; 0x7f
 800777e:	d914      	bls.n	80077aa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007782:	2100      	movs	r1, #0
 8007784:	4618      	mov	r0, r3
 8007786:	f001 fd45 	bl	8009214 <ff_convert>
 800778a:	4603      	mov	r3, r0
 800778c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800778e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <create_name+0x246>
 8007794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007796:	3b80      	subs	r3, #128	; 0x80
 8007798:	4a23      	ldr	r2, [pc, #140]	; (8007828 <create_name+0x2d0>)
 800779a:	5cd3      	ldrb	r3, [r2, r3]
 800779c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800779e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077a2:	f043 0302 	orr.w	r3, r3, #2
 80077a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80077aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d007      	beq.n	80077c0 <create_name+0x268>
 80077b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077b2:	4619      	mov	r1, r3
 80077b4:	481d      	ldr	r0, [pc, #116]	; (800782c <create_name+0x2d4>)
 80077b6:	f7fe fc80 	bl	80060ba <chk_chr>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d008      	beq.n	80077d2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80077c0:	235f      	movs	r3, #95	; 0x5f
 80077c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80077c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c8:	f043 0303 	orr.w	r3, r3, #3
 80077cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077d0:	e01b      	b.n	800780a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80077d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077d4:	2b40      	cmp	r3, #64	; 0x40
 80077d6:	d909      	bls.n	80077ec <create_name+0x294>
 80077d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077da:	2b5a      	cmp	r3, #90	; 0x5a
 80077dc:	d806      	bhi.n	80077ec <create_name+0x294>
					b |= 2;
 80077de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077e2:	f043 0302 	orr.w	r3, r3, #2
 80077e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80077ea:	e00e      	b.n	800780a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80077ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077ee:	2b60      	cmp	r3, #96	; 0x60
 80077f0:	d90b      	bls.n	800780a <create_name+0x2b2>
 80077f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077f4:	2b7a      	cmp	r3, #122	; 0x7a
 80077f6:	d808      	bhi.n	800780a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80077f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077fc:	f043 0301 	orr.w	r3, r3, #1
 8007800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007806:	3b20      	subs	r3, #32
 8007808:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	623a      	str	r2, [r7, #32]
 8007810:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007812:	b2d1      	uxtb	r1, r2
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	4413      	add	r3, r2
 8007818:	460a      	mov	r2, r1
 800781a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800781e:	e763      	b.n	80076e8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007820:	bf00      	nop
 8007822:	e006      	b.n	8007832 <create_name+0x2da>
 8007824:	0800a428 	.word	0x0800a428
 8007828:	0800a49c 	.word	0x0800a49c
 800782c:	0800a434 	.word	0x0800a434
			if (si > di) break;			/* No extension */
 8007830:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007838:	2be5      	cmp	r3, #229	; 0xe5
 800783a:	d103      	bne.n	8007844 <create_name+0x2ec>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2205      	movs	r2, #5
 8007840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2b08      	cmp	r3, #8
 8007848:	d104      	bne.n	8007854 <create_name+0x2fc>
 800784a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007854:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007858:	f003 030c 	and.w	r3, r3, #12
 800785c:	2b0c      	cmp	r3, #12
 800785e:	d005      	beq.n	800786c <create_name+0x314>
 8007860:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	2b03      	cmp	r3, #3
 800786a:	d105      	bne.n	8007878 <create_name+0x320>
 800786c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007870:	f043 0302 	orr.w	r3, r3, #2
 8007874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d117      	bne.n	80078b4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007884:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	2b01      	cmp	r3, #1
 800788e:	d105      	bne.n	800789c <create_name+0x344>
 8007890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007894:	f043 0310 	orr.w	r3, r3, #16
 8007898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800789c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078a0:	f003 030c 	and.w	r3, r3, #12
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d105      	bne.n	80078b4 <create_name+0x35c>
 80078a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078ac:	f043 0308 	orr.w	r3, r3, #8
 80078b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80078ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80078be:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3728      	adds	r7, #40	; 0x28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80078dc:	e002      	b.n	80078e4 <follow_path+0x1c>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	3301      	adds	r3, #1
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b2f      	cmp	r3, #47	; 0x2f
 80078ea:	d0f8      	beq.n	80078de <follow_path+0x16>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b5c      	cmp	r3, #92	; 0x5c
 80078f2:	d0f4      	beq.n	80078de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	2200      	movs	r2, #0
 80078f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b1f      	cmp	r3, #31
 8007900:	d80a      	bhi.n	8007918 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2280      	movs	r2, #128	; 0x80
 8007906:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800790a:	2100      	movs	r1, #0
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff f91d 	bl	8006b4c <dir_sdi>
 8007912:	4603      	mov	r3, r0
 8007914:	75fb      	strb	r3, [r7, #23]
 8007916:	e043      	b.n	80079a0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007918:	463b      	mov	r3, r7
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff fe1b 	bl	8007558 <create_name>
 8007922:	4603      	mov	r3, r0
 8007924:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d134      	bne.n	8007996 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff fc5a 	bl	80071e6 <dir_find>
 8007932:	4603      	mov	r3, r0
 8007934:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800793c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	2b04      	cmp	r3, #4
 8007948:	d127      	bne.n	800799a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	2b00      	cmp	r3, #0
 8007952:	d122      	bne.n	800799a <follow_path+0xd2>
 8007954:	2305      	movs	r3, #5
 8007956:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007958:	e01f      	b.n	800799a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d11c      	bne.n	800799e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	799b      	ldrb	r3, [r3, #6]
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007970:	2305      	movs	r3, #5
 8007972:	75fb      	strb	r3, [r7, #23]
 8007974:	e014      	b.n	80079a0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007984:	4413      	add	r3, r2
 8007986:	4619      	mov	r1, r3
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff fa66 	bl	8006e5a <ld_clust>
 800798e:	4602      	mov	r2, r0
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007994:	e7c0      	b.n	8007918 <follow_path+0x50>
			if (res != FR_OK) break;
 8007996:	bf00      	nop
 8007998:	e002      	b.n	80079a0 <follow_path+0xd8>
				break;
 800799a:	bf00      	nop
 800799c:	e000      	b.n	80079a0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800799e:	bf00      	nop
			}
		}
	}

	return res;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b087      	sub	sp, #28
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80079b2:	f04f 33ff 	mov.w	r3, #4294967295
 80079b6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d031      	beq.n	8007a24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	e002      	b.n	80079ce <get_ldnumber+0x24>
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	3301      	adds	r3, #1
 80079cc:	617b      	str	r3, [r7, #20]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b1f      	cmp	r3, #31
 80079d4:	d903      	bls.n	80079de <get_ldnumber+0x34>
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b3a      	cmp	r3, #58	; 0x3a
 80079dc:	d1f4      	bne.n	80079c8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b3a      	cmp	r3, #58	; 0x3a
 80079e4:	d11c      	bne.n	8007a20 <get_ldnumber+0x76>
			tp = *path;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	60fa      	str	r2, [r7, #12]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	3b30      	subs	r3, #48	; 0x30
 80079f6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b09      	cmp	r3, #9
 80079fc:	d80e      	bhi.n	8007a1c <get_ldnumber+0x72>
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d10a      	bne.n	8007a1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d107      	bne.n	8007a1c <get_ldnumber+0x72>
					vol = (int)i;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	3301      	adds	r3, #1
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	e002      	b.n	8007a26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007a20:	2300      	movs	r3, #0
 8007a22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007a24:	693b      	ldr	r3, [r7, #16]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	70da      	strb	r2, [r3, #3]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fe fcfe 	bl	8006450 <move_window>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <check_fs+0x2a>
 8007a5a:	2304      	movs	r3, #4
 8007a5c:	e038      	b.n	8007ad0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3334      	adds	r3, #52	; 0x34
 8007a62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fa42 	bl	8005ef0 <ld_word>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d001      	beq.n	8007a7c <check_fs+0x48>
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e029      	b.n	8007ad0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a82:	2be9      	cmp	r3, #233	; 0xe9
 8007a84:	d009      	beq.n	8007a9a <check_fs+0x66>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a8c:	2beb      	cmp	r3, #235	; 0xeb
 8007a8e:	d11e      	bne.n	8007ace <check_fs+0x9a>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007a96:	2b90      	cmp	r3, #144	; 0x90
 8007a98:	d119      	bne.n	8007ace <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3334      	adds	r3, #52	; 0x34
 8007a9e:	3336      	adds	r3, #54	; 0x36
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fa3d 	bl	8005f20 <ld_dword>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007aac:	4a0a      	ldr	r2, [pc, #40]	; (8007ad8 <check_fs+0xa4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d101      	bne.n	8007ab6 <check_fs+0x82>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e00c      	b.n	8007ad0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3334      	adds	r3, #52	; 0x34
 8007aba:	3352      	adds	r3, #82	; 0x52
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe fa2f 	bl	8005f20 <ld_dword>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4a05      	ldr	r2, [pc, #20]	; (8007adc <check_fs+0xa8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d101      	bne.n	8007ace <check_fs+0x9a>
 8007aca:	2300      	movs	r3, #0
 8007acc:	e000      	b.n	8007ad0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007ace:	2302      	movs	r3, #2
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	00544146 	.word	0x00544146
 8007adc:	33544146 	.word	0x33544146

08007ae0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b096      	sub	sp, #88	; 0x58
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f7ff ff58 	bl	80079aa <get_ldnumber>
 8007afa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	da01      	bge.n	8007b06 <find_volume+0x26>
 8007b02:	230b      	movs	r3, #11
 8007b04:	e230      	b.n	8007f68 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007b06:	4aa1      	ldr	r2, [pc, #644]	; (8007d8c <find_volume+0x2ac>)
 8007b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <find_volume+0x3a>
 8007b16:	230c      	movs	r3, #12
 8007b18:	e226      	b.n	8007f68 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	f023 0301 	bic.w	r3, r3, #1
 8007b26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01a      	beq.n	8007b66 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe f93b 	bl	8005db0 <disk_status>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007b40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10c      	bne.n	8007b66 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <find_volume+0x82>
 8007b52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007b5e:	230a      	movs	r3, #10
 8007b60:	e202      	b.n	8007f68 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8007b62:	2300      	movs	r3, #0
 8007b64:	e200      	b.n	8007f68 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	2200      	movs	r2, #0
 8007b6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	785b      	ldrb	r3, [r3, #1]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe f933 	bl	8005de4 <disk_initialize>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007b84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b90:	2303      	movs	r3, #3
 8007b92:	e1e9      	b.n	8007f68 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <find_volume+0xca>
 8007b9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b9e:	f003 0304 	and.w	r3, r3, #4
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007ba6:	230a      	movs	r3, #10
 8007ba8:	e1de      	b.n	8007f68 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007bae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007bb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bb2:	f7ff ff3f 	bl	8007a34 <check_fs>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d149      	bne.n	8007c58 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc8:	e01e      	b.n	8007c08 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bcc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007bd8:	4413      	add	r3, r2
 8007bda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	3304      	adds	r3, #4
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d006      	beq.n	8007bf4 <find_volume+0x114>
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	3308      	adds	r3, #8
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe f998 	bl	8005f20 <ld_dword>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	e000      	b.n	8007bf6 <find_volume+0x116>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	3358      	adds	r3, #88	; 0x58
 8007bfc:	443b      	add	r3, r7
 8007bfe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c04:	3301      	adds	r3, #1
 8007c06:	643b      	str	r3, [r7, #64]	; 0x40
 8007c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d9dd      	bls.n	8007bca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007c0e:	2300      	movs	r3, #0
 8007c10:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <find_volume+0x13e>
 8007c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	3358      	adds	r3, #88	; 0x58
 8007c24:	443b      	add	r3, r7
 8007c26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007c2a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <find_volume+0x15e>
 8007c32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c36:	f7ff fefd 	bl	8007a34 <check_fs>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	e000      	b.n	8007c40 <find_volume+0x160>
 8007c3e:	2303      	movs	r3, #3
 8007c40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007c44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d905      	bls.n	8007c58 <find_volume+0x178>
 8007c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c4e:	3301      	adds	r3, #1
 8007c50:	643b      	str	r3, [r7, #64]	; 0x40
 8007c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d9e2      	bls.n	8007c1e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d101      	bne.n	8007c64 <find_volume+0x184>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e181      	b.n	8007f68 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d901      	bls.n	8007c70 <find_volume+0x190>
 8007c6c:	230d      	movs	r3, #13
 8007c6e:	e17b      	b.n	8007f68 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	3334      	adds	r3, #52	; 0x34
 8007c74:	330b      	adds	r3, #11
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe f93a 	bl	8005ef0 <ld_word>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c82:	d001      	beq.n	8007c88 <find_volume+0x1a8>
 8007c84:	230d      	movs	r3, #13
 8007c86:	e16f      	b.n	8007f68 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	3334      	adds	r3, #52	; 0x34
 8007c8c:	3316      	adds	r3, #22
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe f92e 	bl	8005ef0 <ld_word>
 8007c94:	4603      	mov	r3, r0
 8007c96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <find_volume+0x1cc>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	3334      	adds	r3, #52	; 0x34
 8007ca2:	3324      	adds	r3, #36	; 0x24
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe f93b 	bl	8005f20 <ld_dword>
 8007caa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cb0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	789b      	ldrb	r3, [r3, #2]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d005      	beq.n	8007cd0 <find_volume+0x1f0>
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	789b      	ldrb	r3, [r3, #2]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d001      	beq.n	8007cd0 <find_volume+0x1f0>
 8007ccc:	230d      	movs	r3, #13
 8007cce:	e14b      	b.n	8007f68 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	789b      	ldrb	r3, [r3, #2]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd8:	fb02 f303 	mul.w	r3, r2, r3
 8007cdc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	895b      	ldrh	r3, [r3, #10]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d008      	beq.n	8007d04 <find_volume+0x224>
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	895b      	ldrh	r3, [r3, #10]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	895b      	ldrh	r3, [r3, #10]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	4013      	ands	r3, r2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <find_volume+0x228>
 8007d04:	230d      	movs	r3, #13
 8007d06:	e12f      	b.n	8007f68 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	3334      	adds	r3, #52	; 0x34
 8007d0c:	3311      	adds	r3, #17
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe f8ee 	bl	8005ef0 <ld_word>
 8007d14:	4603      	mov	r3, r0
 8007d16:	461a      	mov	r2, r3
 8007d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	891b      	ldrh	r3, [r3, #8]
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <find_volume+0x24e>
 8007d2a:	230d      	movs	r3, #13
 8007d2c:	e11c      	b.n	8007f68 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	3334      	adds	r3, #52	; 0x34
 8007d32:	3313      	adds	r3, #19
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fe f8db 	bl	8005ef0 <ld_word>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d106      	bne.n	8007d52 <find_volume+0x272>
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	3334      	adds	r3, #52	; 0x34
 8007d48:	3320      	adds	r3, #32
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe f8e8 	bl	8005f20 <ld_dword>
 8007d50:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	3334      	adds	r3, #52	; 0x34
 8007d56:	330e      	adds	r3, #14
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe f8c9 	bl	8005ef0 <ld_word>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007d62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <find_volume+0x28c>
 8007d68:	230d      	movs	r3, #13
 8007d6a:	e0fd      	b.n	8007f68 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007d6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d70:	4413      	add	r3, r2
 8007d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d74:	8912      	ldrh	r2, [r2, #8]
 8007d76:	0912      	lsrs	r2, r2, #4
 8007d78:	b292      	uxth	r2, r2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d204      	bcs.n	8007d90 <find_volume+0x2b0>
 8007d86:	230d      	movs	r3, #13
 8007d88:	e0ee      	b.n	8007f68 <find_volume+0x488>
 8007d8a:	bf00      	nop
 8007d8c:	200018a4 	.word	0x200018a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d98:	8952      	ldrh	r2, [r2, #10]
 8007d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <find_volume+0x2ca>
 8007da6:	230d      	movs	r3, #13
 8007da8:	e0de      	b.n	8007f68 <find_volume+0x488>
		fmt = FS_FAT32;
 8007daa:	2303      	movs	r3, #3
 8007dac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d802      	bhi.n	8007dc0 <find_volume+0x2e0>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d802      	bhi.n	8007dd0 <find_volume+0x2f0>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	1c9a      	adds	r2, r3, #2
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ddc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007dde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de2:	441a      	add	r2, r3
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007de8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	441a      	add	r2, r3
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007df2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d11e      	bne.n	8007e38 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	3334      	adds	r3, #52	; 0x34
 8007dfe:	332a      	adds	r3, #42	; 0x2a
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe f875 	bl	8005ef0 <ld_word>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <find_volume+0x330>
 8007e0c:	230d      	movs	r3, #13
 8007e0e:	e0ab      	b.n	8007f68 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	891b      	ldrh	r3, [r3, #8]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <find_volume+0x33c>
 8007e18:	230d      	movs	r3, #13
 8007e1a:	e0a5      	b.n	8007f68 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	3334      	adds	r3, #52	; 0x34
 8007e20:	332c      	adds	r3, #44	; 0x2c
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe f87c 	bl	8005f20 <ld_dword>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	647b      	str	r3, [r7, #68]	; 0x44
 8007e36:	e01f      	b.n	8007e78 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	891b      	ldrh	r3, [r3, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <find_volume+0x364>
 8007e40:	230d      	movs	r3, #13
 8007e42:	e091      	b.n	8007f68 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e4a:	441a      	add	r2, r3
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d103      	bne.n	8007e60 <find_volume+0x380>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	e00a      	b.n	8007e76 <find_volume+0x396>
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	699a      	ldr	r2, [r3, #24]
 8007e64:	4613      	mov	r3, r2
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	4413      	add	r3, r2
 8007e6a:	085a      	lsrs	r2, r3, #1
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007e76:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7a:	69da      	ldr	r2, [r3, #28]
 8007e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e7e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007e82:	0a5b      	lsrs	r3, r3, #9
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d201      	bcs.n	8007e8c <find_volume+0x3ac>
 8007e88:	230d      	movs	r3, #13
 8007e8a:	e06d      	b.n	8007f68 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e92:	615a      	str	r2, [r3, #20]
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	695a      	ldr	r2, [r3, #20]
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	2280      	movs	r2, #128	; 0x80
 8007ea0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007ea2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d149      	bne.n	8007f3e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	3334      	adds	r3, #52	; 0x34
 8007eae:	3330      	adds	r3, #48	; 0x30
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe f81d 	bl	8005ef0 <ld_word>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d140      	bne.n	8007f3e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ec4:	f7fe fac4 	bl	8006450 <move_window>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d137      	bne.n	8007f3e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	3334      	adds	r3, #52	; 0x34
 8007ed8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe f807 	bl	8005ef0 <ld_word>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d127      	bne.n	8007f3e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	3334      	adds	r3, #52	; 0x34
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe f814 	bl	8005f20 <ld_dword>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	4a1d      	ldr	r2, [pc, #116]	; (8007f70 <find_volume+0x490>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d11e      	bne.n	8007f3e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	3334      	adds	r3, #52	; 0x34
 8007f04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe f809 	bl	8005f20 <ld_dword>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4a18      	ldr	r2, [pc, #96]	; (8007f74 <find_volume+0x494>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d113      	bne.n	8007f3e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	3334      	adds	r3, #52	; 0x34
 8007f1a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fd fffe 	bl	8005f20 <ld_dword>
 8007f24:	4602      	mov	r2, r0
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	3334      	adds	r3, #52	; 0x34
 8007f2e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fd fff4 	bl	8005f20 <ld_dword>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007f44:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <find_volume+0x498>)
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <find_volume+0x498>)
 8007f50:	801a      	strh	r2, [r3, #0]
 8007f52:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <find_volume+0x498>)
 8007f54:	881a      	ldrh	r2, [r3, #0]
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	4a07      	ldr	r2, [pc, #28]	; (8007f7c <find_volume+0x49c>)
 8007f5e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007f60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f62:	f7fe fa0d 	bl	8006380 <clear_lock>
#endif
	return FR_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3758      	adds	r7, #88	; 0x58
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	41615252 	.word	0x41615252
 8007f74:	61417272 	.word	0x61417272
 8007f78:	200018a8 	.word	0x200018a8
 8007f7c:	200018cc 	.word	0x200018cc

08007f80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f8a:	2309      	movs	r3, #9
 8007f8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d01c      	beq.n	8007fce <validate+0x4e>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d018      	beq.n	8007fce <validate+0x4e>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d013      	beq.n	8007fce <validate+0x4e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	889a      	ldrh	r2, [r3, #4]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	88db      	ldrh	r3, [r3, #6]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d10c      	bne.n	8007fce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fd fef8 	bl	8005db0 <disk_status>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <validate+0x4e>
			res = FR_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <validate+0x5a>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	e000      	b.n	8007fdc <validate+0x5c>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	6013      	str	r3, [r2, #0]
	return res;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007ffe:	f107 0310 	add.w	r3, r7, #16
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff fcd1 	bl	80079aa <get_ldnumber>
 8008008:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	2b00      	cmp	r3, #0
 800800e:	da01      	bge.n	8008014 <f_mount+0x28>
 8008010:	230b      	movs	r3, #11
 8008012:	e02b      	b.n	800806c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008014:	4a17      	ldr	r2, [pc, #92]	; (8008074 <f_mount+0x88>)
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800801c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008024:	69b8      	ldr	r0, [r7, #24]
 8008026:	f7fe f9ab 	bl	8006380 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	490d      	ldr	r1, [pc, #52]	; (8008074 <f_mount+0x88>)
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <f_mount+0x66>
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d001      	beq.n	8008056 <f_mount+0x6a>
 8008052:	2300      	movs	r3, #0
 8008054:	e00a      	b.n	800806c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008056:	f107 010c 	add.w	r1, r7, #12
 800805a:	f107 0308 	add.w	r3, r7, #8
 800805e:	2200      	movs	r2, #0
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff fd3d 	bl	8007ae0 <find_volume>
 8008066:	4603      	mov	r3, r0
 8008068:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800806a:	7dfb      	ldrb	r3, [r7, #23]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200018a4 	.word	0x200018a4

08008078 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b09a      	sub	sp, #104	; 0x68
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	4613      	mov	r3, r2
 8008084:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <f_open+0x18>
 800808c:	2309      	movs	r3, #9
 800808e:	e1ad      	b.n	80083ec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008096:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008098:	79fa      	ldrb	r2, [r7, #7]
 800809a:	f107 0114 	add.w	r1, r7, #20
 800809e:	f107 0308 	add.w	r3, r7, #8
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fd1c 	bl	8007ae0 <find_volume>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80080ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f040 8191 	bne.w	80083da <f_open+0x362>
		dj.obj.fs = fs;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	f107 0318 	add.w	r3, r7, #24
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fbff 	bl	80078c8 <follow_path>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80080d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d11a      	bne.n	800810e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80080d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080dc:	b25b      	sxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	da03      	bge.n	80080ea <f_open+0x72>
				res = FR_INVALID_NAME;
 80080e2:	2306      	movs	r3, #6
 80080e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80080e8:	e011      	b.n	800810e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	f023 0301 	bic.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bf14      	ite	ne
 80080f4:	2301      	movne	r3, #1
 80080f6:	2300      	moveq	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	461a      	mov	r2, r3
 80080fc:	f107 0318 	add.w	r3, r7, #24
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7fd fff4 	bl	80060f0 <chk_lock>
 8008108:	4603      	mov	r3, r0
 800810a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	f003 031c 	and.w	r3, r3, #28
 8008114:	2b00      	cmp	r3, #0
 8008116:	d07f      	beq.n	8008218 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008118:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800811c:	2b00      	cmp	r3, #0
 800811e:	d017      	beq.n	8008150 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008120:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008124:	2b04      	cmp	r3, #4
 8008126:	d10e      	bne.n	8008146 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008128:	f7fe f83e 	bl	80061a8 <enq_lock>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d006      	beq.n	8008140 <f_open+0xc8>
 8008132:	f107 0318 	add.w	r3, r7, #24
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff f916 	bl	8007368 <dir_register>
 800813c:	4603      	mov	r3, r0
 800813e:	e000      	b.n	8008142 <f_open+0xca>
 8008140:	2312      	movs	r3, #18
 8008142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	f043 0308 	orr.w	r3, r3, #8
 800814c:	71fb      	strb	r3, [r7, #7]
 800814e:	e010      	b.n	8008172 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008150:	7fbb      	ldrb	r3, [r7, #30]
 8008152:	f003 0311 	and.w	r3, r3, #17
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <f_open+0xea>
					res = FR_DENIED;
 800815a:	2307      	movs	r3, #7
 800815c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008160:	e007      	b.n	8008172 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <f_open+0xfa>
 800816c:	2308      	movs	r3, #8
 800816e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008172:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008176:	2b00      	cmp	r3, #0
 8008178:	d168      	bne.n	800824c <f_open+0x1d4>
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	2b00      	cmp	r3, #0
 8008182:	d063      	beq.n	800824c <f_open+0x1d4>
				dw = GET_FATTIME();
 8008184:	f7fd fc76 	bl	8005a74 <get_fattime>
 8008188:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	330e      	adds	r3, #14
 800818e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008190:	4618      	mov	r0, r3
 8008192:	f7fd ff03 	bl	8005f9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	3316      	adds	r3, #22
 800819a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800819c:	4618      	mov	r0, r3
 800819e:	f7fd fefd 	bl	8005f9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	330b      	adds	r3, #11
 80081a6:	2220      	movs	r2, #32
 80081a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe fe52 	bl	8006e5a <ld_clust>
 80081b6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081bc:	2200      	movs	r2, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe fe6a 	bl	8006e98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	331c      	adds	r3, #28
 80081c8:	2100      	movs	r1, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fd fee6 	bl	8005f9c <st_dword>
					fs->wflag = 1;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2201      	movs	r2, #1
 80081d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80081d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d037      	beq.n	800824c <f_open+0x1d4>
						dw = fs->winsect;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80081e2:	f107 0318 	add.w	r3, r7, #24
 80081e6:	2200      	movs	r2, #0
 80081e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fe fb7d 	bl	80068ea <remove_chain>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80081f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d126      	bne.n	800824c <f_open+0x1d4>
							res = move_window(fs, dw);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe f924 	bl	8006450 <move_window>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008212:	3a01      	subs	r2, #1
 8008214:	611a      	str	r2, [r3, #16]
 8008216:	e019      	b.n	800824c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008218:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800821c:	2b00      	cmp	r3, #0
 800821e:	d115      	bne.n	800824c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008220:	7fbb      	ldrb	r3, [r7, #30]
 8008222:	f003 0310 	and.w	r3, r3, #16
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <f_open+0x1ba>
					res = FR_NO_FILE;
 800822a:	2304      	movs	r3, #4
 800822c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008230:	e00c      	b.n	800824c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <f_open+0x1d4>
 800823c:	7fbb      	ldrb	r3, [r7, #30]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <f_open+0x1d4>
						res = FR_DENIED;
 8008246:	2307      	movs	r3, #7
 8008248:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800824c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008250:	2b00      	cmp	r3, #0
 8008252:	d128      	bne.n	80082a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008254:	79fb      	ldrb	r3, [r7, #7]
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008264:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800826e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	f023 0301 	bic.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	bf14      	ite	ne
 800827e:	2301      	movne	r3, #1
 8008280:	2300      	moveq	r3, #0
 8008282:	b2db      	uxtb	r3, r3
 8008284:	461a      	mov	r2, r3
 8008286:	f107 0318 	add.w	r3, r7, #24
 800828a:	4611      	mov	r1, r2
 800828c:	4618      	mov	r0, r3
 800828e:	f7fd ffad 	bl	80061ec <inc_lock>
 8008292:	4602      	mov	r2, r0
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <f_open+0x22e>
 80082a0:	2302      	movs	r3, #2
 80082a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80082a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f040 8095 	bne.w	80083da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082b4:	4611      	mov	r1, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fdcf 	bl	8006e5a <ld_clust>
 80082bc:	4602      	mov	r2, r0
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	331c      	adds	r3, #28
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fd fe2a 	bl	8005f20 <ld_dword>
 80082cc:	4602      	mov	r2, r0
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	88da      	ldrh	r2, [r3, #6]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	79fa      	ldrb	r2, [r7, #7]
 80082ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3330      	adds	r3, #48	; 0x30
 8008302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008306:	2100      	movs	r1, #0
 8008308:	4618      	mov	r0, r3
 800830a:	f7fd fe94 	bl	8006036 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d060      	beq.n	80083da <f_open+0x362>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d05c      	beq.n	80083da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	895b      	ldrh	r3, [r3, #10]
 800832c:	025b      	lsls	r3, r3, #9
 800832e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800833c:	e016      	b.n	800836c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe f93f 	bl	80065c6 <get_fat>
 8008348:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800834a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800834c:	2b01      	cmp	r3, #1
 800834e:	d802      	bhi.n	8008356 <f_open+0x2de>
 8008350:	2302      	movs	r3, #2
 8008352:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835c:	d102      	bne.n	8008364 <f_open+0x2ec>
 800835e:	2301      	movs	r3, #1
 8008360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008364:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800836c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <f_open+0x304>
 8008374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008378:	429a      	cmp	r2, r3
 800837a:	d8e0      	bhi.n	800833e <f_open+0x2c6>
				}
				fp->clust = clst;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008380:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008382:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008386:	2b00      	cmp	r3, #0
 8008388:	d127      	bne.n	80083da <f_open+0x362>
 800838a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800838c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008390:	2b00      	cmp	r3, #0
 8008392:	d022      	beq.n	80083da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe f8f5 	bl	8006588 <clust2sect>
 800839e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80083a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d103      	bne.n	80083ae <f_open+0x336>
						res = FR_INT_ERR;
 80083a6:	2302      	movs	r3, #2
 80083a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80083ac:	e015      	b.n	80083da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80083ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b0:	0a5a      	lsrs	r2, r3, #9
 80083b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b4:	441a      	add	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	7858      	ldrb	r0, [r3, #1]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a1a      	ldr	r2, [r3, #32]
 80083c8:	2301      	movs	r3, #1
 80083ca:	f7fd fd33 	bl	8005e34 <disk_read>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <f_open+0x362>
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80083da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <f_open+0x370>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80083e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3768      	adds	r7, #104	; 0x68
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	; 0x30
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f107 0210 	add.w	r2, r7, #16
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff fdb3 	bl	8007f80 <validate>
 800841a:	4603      	mov	r3, r0
 800841c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008424:	2b00      	cmp	r3, #0
 8008426:	d107      	bne.n	8008438 <f_write+0x44>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	7d5b      	ldrb	r3, [r3, #21]
 800842c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <f_write+0x4a>
 8008438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800843c:	e14b      	b.n	80086d6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	7d1b      	ldrb	r3, [r3, #20]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <f_write+0x5a>
 800844a:	2307      	movs	r3, #7
 800844c:	e143      	b.n	80086d6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	699a      	ldr	r2, [r3, #24]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	441a      	add	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	429a      	cmp	r2, r3
 800845c:	f080 812d 	bcs.w	80086ba <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	43db      	mvns	r3, r3
 8008466:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008468:	e127      	b.n	80086ba <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008472:	2b00      	cmp	r3, #0
 8008474:	f040 80e3 	bne.w	800863e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	0a5b      	lsrs	r3, r3, #9
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	8952      	ldrh	r2, [r2, #10]
 8008482:	3a01      	subs	r2, #1
 8008484:	4013      	ands	r3, r2
 8008486:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d143      	bne.n	8008516 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10c      	bne.n	80084b0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d11a      	bne.n	80084d8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2100      	movs	r1, #0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fa84 	bl	80069b4 <create_chain>
 80084ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80084ae:	e013      	b.n	80084d8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	4619      	mov	r1, r3
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f7fe fb10 	bl	8006ae4 <clmt_clust>
 80084c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80084c6:	e007      	b.n	80084d8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe fa6f 	bl	80069b4 <create_chain>
 80084d6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 80f2 	beq.w	80086c4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d104      	bne.n	80084f0 <f_write+0xfc>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2202      	movs	r2, #2
 80084ea:	755a      	strb	r2, [r3, #21]
 80084ec:	2302      	movs	r3, #2
 80084ee:	e0f2      	b.n	80086d6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f6:	d104      	bne.n	8008502 <f_write+0x10e>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2201      	movs	r2, #1
 80084fc:	755a      	strb	r2, [r3, #21]
 80084fe:	2301      	movs	r3, #1
 8008500:	e0e9      	b.n	80086d6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008506:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d102      	bne.n	8008516 <f_write+0x122>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008514:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	7d1b      	ldrb	r3, [r3, #20]
 800851a:	b25b      	sxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	da18      	bge.n	8008552 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	7858      	ldrb	r0, [r3, #1]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a1a      	ldr	r2, [r3, #32]
 800852e:	2301      	movs	r3, #1
 8008530:	f7fd fca0 	bl	8005e74 <disk_write>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <f_write+0x150>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	755a      	strb	r2, [r3, #21]
 8008540:	2301      	movs	r3, #1
 8008542:	e0c8      	b.n	80086d6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	7d1b      	ldrb	r3, [r3, #20]
 8008548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800854c:	b2da      	uxtb	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f7fe f814 	bl	8006588 <clust2sect>
 8008560:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d104      	bne.n	8008572 <f_write+0x17e>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2202      	movs	r2, #2
 800856c:	755a      	strb	r2, [r3, #21]
 800856e:	2302      	movs	r3, #2
 8008570:	e0b1      	b.n	80086d6 <f_write+0x2e2>
			sect += csect;
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	4413      	add	r3, r2
 8008578:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	0a5b      	lsrs	r3, r3, #9
 800857e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d03c      	beq.n	8008600 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	4413      	add	r3, r2
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	8952      	ldrh	r2, [r2, #10]
 8008590:	4293      	cmp	r3, r2
 8008592:	d905      	bls.n	80085a0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	895b      	ldrh	r3, [r3, #10]
 8008598:	461a      	mov	r2, r3
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	7858      	ldrb	r0, [r3, #1]
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	69f9      	ldr	r1, [r7, #28]
 80085aa:	f7fd fc63 	bl	8005e74 <disk_write>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <f_write+0x1ca>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2201      	movs	r2, #1
 80085b8:	755a      	strb	r2, [r3, #21]
 80085ba:	2301      	movs	r3, #1
 80085bc:	e08b      	b.n	80086d6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a1a      	ldr	r2, [r3, #32]
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	6a3a      	ldr	r2, [r7, #32]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d915      	bls.n	80085f8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a1a      	ldr	r2, [r3, #32]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	025b      	lsls	r3, r3, #9
 80085dc:	69fa      	ldr	r2, [r7, #28]
 80085de:	4413      	add	r3, r2
 80085e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085e4:	4619      	mov	r1, r3
 80085e6:	f7fd fd05 	bl	8005ff4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	7d1b      	ldrb	r3, [r3, #20]
 80085ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	025b      	lsls	r3, r3, #9
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80085fe:	e03f      	b.n	8008680 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6a1b      	ldr	r3, [r3, #32]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	429a      	cmp	r2, r3
 8008608:	d016      	beq.n	8008638 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008612:	429a      	cmp	r2, r3
 8008614:	d210      	bcs.n	8008638 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	7858      	ldrb	r0, [r3, #1]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008620:	2301      	movs	r3, #1
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	f7fd fc06 	bl	8005e34 <disk_read>
 8008628:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800862a:	2b00      	cmp	r3, #0
 800862c:	d004      	beq.n	8008638 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	755a      	strb	r2, [r3, #21]
 8008634:	2301      	movs	r3, #1
 8008636:	e04e      	b.n	80086d6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008646:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800864c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	429a      	cmp	r2, r3
 8008652:	d901      	bls.n	8008658 <f_write+0x264>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008666:	4413      	add	r3, r2
 8008668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866a:	69f9      	ldr	r1, [r7, #28]
 800866c:	4618      	mov	r0, r3
 800866e:	f7fd fcc1 	bl	8005ff4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	7d1b      	ldrb	r3, [r3, #20]
 8008676:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800867a:	b2da      	uxtb	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	4413      	add	r3, r2
 8008686:	61fb      	str	r3, [r7, #28]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	699a      	ldr	r2, [r3, #24]
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	441a      	add	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	619a      	str	r2, [r3, #24]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	429a      	cmp	r2, r3
 800869e:	bf38      	it	cc
 80086a0:	461a      	movcc	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	60da      	str	r2, [r3, #12]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	441a      	add	r2, r3
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f47f aed4 	bne.w	800846a <f_write+0x76>
 80086c2:	e000      	b.n	80086c6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80086c4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	7d1b      	ldrb	r3, [r3, #20]
 80086ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3730      	adds	r7, #48	; 0x30
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b086      	sub	sp, #24
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f107 0208 	add.w	r2, r7, #8
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff fc46 	bl	8007f80 <validate>
 80086f4:	4603      	mov	r3, r0
 80086f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d168      	bne.n	80087d0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7d1b      	ldrb	r3, [r3, #20]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d062      	beq.n	80087d0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7d1b      	ldrb	r3, [r3, #20]
 800870e:	b25b      	sxtb	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	da15      	bge.n	8008740 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	7858      	ldrb	r0, [r3, #1]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1a      	ldr	r2, [r3, #32]
 8008722:	2301      	movs	r3, #1
 8008724:	f7fd fba6 	bl	8005e74 <disk_write>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <f_sync+0x54>
 800872e:	2301      	movs	r3, #1
 8008730:	e04f      	b.n	80087d2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	7d1b      	ldrb	r3, [r3, #20]
 8008736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800873a:	b2da      	uxtb	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008740:	f7fd f998 	bl	8005a74 <get_fattime>
 8008744:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f7fd fe7e 	bl	8006450 <move_window>
 8008754:	4603      	mov	r3, r0
 8008756:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d138      	bne.n	80087d0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	330b      	adds	r3, #11
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	330b      	adds	r3, #11
 800876e:	f042 0220 	orr.w	r2, r2, #32
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6818      	ldr	r0, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	461a      	mov	r2, r3
 8008780:	68f9      	ldr	r1, [r7, #12]
 8008782:	f7fe fb89 	bl	8006e98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f103 021c 	add.w	r2, r3, #28
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	f7fd fc02 	bl	8005f9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3316      	adds	r3, #22
 800879c:	6939      	ldr	r1, [r7, #16]
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fd fbfc 	bl	8005f9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3312      	adds	r3, #18
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fd fbdb 	bl	8005f66 <st_word>
					fs->wflag = 1;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2201      	movs	r2, #1
 80087b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fd fe77 	bl	80064ac <sync_fs>
 80087be:	4603      	mov	r3, r0
 80087c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	7d1b      	ldrb	r3, [r3, #20]
 80087c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff ff7b 	bl	80086de <f_sync>
 80087e8:	4603      	mov	r3, r0
 80087ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d118      	bne.n	8008824 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f107 0208 	add.w	r2, r7, #8
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff fbc0 	bl	8007f80 <validate>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10c      	bne.n	8008824 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	4618      	mov	r0, r3
 8008810:	f7fd fd7a 	bl	8006308 <dec_lock>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d102      	bne.n	8008824 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b090      	sub	sp, #64	; 0x40
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f107 0208 	add.w	r2, r7, #8
 800883e:	4611      	mov	r1, r2
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fb9d 	bl	8007f80 <validate>
 8008846:	4603      	mov	r3, r0
 8008848:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800884c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008850:	2b00      	cmp	r3, #0
 8008852:	d103      	bne.n	800885c <f_lseek+0x2e>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	7d5b      	ldrb	r3, [r3, #21]
 8008858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800885c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <f_lseek+0x3c>
 8008864:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008868:	e1e6      	b.n	8008c38 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 80d1 	beq.w	8008a16 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887a:	d15a      	bne.n	8008932 <f_lseek+0x104>
			tbl = fp->cltbl;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	1d1a      	adds	r2, r3, #4
 8008886:	627a      	str	r2, [r7, #36]	; 0x24
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	2302      	movs	r3, #2
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	2b00      	cmp	r3, #0
 800889a:	d03a      	beq.n	8008912 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	2300      	movs	r3, #0
 80088a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	3302      	adds	r3, #2
 80088a8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b0:	3301      	adds	r3, #1
 80088b2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fd fe84 	bl	80065c6 <get_fat>
 80088be:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d804      	bhi.n	80088d0 <f_lseek+0xa2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2202      	movs	r2, #2
 80088ca:	755a      	strb	r2, [r3, #21]
 80088cc:	2302      	movs	r3, #2
 80088ce:	e1b3      	b.n	8008c38 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d6:	d104      	bne.n	80088e2 <f_lseek+0xb4>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	755a      	strb	r2, [r3, #21]
 80088de:	2301      	movs	r3, #1
 80088e0:	e1aa      	b.n	8008c38 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3301      	adds	r3, #1
 80088e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d0de      	beq.n	80088aa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80088ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d809      	bhi.n	8008908 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	1d1a      	adds	r2, r3, #4
 80088f8:	627a      	str	r2, [r7, #36]	; 0x24
 80088fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	1d1a      	adds	r2, r3, #4
 8008902:	627a      	str	r2, [r7, #36]	; 0x24
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890e:	429a      	cmp	r2, r3
 8008910:	d3c4      	bcc.n	800889c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008918:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800891a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	429a      	cmp	r2, r3
 8008920:	d803      	bhi.n	800892a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	e184      	b.n	8008c34 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800892a:	2311      	movs	r3, #17
 800892c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008930:	e180      	b.n	8008c34 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	429a      	cmp	r2, r3
 800893a:	d902      	bls.n	8008942 <f_lseek+0x114>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 8172 	beq.w	8008c34 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	3b01      	subs	r3, #1
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7fe f8c4 	bl	8006ae4 <clmt_clust>
 800895c:	4602      	mov	r2, r0
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fd fe0c 	bl	8006588 <clust2sect>
 8008970:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d104      	bne.n	8008982 <f_lseek+0x154>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	755a      	strb	r2, [r3, #21]
 800897e:	2302      	movs	r3, #2
 8008980:	e15a      	b.n	8008c38 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	3b01      	subs	r3, #1
 8008986:	0a5b      	lsrs	r3, r3, #9
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	8952      	ldrh	r2, [r2, #10]
 800898c:	3a01      	subs	r2, #1
 800898e:	4013      	ands	r3, r2
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	4413      	add	r3, r2
 8008994:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 8148 	beq.w	8008c34 <f_lseek+0x406>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	f000 8142 	beq.w	8008c34 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	7d1b      	ldrb	r3, [r3, #20]
 80089b4:	b25b      	sxtb	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	da18      	bge.n	80089ec <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	7858      	ldrb	r0, [r3, #1]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a1a      	ldr	r2, [r3, #32]
 80089c8:	2301      	movs	r3, #1
 80089ca:	f7fd fa53 	bl	8005e74 <disk_write>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d004      	beq.n	80089de <f_lseek+0x1b0>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	755a      	strb	r2, [r3, #21]
 80089da:	2301      	movs	r3, #1
 80089dc:	e12c      	b.n	8008c38 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	7d1b      	ldrb	r3, [r3, #20]
 80089e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	7858      	ldrb	r0, [r3, #1]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089f6:	2301      	movs	r3, #1
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	f7fd fa1b 	bl	8005e34 <disk_read>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d004      	beq.n	8008a0e <f_lseek+0x1e0>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	755a      	strb	r2, [r3, #21]
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e114      	b.n	8008c38 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	621a      	str	r2, [r3, #32]
 8008a14:	e10e      	b.n	8008c34 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d908      	bls.n	8008a32 <f_lseek+0x204>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	7d1b      	ldrb	r3, [r3, #20]
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d102      	bne.n	8008a32 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a40:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 80a7 	beq.w	8008b98 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	895b      	ldrh	r3, [r3, #10]
 8008a4e:	025b      	lsls	r3, r3, #9
 8008a50:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d01b      	beq.n	8008a90 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	1e5a      	subs	r2, r3, #1
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	1e59      	subs	r1, r3, #1
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d30f      	bcc.n	8008a90 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	1e5a      	subs	r2, r3, #1
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	425b      	negs	r3, r3
 8008a78:	401a      	ands	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a8e:	e022      	b.n	8008ad6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d119      	bne.n	8008ad0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fd ff87 	bl	80069b4 <create_chain>
 8008aa6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d104      	bne.n	8008ab8 <f_lseek+0x28a>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	755a      	strb	r2, [r3, #21]
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e0bf      	b.n	8008c38 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008abe:	d104      	bne.n	8008aca <f_lseek+0x29c>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	755a      	strb	r2, [r3, #21]
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e0b6      	b.n	8008c38 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ace:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ad4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d05d      	beq.n	8008b98 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008adc:	e03a      	b.n	8008b54 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	603b      	str	r3, [r7, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699a      	ldr	r2, [r3, #24]
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	441a      	add	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	7d1b      	ldrb	r3, [r3, #20]
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fd ff56 	bl	80069b4 <create_chain>
 8008b08:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d108      	bne.n	8008b22 <f_lseek+0x2f4>
							ofs = 0; break;
 8008b10:	2300      	movs	r3, #0
 8008b12:	603b      	str	r3, [r7, #0]
 8008b14:	e022      	b.n	8008b5c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fd fd53 	bl	80065c6 <get_fat>
 8008b20:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b28:	d104      	bne.n	8008b34 <f_lseek+0x306>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	755a      	strb	r2, [r3, #21]
 8008b30:	2301      	movs	r3, #1
 8008b32:	e081      	b.n	8008c38 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d904      	bls.n	8008b44 <f_lseek+0x316>
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d304      	bcc.n	8008b4e <f_lseek+0x320>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	755a      	strb	r2, [r3, #21]
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	e074      	b.n	8008c38 <f_lseek+0x40a>
					fp->clust = clst;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b52:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d8c0      	bhi.n	8008ade <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699a      	ldr	r2, [r3, #24]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	441a      	add	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d012      	beq.n	8008b98 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fd fd06 	bl	8006588 <clust2sect>
 8008b7c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d104      	bne.n	8008b8e <f_lseek+0x360>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	755a      	strb	r2, [r3, #21]
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e054      	b.n	8008c38 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	0a5b      	lsrs	r3, r3, #9
 8008b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b94:	4413      	add	r3, r2
 8008b96:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	699a      	ldr	r2, [r3, #24]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d90a      	bls.n	8008bba <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	699a      	ldr	r2, [r3, #24]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	7d1b      	ldrb	r3, [r3, #20]
 8008bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d036      	beq.n	8008c34 <f_lseek+0x406>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d031      	beq.n	8008c34 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	7d1b      	ldrb	r3, [r3, #20]
 8008bd4:	b25b      	sxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da18      	bge.n	8008c0c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	7858      	ldrb	r0, [r3, #1]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a1a      	ldr	r2, [r3, #32]
 8008be8:	2301      	movs	r3, #1
 8008bea:	f7fd f943 	bl	8005e74 <disk_write>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d004      	beq.n	8008bfe <f_lseek+0x3d0>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	755a      	strb	r2, [r3, #21]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e01c      	b.n	8008c38 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	7d1b      	ldrb	r3, [r3, #20]
 8008c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	7858      	ldrb	r0, [r3, #1]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c16:	2301      	movs	r3, #1
 8008c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c1a:	f7fd f90b 	bl	8005e34 <disk_read>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <f_lseek+0x400>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	755a      	strb	r2, [r3, #21]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e004      	b.n	8008c38 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c32:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008c34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3740      	adds	r7, #64	; 0x40
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	db25      	blt.n	8008ca4 <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	60fa      	str	r2, [r7, #12]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	4413      	add	r3, r2
 8008c62:	78fa      	ldrb	r2, [r7, #3]
 8008c64:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b3c      	cmp	r3, #60	; 0x3c
 8008c6a:	dd12      	ble.n	8008c92 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6818      	ldr	r0, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f103 010c 	add.w	r1, r3, #12
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	f107 0308 	add.w	r3, r7, #8
 8008c7c:	f7ff fbba 	bl	80083f4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d101      	bne.n	8008c8c <putc_bfd+0x4c>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e001      	b.n	8008c90 <putc_bfd+0x50>
 8008c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c90:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	609a      	str	r2, [r3, #8]
 8008ca2:	e000      	b.n	8008ca6 <putc_bfd+0x66>
	if (i < 0) return;
 8008ca4:	bf00      	nop
}
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	db16      	blt.n	8008cea <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6818      	ldr	r0, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f103 010c 	add.w	r1, r3, #12
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f107 030c 	add.w	r3, r7, #12
 8008cd0:	f7ff fb90 	bl	80083f4 <f_write>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d107      	bne.n	8008cea <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d102      	bne.n	8008cea <putc_flush+0x3e>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	e001      	b.n	8008cee <putc_flush+0x42>
	return EOF;
 8008cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	605a      	str	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	609a      	str	r2, [r3, #8]
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008d20:	b40e      	push	{r1, r2, r3}
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b0a7      	sub	sp, #156	; 0x9c
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8008d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff ffe0 	bl	8008cf6 <putc_init>

	va_start(arp, fmt);
 8008d36:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008d3a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8008d3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8008d4c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 81f2 	beq.w	800913a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8008d56:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008d5a:	2b25      	cmp	r3, #37	; 0x25
 8008d5c:	d008      	beq.n	8008d70 <f_printf+0x50>
			putc_bfd(&pb, c);
 8008d5e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d66:	4611      	mov	r1, r2
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff ff69 	bl	8008c40 <putc_bfd>
			continue;
 8008d6e:	e1e3      	b.n	8009138 <f_printf+0x418>
		}
		w = f = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008d76:	2300      	movs	r3, #0
 8008d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8008d7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8008d8c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008d90:	2b30      	cmp	r3, #48	; 0x30
 8008d92:	d10b      	bne.n	8008dac <f_printf+0x8c>
			f = 1; c = *fmt++;
 8008d94:	2301      	movs	r3, #1
 8008d96:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8008daa:	e024      	b.n	8008df6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8008dac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008db0:	2b2d      	cmp	r3, #45	; 0x2d
 8008db2:	d120      	bne.n	8008df6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8008db4:	2302      	movs	r3, #2
 8008db6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8008dca:	e014      	b.n	8008df6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8008dcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	461a      	mov	r2, r3
 8008dda:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008dde:	4413      	add	r3, r2
 8008de0:	3b30      	subs	r3, #48	; 0x30
 8008de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8008de6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8008df6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008dfa:	2b2f      	cmp	r3, #47	; 0x2f
 8008dfc:	d903      	bls.n	8008e06 <f_printf+0xe6>
 8008dfe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e02:	2b39      	cmp	r3, #57	; 0x39
 8008e04:	d9e2      	bls.n	8008dcc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8008e06:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e0a:	2b6c      	cmp	r3, #108	; 0x6c
 8008e0c:	d003      	beq.n	8008e16 <f_printf+0xf6>
 8008e0e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e12:	2b4c      	cmp	r3, #76	; 0x4c
 8008e14:	d10d      	bne.n	8008e32 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8008e16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008e1a:	f043 0304 	orr.w	r3, r3, #4
 8008e1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e26:	1c5a      	adds	r2, r3, #1
 8008e28:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8008e32:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 8181 	beq.w	800913e <f_printf+0x41e>
		d = c;
 8008e3c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e40:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8008e44:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008e48:	2b60      	cmp	r3, #96	; 0x60
 8008e4a:	d908      	bls.n	8008e5e <f_printf+0x13e>
 8008e4c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008e50:	2b7a      	cmp	r3, #122	; 0x7a
 8008e52:	d804      	bhi.n	8008e5e <f_printf+0x13e>
 8008e54:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008e58:	3b20      	subs	r3, #32
 8008e5a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8008e5e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008e62:	3b42      	subs	r3, #66	; 0x42
 8008e64:	2b16      	cmp	r3, #22
 8008e66:	f200 8098 	bhi.w	8008f9a <f_printf+0x27a>
 8008e6a:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <f_printf+0x150>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008f7b 	.word	0x08008f7b
 8008e74:	08008f63 	.word	0x08008f63
 8008e78:	08008f8b 	.word	0x08008f8b
 8008e7c:	08008f9b 	.word	0x08008f9b
 8008e80:	08008f9b 	.word	0x08008f9b
 8008e84:	08008f9b 	.word	0x08008f9b
 8008e88:	08008f9b 	.word	0x08008f9b
 8008e8c:	08008f9b 	.word	0x08008f9b
 8008e90:	08008f9b 	.word	0x08008f9b
 8008e94:	08008f9b 	.word	0x08008f9b
 8008e98:	08008f9b 	.word	0x08008f9b
 8008e9c:	08008f9b 	.word	0x08008f9b
 8008ea0:	08008f9b 	.word	0x08008f9b
 8008ea4:	08008f83 	.word	0x08008f83
 8008ea8:	08008f9b 	.word	0x08008f9b
 8008eac:	08008f9b 	.word	0x08008f9b
 8008eb0:	08008f9b 	.word	0x08008f9b
 8008eb4:	08008ecd 	.word	0x08008ecd
 8008eb8:	08008f9b 	.word	0x08008f9b
 8008ebc:	08008f8b 	.word	0x08008f8b
 8008ec0:	08008f9b 	.word	0x08008f9b
 8008ec4:	08008f9b 	.word	0x08008f9b
 8008ec8:	08008f93 	.word	0x08008f93
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ece:	1d1a      	adds	r2, r3, #4
 8008ed0:	67ba      	str	r2, [r7, #120]	; 0x78
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008edc:	e004      	b.n	8008ee8 <f_printf+0x1c8>
 8008ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008ee8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eee:	4413      	add	r3, r2
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1f3      	bne.n	8008ede <f_printf+0x1be>
			if (!(f & 2)) {
 8008ef6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d11a      	bne.n	8008f38 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008f02:	e005      	b.n	8008f10 <f_printf+0x1f0>
 8008f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f08:	2120      	movs	r1, #32
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff fe98 	bl	8008c40 <putc_bfd>
 8008f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d8f0      	bhi.n	8008f04 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008f22:	e009      	b.n	8008f38 <f_printf+0x218>
 8008f24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f2a:	781a      	ldrb	r2, [r3, #0]
 8008f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f30:	4611      	mov	r1, r2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7ff fe84 	bl	8008c40 <putc_bfd>
 8008f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f1      	bne.n	8008f24 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008f40:	e005      	b.n	8008f4e <f_printf+0x22e>
 8008f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f46:	2120      	movs	r1, #32
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7ff fe79 	bl	8008c40 <putc_bfd>
 8008f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f58:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d8f0      	bhi.n	8008f42 <f_printf+0x222>
			continue;
 8008f60:	e0ea      	b.n	8009138 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f64:	1d1a      	adds	r2, r3, #4
 8008f66:	67ba      	str	r2, [r7, #120]	; 0x78
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f70:	4611      	mov	r1, r2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff fe64 	bl	8008c40 <putc_bfd>
 8008f78:	e0de      	b.n	8009138 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008f80:	e014      	b.n	8008fac <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8008f82:	2308      	movs	r3, #8
 8008f84:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008f88:	e010      	b.n	8008fac <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8008f8a:	230a      	movs	r3, #10
 8008f8c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008f90:	e00c      	b.n	8008fac <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8008f92:	2310      	movs	r3, #16
 8008f94:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008f98:	e008      	b.n	8008fac <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8008f9a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff fe4b 	bl	8008c40 <putc_bfd>
 8008faa:	e0c5      	b.n	8009138 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008fac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d004      	beq.n	8008fc2 <f_printf+0x2a2>
 8008fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fba:	1d1a      	adds	r2, r3, #4
 8008fbc:	67ba      	str	r2, [r7, #120]	; 0x78
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	e00c      	b.n	8008fdc <f_printf+0x2bc>
 8008fc2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008fc6:	2b44      	cmp	r3, #68	; 0x44
 8008fc8:	d104      	bne.n	8008fd4 <f_printf+0x2b4>
 8008fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fcc:	1d1a      	adds	r2, r3, #4
 8008fce:	67ba      	str	r2, [r7, #120]	; 0x78
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	e003      	b.n	8008fdc <f_printf+0x2bc>
 8008fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fd6:	1d1a      	adds	r2, r3, #4
 8008fd8:	67ba      	str	r2, [r7, #120]	; 0x78
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8008fe0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008fe4:	2b44      	cmp	r3, #68	; 0x44
 8008fe6:	d10e      	bne.n	8009006 <f_printf+0x2e6>
 8008fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	da0a      	bge.n	8009006 <f_printf+0x2e6>
			v = 0 - v;
 8008ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ff4:	425b      	negs	r3, r3
 8008ff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8008ffa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008ffe:	f043 0308 	orr.w	r3, r3, #8
 8009002:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800900c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8009010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009014:	fbb3 f1f2 	udiv	r1, r3, r2
 8009018:	fb01 f202 	mul.w	r2, r1, r2
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8009022:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8009026:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800902a:	fbb2 f3f3 	udiv	r3, r2, r3
 800902e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8009032:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009036:	2b09      	cmp	r3, #9
 8009038:	d90b      	bls.n	8009052 <f_printf+0x332>
 800903a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800903e:	2b78      	cmp	r3, #120	; 0x78
 8009040:	d101      	bne.n	8009046 <f_printf+0x326>
 8009042:	2227      	movs	r2, #39	; 0x27
 8009044:	e000      	b.n	8009048 <f_printf+0x328>
 8009046:	2207      	movs	r2, #7
 8009048:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800904c:	4413      	add	r3, r2
 800904e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8009052:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800905c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009060:	3230      	adds	r2, #48	; 0x30
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	3398      	adds	r3, #152	; 0x98
 8009066:	443b      	add	r3, r7
 8009068:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800906c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <f_printf+0x35c>
 8009074:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009078:	2b1f      	cmp	r3, #31
 800907a:	d9c7      	bls.n	800900c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800907c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b00      	cmp	r3, #0
 8009086:	d009      	beq.n	800909c <f_printf+0x37c>
 8009088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009092:	3398      	adds	r3, #152	; 0x98
 8009094:	443b      	add	r3, r7
 8009096:	222d      	movs	r2, #45	; 0x2d
 8009098:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800909c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <f_printf+0x394>
 80090b0:	2330      	movs	r3, #48	; 0x30
 80090b2:	e000      	b.n	80090b6 <f_printf+0x396>
 80090b4:	2320      	movs	r3, #32
 80090b6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80090ba:	e007      	b.n	80090cc <f_printf+0x3ac>
 80090bc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80090c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090c4:	4611      	mov	r1, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7ff fdba 	bl	8008c40 <putc_bfd>
 80090cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d108      	bne.n	80090ea <f_printf+0x3ca>
 80090d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80090e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d8e8      	bhi.n	80090bc <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80090ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090ee:	3b01      	subs	r3, #1
 80090f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090f4:	f107 020c 	add.w	r2, r7, #12
 80090f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090fc:	4413      	add	r3, r2
 80090fe:	781a      	ldrb	r2, [r3, #0]
 8009100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fd9a 	bl	8008c40 <putc_bfd>
		} while (i);
 800910c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1ea      	bne.n	80090ea <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8009114:	e007      	b.n	8009126 <f_printf+0x406>
 8009116:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800911a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f7ff fd8d 	bl	8008c40 <putc_bfd>
 8009126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009130:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009134:	429a      	cmp	r2, r3
 8009136:	d8ee      	bhi.n	8009116 <f_printf+0x3f6>
		c = *fmt++;
 8009138:	e600      	b.n	8008d3c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800913a:	bf00      	nop
 800913c:	e000      	b.n	8009140 <f_printf+0x420>
		if (!c) break;
 800913e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8009140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff fdb1 	bl	8008cac <putc_flush>
 800914a:	4603      	mov	r3, r0
}
 800914c:	4618      	mov	r0, r3
 800914e:	379c      	adds	r7, #156	; 0x9c
 8009150:	46bd      	mov	sp, r7
 8009152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009156:	b003      	add	sp, #12
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop

0800915c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	4613      	mov	r3, r2
 8009168:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800916a:	2301      	movs	r3, #1
 800916c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009172:	4b1f      	ldr	r3, [pc, #124]	; (80091f0 <FATFS_LinkDriverEx+0x94>)
 8009174:	7a5b      	ldrb	r3, [r3, #9]
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d131      	bne.n	80091e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800917c:	4b1c      	ldr	r3, [pc, #112]	; (80091f0 <FATFS_LinkDriverEx+0x94>)
 800917e:	7a5b      	ldrb	r3, [r3, #9]
 8009180:	b2db      	uxtb	r3, r3
 8009182:	461a      	mov	r2, r3
 8009184:	4b1a      	ldr	r3, [pc, #104]	; (80091f0 <FATFS_LinkDriverEx+0x94>)
 8009186:	2100      	movs	r1, #0
 8009188:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800918a:	4b19      	ldr	r3, [pc, #100]	; (80091f0 <FATFS_LinkDriverEx+0x94>)
 800918c:	7a5b      	ldrb	r3, [r3, #9]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	4a17      	ldr	r2, [pc, #92]	; (80091f0 <FATFS_LinkDriverEx+0x94>)
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800919a:	4b15      	ldr	r3, [pc, #84]	; (80091f0 <FATFS_LinkDriverEx+0x94>)
 800919c:	7a5b      	ldrb	r3, [r3, #9]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	461a      	mov	r2, r3
 80091a2:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <FATFS_LinkDriverEx+0x94>)
 80091a4:	4413      	add	r3, r2
 80091a6:	79fa      	ldrb	r2, [r7, #7]
 80091a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80091aa:	4b11      	ldr	r3, [pc, #68]	; (80091f0 <FATFS_LinkDriverEx+0x94>)
 80091ac:	7a5b      	ldrb	r3, [r3, #9]
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	b2d1      	uxtb	r1, r2
 80091b4:	4a0e      	ldr	r2, [pc, #56]	; (80091f0 <FATFS_LinkDriverEx+0x94>)
 80091b6:	7251      	strb	r1, [r2, #9]
 80091b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80091ba:	7dbb      	ldrb	r3, [r7, #22]
 80091bc:	3330      	adds	r3, #48	; 0x30
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	3301      	adds	r3, #1
 80091c8:	223a      	movs	r2, #58	; 0x3a
 80091ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	3302      	adds	r3, #2
 80091d0:	222f      	movs	r2, #47	; 0x2f
 80091d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	3303      	adds	r3, #3
 80091d8:	2200      	movs	r2, #0
 80091da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	20001acc 	.word	0x20001acc

080091f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80091fe:	2200      	movs	r2, #0
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff ffaa 	bl	800915c <FATFS_LinkDriverEx>
 8009208:	4603      	mov	r3, r0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	6039      	str	r1, [r7, #0]
 800921e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	2b7f      	cmp	r3, #127	; 0x7f
 8009224:	d802      	bhi.n	800922c <ff_convert+0x18>
		c = chr;
 8009226:	88fb      	ldrh	r3, [r7, #6]
 8009228:	81fb      	strh	r3, [r7, #14]
 800922a:	e025      	b.n	8009278 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	2bff      	cmp	r3, #255	; 0xff
 8009236:	d805      	bhi.n	8009244 <ff_convert+0x30>
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	3b80      	subs	r3, #128	; 0x80
 800923c:	4a12      	ldr	r2, [pc, #72]	; (8009288 <ff_convert+0x74>)
 800923e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009242:	e000      	b.n	8009246 <ff_convert+0x32>
 8009244:	2300      	movs	r3, #0
 8009246:	81fb      	strh	r3, [r7, #14]
 8009248:	e016      	b.n	8009278 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800924a:	2300      	movs	r3, #0
 800924c:	81fb      	strh	r3, [r7, #14]
 800924e:	e009      	b.n	8009264 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009250:	89fb      	ldrh	r3, [r7, #14]
 8009252:	4a0d      	ldr	r2, [pc, #52]	; (8009288 <ff_convert+0x74>)
 8009254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009258:	88fa      	ldrh	r2, [r7, #6]
 800925a:	429a      	cmp	r2, r3
 800925c:	d006      	beq.n	800926c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800925e:	89fb      	ldrh	r3, [r7, #14]
 8009260:	3301      	adds	r3, #1
 8009262:	81fb      	strh	r3, [r7, #14]
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	2b7f      	cmp	r3, #127	; 0x7f
 8009268:	d9f2      	bls.n	8009250 <ff_convert+0x3c>
 800926a:	e000      	b.n	800926e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800926c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800926e:	89fb      	ldrh	r3, [r7, #14]
 8009270:	3380      	adds	r3, #128	; 0x80
 8009272:	b29b      	uxth	r3, r3
 8009274:	b2db      	uxtb	r3, r3
 8009276:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009278:	89fb      	ldrh	r3, [r7, #14]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	0800a52c 	.word	0x0800a52c

0800928c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009296:	88fb      	ldrh	r3, [r7, #6]
 8009298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800929c:	d201      	bcs.n	80092a2 <ff_wtoupper+0x16>
 800929e:	4b3e      	ldr	r3, [pc, #248]	; (8009398 <ff_wtoupper+0x10c>)
 80092a0:	e000      	b.n	80092a4 <ff_wtoupper+0x18>
 80092a2:	4b3e      	ldr	r3, [pc, #248]	; (800939c <ff_wtoupper+0x110>)
 80092a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	1c9a      	adds	r2, r3, #2
 80092aa:	617a      	str	r2, [r7, #20]
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80092b0:	8a7b      	ldrh	r3, [r7, #18]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d068      	beq.n	8009388 <ff_wtoupper+0xfc>
 80092b6:	88fa      	ldrh	r2, [r7, #6]
 80092b8:	8a7b      	ldrh	r3, [r7, #18]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d364      	bcc.n	8009388 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	1c9a      	adds	r2, r3, #2
 80092c2:	617a      	str	r2, [r7, #20]
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	823b      	strh	r3, [r7, #16]
 80092c8:	8a3b      	ldrh	r3, [r7, #16]
 80092ca:	0a1b      	lsrs	r3, r3, #8
 80092cc:	81fb      	strh	r3, [r7, #14]
 80092ce:	8a3b      	ldrh	r3, [r7, #16]
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80092d4:	88fa      	ldrh	r2, [r7, #6]
 80092d6:	8a79      	ldrh	r1, [r7, #18]
 80092d8:	8a3b      	ldrh	r3, [r7, #16]
 80092da:	440b      	add	r3, r1
 80092dc:	429a      	cmp	r2, r3
 80092de:	da49      	bge.n	8009374 <ff_wtoupper+0xe8>
			switch (cmd) {
 80092e0:	89fb      	ldrh	r3, [r7, #14]
 80092e2:	2b08      	cmp	r3, #8
 80092e4:	d84f      	bhi.n	8009386 <ff_wtoupper+0xfa>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <ff_wtoupper+0x60>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	08009311 	.word	0x08009311
 80092f0:	08009323 	.word	0x08009323
 80092f4:	08009339 	.word	0x08009339
 80092f8:	08009341 	.word	0x08009341
 80092fc:	08009349 	.word	0x08009349
 8009300:	08009351 	.word	0x08009351
 8009304:	08009359 	.word	0x08009359
 8009308:	08009361 	.word	0x08009361
 800930c:	08009369 	.word	0x08009369
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009310:	88fa      	ldrh	r2, [r7, #6]
 8009312:	8a7b      	ldrh	r3, [r7, #18]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	4413      	add	r3, r2
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	80fb      	strh	r3, [r7, #6]
 8009320:	e027      	b.n	8009372 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009322:	88fa      	ldrh	r2, [r7, #6]
 8009324:	8a7b      	ldrh	r3, [r7, #18]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	b29b      	uxth	r3, r3
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	b29b      	uxth	r3, r3
 8009330:	88fa      	ldrh	r2, [r7, #6]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	80fb      	strh	r3, [r7, #6]
 8009336:	e01c      	b.n	8009372 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009338:	88fb      	ldrh	r3, [r7, #6]
 800933a:	3b10      	subs	r3, #16
 800933c:	80fb      	strh	r3, [r7, #6]
 800933e:	e018      	b.n	8009372 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009340:	88fb      	ldrh	r3, [r7, #6]
 8009342:	3b20      	subs	r3, #32
 8009344:	80fb      	strh	r3, [r7, #6]
 8009346:	e014      	b.n	8009372 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009348:	88fb      	ldrh	r3, [r7, #6]
 800934a:	3b30      	subs	r3, #48	; 0x30
 800934c:	80fb      	strh	r3, [r7, #6]
 800934e:	e010      	b.n	8009372 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009350:	88fb      	ldrh	r3, [r7, #6]
 8009352:	3b1a      	subs	r3, #26
 8009354:	80fb      	strh	r3, [r7, #6]
 8009356:	e00c      	b.n	8009372 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009358:	88fb      	ldrh	r3, [r7, #6]
 800935a:	3308      	adds	r3, #8
 800935c:	80fb      	strh	r3, [r7, #6]
 800935e:	e008      	b.n	8009372 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009360:	88fb      	ldrh	r3, [r7, #6]
 8009362:	3b50      	subs	r3, #80	; 0x50
 8009364:	80fb      	strh	r3, [r7, #6]
 8009366:	e004      	b.n	8009372 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009368:	88fb      	ldrh	r3, [r7, #6]
 800936a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800936e:	80fb      	strh	r3, [r7, #6]
 8009370:	bf00      	nop
			}
			break;
 8009372:	e008      	b.n	8009386 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009374:	89fb      	ldrh	r3, [r7, #14]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d195      	bne.n	80092a6 <ff_wtoupper+0x1a>
 800937a:	8a3b      	ldrh	r3, [r7, #16]
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	4413      	add	r3, r2
 8009382:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009384:	e78f      	b.n	80092a6 <ff_wtoupper+0x1a>
			break;
 8009386:	bf00      	nop
	}

	return chr;
 8009388:	88fb      	ldrh	r3, [r7, #6]
}
 800938a:	4618      	mov	r0, r3
 800938c:	371c      	adds	r7, #28
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	0800a62c 	.word	0x0800a62c
 800939c:	0800a820 	.word	0x0800a820

080093a0 <std>:
 80093a0:	2300      	movs	r3, #0
 80093a2:	b510      	push	{r4, lr}
 80093a4:	4604      	mov	r4, r0
 80093a6:	e9c0 3300 	strd	r3, r3, [r0]
 80093aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093ae:	6083      	str	r3, [r0, #8]
 80093b0:	8181      	strh	r1, [r0, #12]
 80093b2:	6643      	str	r3, [r0, #100]	; 0x64
 80093b4:	81c2      	strh	r2, [r0, #14]
 80093b6:	6183      	str	r3, [r0, #24]
 80093b8:	4619      	mov	r1, r3
 80093ba:	2208      	movs	r2, #8
 80093bc:	305c      	adds	r0, #92	; 0x5c
 80093be:	f000 f9f7 	bl	80097b0 <memset>
 80093c2:	4b0d      	ldr	r3, [pc, #52]	; (80093f8 <std+0x58>)
 80093c4:	6263      	str	r3, [r4, #36]	; 0x24
 80093c6:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <std+0x5c>)
 80093c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80093ca:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <std+0x60>)
 80093cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093ce:	4b0d      	ldr	r3, [pc, #52]	; (8009404 <std+0x64>)
 80093d0:	6323      	str	r3, [r4, #48]	; 0x30
 80093d2:	4b0d      	ldr	r3, [pc, #52]	; (8009408 <std+0x68>)
 80093d4:	6224      	str	r4, [r4, #32]
 80093d6:	429c      	cmp	r4, r3
 80093d8:	d006      	beq.n	80093e8 <std+0x48>
 80093da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80093de:	4294      	cmp	r4, r2
 80093e0:	d002      	beq.n	80093e8 <std+0x48>
 80093e2:	33d0      	adds	r3, #208	; 0xd0
 80093e4:	429c      	cmp	r4, r3
 80093e6:	d105      	bne.n	80093f4 <std+0x54>
 80093e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093f0:	f000 ba56 	b.w	80098a0 <__retarget_lock_init_recursive>
 80093f4:	bd10      	pop	{r4, pc}
 80093f6:	bf00      	nop
 80093f8:	08009601 	.word	0x08009601
 80093fc:	08009623 	.word	0x08009623
 8009400:	0800965b 	.word	0x0800965b
 8009404:	0800967f 	.word	0x0800967f
 8009408:	20001ad8 	.word	0x20001ad8

0800940c <stdio_exit_handler>:
 800940c:	4a02      	ldr	r2, [pc, #8]	; (8009418 <stdio_exit_handler+0xc>)
 800940e:	4903      	ldr	r1, [pc, #12]	; (800941c <stdio_exit_handler+0x10>)
 8009410:	4803      	ldr	r0, [pc, #12]	; (8009420 <stdio_exit_handler+0x14>)
 8009412:	f000 b869 	b.w	80094e8 <_fwalk_sglue>
 8009416:	bf00      	nop
 8009418:	20000048 	.word	0x20000048
 800941c:	0800a14d 	.word	0x0800a14d
 8009420:	20000054 	.word	0x20000054

08009424 <cleanup_stdio>:
 8009424:	6841      	ldr	r1, [r0, #4]
 8009426:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <cleanup_stdio+0x34>)
 8009428:	4299      	cmp	r1, r3
 800942a:	b510      	push	{r4, lr}
 800942c:	4604      	mov	r4, r0
 800942e:	d001      	beq.n	8009434 <cleanup_stdio+0x10>
 8009430:	f000 fe8c 	bl	800a14c <_fflush_r>
 8009434:	68a1      	ldr	r1, [r4, #8]
 8009436:	4b09      	ldr	r3, [pc, #36]	; (800945c <cleanup_stdio+0x38>)
 8009438:	4299      	cmp	r1, r3
 800943a:	d002      	beq.n	8009442 <cleanup_stdio+0x1e>
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fe85 	bl	800a14c <_fflush_r>
 8009442:	68e1      	ldr	r1, [r4, #12]
 8009444:	4b06      	ldr	r3, [pc, #24]	; (8009460 <cleanup_stdio+0x3c>)
 8009446:	4299      	cmp	r1, r3
 8009448:	d004      	beq.n	8009454 <cleanup_stdio+0x30>
 800944a:	4620      	mov	r0, r4
 800944c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009450:	f000 be7c 	b.w	800a14c <_fflush_r>
 8009454:	bd10      	pop	{r4, pc}
 8009456:	bf00      	nop
 8009458:	20001ad8 	.word	0x20001ad8
 800945c:	20001b40 	.word	0x20001b40
 8009460:	20001ba8 	.word	0x20001ba8

08009464 <global_stdio_init.part.0>:
 8009464:	b510      	push	{r4, lr}
 8009466:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <global_stdio_init.part.0+0x30>)
 8009468:	4c0b      	ldr	r4, [pc, #44]	; (8009498 <global_stdio_init.part.0+0x34>)
 800946a:	4a0c      	ldr	r2, [pc, #48]	; (800949c <global_stdio_init.part.0+0x38>)
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	4620      	mov	r0, r4
 8009470:	2200      	movs	r2, #0
 8009472:	2104      	movs	r1, #4
 8009474:	f7ff ff94 	bl	80093a0 <std>
 8009478:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800947c:	2201      	movs	r2, #1
 800947e:	2109      	movs	r1, #9
 8009480:	f7ff ff8e 	bl	80093a0 <std>
 8009484:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009488:	2202      	movs	r2, #2
 800948a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800948e:	2112      	movs	r1, #18
 8009490:	f7ff bf86 	b.w	80093a0 <std>
 8009494:	20001c10 	.word	0x20001c10
 8009498:	20001ad8 	.word	0x20001ad8
 800949c:	0800940d 	.word	0x0800940d

080094a0 <__sfp_lock_acquire>:
 80094a0:	4801      	ldr	r0, [pc, #4]	; (80094a8 <__sfp_lock_acquire+0x8>)
 80094a2:	f000 b9fe 	b.w	80098a2 <__retarget_lock_acquire_recursive>
 80094a6:	bf00      	nop
 80094a8:	20001c19 	.word	0x20001c19

080094ac <__sfp_lock_release>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__sfp_lock_release+0x8>)
 80094ae:	f000 b9f9 	b.w	80098a4 <__retarget_lock_release_recursive>
 80094b2:	bf00      	nop
 80094b4:	20001c19 	.word	0x20001c19

080094b8 <__sinit>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	4604      	mov	r4, r0
 80094bc:	f7ff fff0 	bl	80094a0 <__sfp_lock_acquire>
 80094c0:	6a23      	ldr	r3, [r4, #32]
 80094c2:	b11b      	cbz	r3, 80094cc <__sinit+0x14>
 80094c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094c8:	f7ff bff0 	b.w	80094ac <__sfp_lock_release>
 80094cc:	4b04      	ldr	r3, [pc, #16]	; (80094e0 <__sinit+0x28>)
 80094ce:	6223      	str	r3, [r4, #32]
 80094d0:	4b04      	ldr	r3, [pc, #16]	; (80094e4 <__sinit+0x2c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1f5      	bne.n	80094c4 <__sinit+0xc>
 80094d8:	f7ff ffc4 	bl	8009464 <global_stdio_init.part.0>
 80094dc:	e7f2      	b.n	80094c4 <__sinit+0xc>
 80094de:	bf00      	nop
 80094e0:	08009425 	.word	0x08009425
 80094e4:	20001c10 	.word	0x20001c10

080094e8 <_fwalk_sglue>:
 80094e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ec:	4607      	mov	r7, r0
 80094ee:	4688      	mov	r8, r1
 80094f0:	4614      	mov	r4, r2
 80094f2:	2600      	movs	r6, #0
 80094f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094f8:	f1b9 0901 	subs.w	r9, r9, #1
 80094fc:	d505      	bpl.n	800950a <_fwalk_sglue+0x22>
 80094fe:	6824      	ldr	r4, [r4, #0]
 8009500:	2c00      	cmp	r4, #0
 8009502:	d1f7      	bne.n	80094f4 <_fwalk_sglue+0xc>
 8009504:	4630      	mov	r0, r6
 8009506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950a:	89ab      	ldrh	r3, [r5, #12]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d907      	bls.n	8009520 <_fwalk_sglue+0x38>
 8009510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009514:	3301      	adds	r3, #1
 8009516:	d003      	beq.n	8009520 <_fwalk_sglue+0x38>
 8009518:	4629      	mov	r1, r5
 800951a:	4638      	mov	r0, r7
 800951c:	47c0      	blx	r8
 800951e:	4306      	orrs	r6, r0
 8009520:	3568      	adds	r5, #104	; 0x68
 8009522:	e7e9      	b.n	80094f8 <_fwalk_sglue+0x10>

08009524 <iprintf>:
 8009524:	b40f      	push	{r0, r1, r2, r3}
 8009526:	b507      	push	{r0, r1, r2, lr}
 8009528:	4906      	ldr	r1, [pc, #24]	; (8009544 <iprintf+0x20>)
 800952a:	ab04      	add	r3, sp, #16
 800952c:	6808      	ldr	r0, [r1, #0]
 800952e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009532:	6881      	ldr	r1, [r0, #8]
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	f000 fad9 	bl	8009aec <_vfiprintf_r>
 800953a:	b003      	add	sp, #12
 800953c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009540:	b004      	add	sp, #16
 8009542:	4770      	bx	lr
 8009544:	200000a0 	.word	0x200000a0

08009548 <_puts_r>:
 8009548:	6a03      	ldr	r3, [r0, #32]
 800954a:	b570      	push	{r4, r5, r6, lr}
 800954c:	6884      	ldr	r4, [r0, #8]
 800954e:	4605      	mov	r5, r0
 8009550:	460e      	mov	r6, r1
 8009552:	b90b      	cbnz	r3, 8009558 <_puts_r+0x10>
 8009554:	f7ff ffb0 	bl	80094b8 <__sinit>
 8009558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800955a:	07db      	lsls	r3, r3, #31
 800955c:	d405      	bmi.n	800956a <_puts_r+0x22>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	0598      	lsls	r0, r3, #22
 8009562:	d402      	bmi.n	800956a <_puts_r+0x22>
 8009564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009566:	f000 f99c 	bl	80098a2 <__retarget_lock_acquire_recursive>
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	0719      	lsls	r1, r3, #28
 800956e:	d513      	bpl.n	8009598 <_puts_r+0x50>
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	b18b      	cbz	r3, 8009598 <_puts_r+0x50>
 8009574:	3e01      	subs	r6, #1
 8009576:	68a3      	ldr	r3, [r4, #8]
 8009578:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800957c:	3b01      	subs	r3, #1
 800957e:	60a3      	str	r3, [r4, #8]
 8009580:	b9e9      	cbnz	r1, 80095be <_puts_r+0x76>
 8009582:	2b00      	cmp	r3, #0
 8009584:	da2e      	bge.n	80095e4 <_puts_r+0x9c>
 8009586:	4622      	mov	r2, r4
 8009588:	210a      	movs	r1, #10
 800958a:	4628      	mov	r0, r5
 800958c:	f000 f87b 	bl	8009686 <__swbuf_r>
 8009590:	3001      	adds	r0, #1
 8009592:	d007      	beq.n	80095a4 <_puts_r+0x5c>
 8009594:	250a      	movs	r5, #10
 8009596:	e007      	b.n	80095a8 <_puts_r+0x60>
 8009598:	4621      	mov	r1, r4
 800959a:	4628      	mov	r0, r5
 800959c:	f000 f8b0 	bl	8009700 <__swsetup_r>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d0e7      	beq.n	8009574 <_puts_r+0x2c>
 80095a4:	f04f 35ff 	mov.w	r5, #4294967295
 80095a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095aa:	07da      	lsls	r2, r3, #31
 80095ac:	d405      	bmi.n	80095ba <_puts_r+0x72>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	059b      	lsls	r3, r3, #22
 80095b2:	d402      	bmi.n	80095ba <_puts_r+0x72>
 80095b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b6:	f000 f975 	bl	80098a4 <__retarget_lock_release_recursive>
 80095ba:	4628      	mov	r0, r5
 80095bc:	bd70      	pop	{r4, r5, r6, pc}
 80095be:	2b00      	cmp	r3, #0
 80095c0:	da04      	bge.n	80095cc <_puts_r+0x84>
 80095c2:	69a2      	ldr	r2, [r4, #24]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	dc06      	bgt.n	80095d6 <_puts_r+0x8e>
 80095c8:	290a      	cmp	r1, #10
 80095ca:	d004      	beq.n	80095d6 <_puts_r+0x8e>
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	6022      	str	r2, [r4, #0]
 80095d2:	7019      	strb	r1, [r3, #0]
 80095d4:	e7cf      	b.n	8009576 <_puts_r+0x2e>
 80095d6:	4622      	mov	r2, r4
 80095d8:	4628      	mov	r0, r5
 80095da:	f000 f854 	bl	8009686 <__swbuf_r>
 80095de:	3001      	adds	r0, #1
 80095e0:	d1c9      	bne.n	8009576 <_puts_r+0x2e>
 80095e2:	e7df      	b.n	80095a4 <_puts_r+0x5c>
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	250a      	movs	r5, #10
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	6022      	str	r2, [r4, #0]
 80095ec:	701d      	strb	r5, [r3, #0]
 80095ee:	e7db      	b.n	80095a8 <_puts_r+0x60>

080095f0 <puts>:
 80095f0:	4b02      	ldr	r3, [pc, #8]	; (80095fc <puts+0xc>)
 80095f2:	4601      	mov	r1, r0
 80095f4:	6818      	ldr	r0, [r3, #0]
 80095f6:	f7ff bfa7 	b.w	8009548 <_puts_r>
 80095fa:	bf00      	nop
 80095fc:	200000a0 	.word	0x200000a0

08009600 <__sread>:
 8009600:	b510      	push	{r4, lr}
 8009602:	460c      	mov	r4, r1
 8009604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009608:	f000 f8fc 	bl	8009804 <_read_r>
 800960c:	2800      	cmp	r0, #0
 800960e:	bfab      	itete	ge
 8009610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009612:	89a3      	ldrhlt	r3, [r4, #12]
 8009614:	181b      	addge	r3, r3, r0
 8009616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800961a:	bfac      	ite	ge
 800961c:	6563      	strge	r3, [r4, #84]	; 0x54
 800961e:	81a3      	strhlt	r3, [r4, #12]
 8009620:	bd10      	pop	{r4, pc}

08009622 <__swrite>:
 8009622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009626:	461f      	mov	r7, r3
 8009628:	898b      	ldrh	r3, [r1, #12]
 800962a:	05db      	lsls	r3, r3, #23
 800962c:	4605      	mov	r5, r0
 800962e:	460c      	mov	r4, r1
 8009630:	4616      	mov	r6, r2
 8009632:	d505      	bpl.n	8009640 <__swrite+0x1e>
 8009634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009638:	2302      	movs	r3, #2
 800963a:	2200      	movs	r2, #0
 800963c:	f000 f8d0 	bl	80097e0 <_lseek_r>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	4632      	mov	r2, r6
 800964e:	463b      	mov	r3, r7
 8009650:	4628      	mov	r0, r5
 8009652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009656:	f000 b8e7 	b.w	8009828 <_write_r>

0800965a <__sseek>:
 800965a:	b510      	push	{r4, lr}
 800965c:	460c      	mov	r4, r1
 800965e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009662:	f000 f8bd 	bl	80097e0 <_lseek_r>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	bf15      	itete	ne
 800966c:	6560      	strne	r0, [r4, #84]	; 0x54
 800966e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009676:	81a3      	strheq	r3, [r4, #12]
 8009678:	bf18      	it	ne
 800967a:	81a3      	strhne	r3, [r4, #12]
 800967c:	bd10      	pop	{r4, pc}

0800967e <__sclose>:
 800967e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009682:	f000 b89d 	b.w	80097c0 <_close_r>

08009686 <__swbuf_r>:
 8009686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009688:	460e      	mov	r6, r1
 800968a:	4614      	mov	r4, r2
 800968c:	4605      	mov	r5, r0
 800968e:	b118      	cbz	r0, 8009698 <__swbuf_r+0x12>
 8009690:	6a03      	ldr	r3, [r0, #32]
 8009692:	b90b      	cbnz	r3, 8009698 <__swbuf_r+0x12>
 8009694:	f7ff ff10 	bl	80094b8 <__sinit>
 8009698:	69a3      	ldr	r3, [r4, #24]
 800969a:	60a3      	str	r3, [r4, #8]
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	071a      	lsls	r2, r3, #28
 80096a0:	d525      	bpl.n	80096ee <__swbuf_r+0x68>
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	b31b      	cbz	r3, 80096ee <__swbuf_r+0x68>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	6922      	ldr	r2, [r4, #16]
 80096aa:	1a98      	subs	r0, r3, r2
 80096ac:	6963      	ldr	r3, [r4, #20]
 80096ae:	b2f6      	uxtb	r6, r6
 80096b0:	4283      	cmp	r3, r0
 80096b2:	4637      	mov	r7, r6
 80096b4:	dc04      	bgt.n	80096c0 <__swbuf_r+0x3a>
 80096b6:	4621      	mov	r1, r4
 80096b8:	4628      	mov	r0, r5
 80096ba:	f000 fd47 	bl	800a14c <_fflush_r>
 80096be:	b9e0      	cbnz	r0, 80096fa <__swbuf_r+0x74>
 80096c0:	68a3      	ldr	r3, [r4, #8]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	60a3      	str	r3, [r4, #8]
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	6022      	str	r2, [r4, #0]
 80096cc:	701e      	strb	r6, [r3, #0]
 80096ce:	6962      	ldr	r2, [r4, #20]
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d004      	beq.n	80096e0 <__swbuf_r+0x5a>
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	07db      	lsls	r3, r3, #31
 80096da:	d506      	bpl.n	80096ea <__swbuf_r+0x64>
 80096dc:	2e0a      	cmp	r6, #10
 80096de:	d104      	bne.n	80096ea <__swbuf_r+0x64>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	f000 fd32 	bl	800a14c <_fflush_r>
 80096e8:	b938      	cbnz	r0, 80096fa <__swbuf_r+0x74>
 80096ea:	4638      	mov	r0, r7
 80096ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ee:	4621      	mov	r1, r4
 80096f0:	4628      	mov	r0, r5
 80096f2:	f000 f805 	bl	8009700 <__swsetup_r>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d0d5      	beq.n	80096a6 <__swbuf_r+0x20>
 80096fa:	f04f 37ff 	mov.w	r7, #4294967295
 80096fe:	e7f4      	b.n	80096ea <__swbuf_r+0x64>

08009700 <__swsetup_r>:
 8009700:	b538      	push	{r3, r4, r5, lr}
 8009702:	4b2a      	ldr	r3, [pc, #168]	; (80097ac <__swsetup_r+0xac>)
 8009704:	4605      	mov	r5, r0
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	460c      	mov	r4, r1
 800970a:	b118      	cbz	r0, 8009714 <__swsetup_r+0x14>
 800970c:	6a03      	ldr	r3, [r0, #32]
 800970e:	b90b      	cbnz	r3, 8009714 <__swsetup_r+0x14>
 8009710:	f7ff fed2 	bl	80094b8 <__sinit>
 8009714:	89a3      	ldrh	r3, [r4, #12]
 8009716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800971a:	0718      	lsls	r0, r3, #28
 800971c:	d422      	bmi.n	8009764 <__swsetup_r+0x64>
 800971e:	06d9      	lsls	r1, r3, #27
 8009720:	d407      	bmi.n	8009732 <__swsetup_r+0x32>
 8009722:	2309      	movs	r3, #9
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800972a:	81a3      	strh	r3, [r4, #12]
 800972c:	f04f 30ff 	mov.w	r0, #4294967295
 8009730:	e034      	b.n	800979c <__swsetup_r+0x9c>
 8009732:	0758      	lsls	r0, r3, #29
 8009734:	d512      	bpl.n	800975c <__swsetup_r+0x5c>
 8009736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009738:	b141      	cbz	r1, 800974c <__swsetup_r+0x4c>
 800973a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800973e:	4299      	cmp	r1, r3
 8009740:	d002      	beq.n	8009748 <__swsetup_r+0x48>
 8009742:	4628      	mov	r0, r5
 8009744:	f000 f8b0 	bl	80098a8 <_free_r>
 8009748:	2300      	movs	r3, #0
 800974a:	6363      	str	r3, [r4, #52]	; 0x34
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009752:	81a3      	strh	r3, [r4, #12]
 8009754:	2300      	movs	r3, #0
 8009756:	6063      	str	r3, [r4, #4]
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	6023      	str	r3, [r4, #0]
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	f043 0308 	orr.w	r3, r3, #8
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	6923      	ldr	r3, [r4, #16]
 8009766:	b94b      	cbnz	r3, 800977c <__swsetup_r+0x7c>
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800976e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009772:	d003      	beq.n	800977c <__swsetup_r+0x7c>
 8009774:	4621      	mov	r1, r4
 8009776:	4628      	mov	r0, r5
 8009778:	f000 fd36 	bl	800a1e8 <__smakebuf_r>
 800977c:	89a0      	ldrh	r0, [r4, #12]
 800977e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009782:	f010 0301 	ands.w	r3, r0, #1
 8009786:	d00a      	beq.n	800979e <__swsetup_r+0x9e>
 8009788:	2300      	movs	r3, #0
 800978a:	60a3      	str	r3, [r4, #8]
 800978c:	6963      	ldr	r3, [r4, #20]
 800978e:	425b      	negs	r3, r3
 8009790:	61a3      	str	r3, [r4, #24]
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	b943      	cbnz	r3, 80097a8 <__swsetup_r+0xa8>
 8009796:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800979a:	d1c4      	bne.n	8009726 <__swsetup_r+0x26>
 800979c:	bd38      	pop	{r3, r4, r5, pc}
 800979e:	0781      	lsls	r1, r0, #30
 80097a0:	bf58      	it	pl
 80097a2:	6963      	ldrpl	r3, [r4, #20]
 80097a4:	60a3      	str	r3, [r4, #8]
 80097a6:	e7f4      	b.n	8009792 <__swsetup_r+0x92>
 80097a8:	2000      	movs	r0, #0
 80097aa:	e7f7      	b.n	800979c <__swsetup_r+0x9c>
 80097ac:	200000a0 	.word	0x200000a0

080097b0 <memset>:
 80097b0:	4402      	add	r2, r0
 80097b2:	4603      	mov	r3, r0
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d100      	bne.n	80097ba <memset+0xa>
 80097b8:	4770      	bx	lr
 80097ba:	f803 1b01 	strb.w	r1, [r3], #1
 80097be:	e7f9      	b.n	80097b4 <memset+0x4>

080097c0 <_close_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d06      	ldr	r5, [pc, #24]	; (80097dc <_close_r+0x1c>)
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	f7f7 fc6d 	bl	80010aa <_close>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_close_r+0x1a>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_close_r+0x1a>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	20001c14 	.word	0x20001c14

080097e0 <_lseek_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d07      	ldr	r5, [pc, #28]	; (8009800 <_lseek_r+0x20>)
 80097e4:	4604      	mov	r4, r0
 80097e6:	4608      	mov	r0, r1
 80097e8:	4611      	mov	r1, r2
 80097ea:	2200      	movs	r2, #0
 80097ec:	602a      	str	r2, [r5, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	f7f7 fc82 	bl	80010f8 <_lseek>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_lseek_r+0x1e>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_lseek_r+0x1e>
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	20001c14 	.word	0x20001c14

08009804 <_read_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4d07      	ldr	r5, [pc, #28]	; (8009824 <_read_r+0x20>)
 8009808:	4604      	mov	r4, r0
 800980a:	4608      	mov	r0, r1
 800980c:	4611      	mov	r1, r2
 800980e:	2200      	movs	r2, #0
 8009810:	602a      	str	r2, [r5, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	f7f7 fc2c 	bl	8001070 <_read>
 8009818:	1c43      	adds	r3, r0, #1
 800981a:	d102      	bne.n	8009822 <_read_r+0x1e>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	b103      	cbz	r3, 8009822 <_read_r+0x1e>
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	bd38      	pop	{r3, r4, r5, pc}
 8009824:	20001c14 	.word	0x20001c14

08009828 <_write_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4d07      	ldr	r5, [pc, #28]	; (8009848 <_write_r+0x20>)
 800982c:	4604      	mov	r4, r0
 800982e:	4608      	mov	r0, r1
 8009830:	4611      	mov	r1, r2
 8009832:	2200      	movs	r2, #0
 8009834:	602a      	str	r2, [r5, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	f7f7 fa20 	bl	8000c7c <_write>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_write_r+0x1e>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_write_r+0x1e>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	20001c14 	.word	0x20001c14

0800984c <__errno>:
 800984c:	4b01      	ldr	r3, [pc, #4]	; (8009854 <__errno+0x8>)
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	200000a0 	.word	0x200000a0

08009858 <__libc_init_array>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	4d0d      	ldr	r5, [pc, #52]	; (8009890 <__libc_init_array+0x38>)
 800985c:	4c0d      	ldr	r4, [pc, #52]	; (8009894 <__libc_init_array+0x3c>)
 800985e:	1b64      	subs	r4, r4, r5
 8009860:	10a4      	asrs	r4, r4, #2
 8009862:	2600      	movs	r6, #0
 8009864:	42a6      	cmp	r6, r4
 8009866:	d109      	bne.n	800987c <__libc_init_array+0x24>
 8009868:	4d0b      	ldr	r5, [pc, #44]	; (8009898 <__libc_init_array+0x40>)
 800986a:	4c0c      	ldr	r4, [pc, #48]	; (800989c <__libc_init_array+0x44>)
 800986c:	f000 fd2a 	bl	800a2c4 <_init>
 8009870:	1b64      	subs	r4, r4, r5
 8009872:	10a4      	asrs	r4, r4, #2
 8009874:	2600      	movs	r6, #0
 8009876:	42a6      	cmp	r6, r4
 8009878:	d105      	bne.n	8009886 <__libc_init_array+0x2e>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009880:	4798      	blx	r3
 8009882:	3601      	adds	r6, #1
 8009884:	e7ee      	b.n	8009864 <__libc_init_array+0xc>
 8009886:	f855 3b04 	ldr.w	r3, [r5], #4
 800988a:	4798      	blx	r3
 800988c:	3601      	adds	r6, #1
 800988e:	e7f2      	b.n	8009876 <__libc_init_array+0x1e>
 8009890:	0800a918 	.word	0x0800a918
 8009894:	0800a918 	.word	0x0800a918
 8009898:	0800a918 	.word	0x0800a918
 800989c:	0800a91c 	.word	0x0800a91c

080098a0 <__retarget_lock_init_recursive>:
 80098a0:	4770      	bx	lr

080098a2 <__retarget_lock_acquire_recursive>:
 80098a2:	4770      	bx	lr

080098a4 <__retarget_lock_release_recursive>:
 80098a4:	4770      	bx	lr
	...

080098a8 <_free_r>:
 80098a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098aa:	2900      	cmp	r1, #0
 80098ac:	d044      	beq.n	8009938 <_free_r+0x90>
 80098ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098b2:	9001      	str	r0, [sp, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f1a1 0404 	sub.w	r4, r1, #4
 80098ba:	bfb8      	it	lt
 80098bc:	18e4      	addlt	r4, r4, r3
 80098be:	f000 f8df 	bl	8009a80 <__malloc_lock>
 80098c2:	4a1e      	ldr	r2, [pc, #120]	; (800993c <_free_r+0x94>)
 80098c4:	9801      	ldr	r0, [sp, #4]
 80098c6:	6813      	ldr	r3, [r2, #0]
 80098c8:	b933      	cbnz	r3, 80098d8 <_free_r+0x30>
 80098ca:	6063      	str	r3, [r4, #4]
 80098cc:	6014      	str	r4, [r2, #0]
 80098ce:	b003      	add	sp, #12
 80098d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098d4:	f000 b8da 	b.w	8009a8c <__malloc_unlock>
 80098d8:	42a3      	cmp	r3, r4
 80098da:	d908      	bls.n	80098ee <_free_r+0x46>
 80098dc:	6825      	ldr	r5, [r4, #0]
 80098de:	1961      	adds	r1, r4, r5
 80098e0:	428b      	cmp	r3, r1
 80098e2:	bf01      	itttt	eq
 80098e4:	6819      	ldreq	r1, [r3, #0]
 80098e6:	685b      	ldreq	r3, [r3, #4]
 80098e8:	1949      	addeq	r1, r1, r5
 80098ea:	6021      	streq	r1, [r4, #0]
 80098ec:	e7ed      	b.n	80098ca <_free_r+0x22>
 80098ee:	461a      	mov	r2, r3
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	b10b      	cbz	r3, 80098f8 <_free_r+0x50>
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	d9fa      	bls.n	80098ee <_free_r+0x46>
 80098f8:	6811      	ldr	r1, [r2, #0]
 80098fa:	1855      	adds	r5, r2, r1
 80098fc:	42a5      	cmp	r5, r4
 80098fe:	d10b      	bne.n	8009918 <_free_r+0x70>
 8009900:	6824      	ldr	r4, [r4, #0]
 8009902:	4421      	add	r1, r4
 8009904:	1854      	adds	r4, r2, r1
 8009906:	42a3      	cmp	r3, r4
 8009908:	6011      	str	r1, [r2, #0]
 800990a:	d1e0      	bne.n	80098ce <_free_r+0x26>
 800990c:	681c      	ldr	r4, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	6053      	str	r3, [r2, #4]
 8009912:	440c      	add	r4, r1
 8009914:	6014      	str	r4, [r2, #0]
 8009916:	e7da      	b.n	80098ce <_free_r+0x26>
 8009918:	d902      	bls.n	8009920 <_free_r+0x78>
 800991a:	230c      	movs	r3, #12
 800991c:	6003      	str	r3, [r0, #0]
 800991e:	e7d6      	b.n	80098ce <_free_r+0x26>
 8009920:	6825      	ldr	r5, [r4, #0]
 8009922:	1961      	adds	r1, r4, r5
 8009924:	428b      	cmp	r3, r1
 8009926:	bf04      	itt	eq
 8009928:	6819      	ldreq	r1, [r3, #0]
 800992a:	685b      	ldreq	r3, [r3, #4]
 800992c:	6063      	str	r3, [r4, #4]
 800992e:	bf04      	itt	eq
 8009930:	1949      	addeq	r1, r1, r5
 8009932:	6021      	streq	r1, [r4, #0]
 8009934:	6054      	str	r4, [r2, #4]
 8009936:	e7ca      	b.n	80098ce <_free_r+0x26>
 8009938:	b003      	add	sp, #12
 800993a:	bd30      	pop	{r4, r5, pc}
 800993c:	20001c1c 	.word	0x20001c1c

08009940 <sbrk_aligned>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	4e0e      	ldr	r6, [pc, #56]	; (800997c <sbrk_aligned+0x3c>)
 8009944:	460c      	mov	r4, r1
 8009946:	6831      	ldr	r1, [r6, #0]
 8009948:	4605      	mov	r5, r0
 800994a:	b911      	cbnz	r1, 8009952 <sbrk_aligned+0x12>
 800994c:	f000 fcaa 	bl	800a2a4 <_sbrk_r>
 8009950:	6030      	str	r0, [r6, #0]
 8009952:	4621      	mov	r1, r4
 8009954:	4628      	mov	r0, r5
 8009956:	f000 fca5 	bl	800a2a4 <_sbrk_r>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d00a      	beq.n	8009974 <sbrk_aligned+0x34>
 800995e:	1cc4      	adds	r4, r0, #3
 8009960:	f024 0403 	bic.w	r4, r4, #3
 8009964:	42a0      	cmp	r0, r4
 8009966:	d007      	beq.n	8009978 <sbrk_aligned+0x38>
 8009968:	1a21      	subs	r1, r4, r0
 800996a:	4628      	mov	r0, r5
 800996c:	f000 fc9a 	bl	800a2a4 <_sbrk_r>
 8009970:	3001      	adds	r0, #1
 8009972:	d101      	bne.n	8009978 <sbrk_aligned+0x38>
 8009974:	f04f 34ff 	mov.w	r4, #4294967295
 8009978:	4620      	mov	r0, r4
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	20001c20 	.word	0x20001c20

08009980 <_malloc_r>:
 8009980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009984:	1ccd      	adds	r5, r1, #3
 8009986:	f025 0503 	bic.w	r5, r5, #3
 800998a:	3508      	adds	r5, #8
 800998c:	2d0c      	cmp	r5, #12
 800998e:	bf38      	it	cc
 8009990:	250c      	movcc	r5, #12
 8009992:	2d00      	cmp	r5, #0
 8009994:	4607      	mov	r7, r0
 8009996:	db01      	blt.n	800999c <_malloc_r+0x1c>
 8009998:	42a9      	cmp	r1, r5
 800999a:	d905      	bls.n	80099a8 <_malloc_r+0x28>
 800999c:	230c      	movs	r3, #12
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	2600      	movs	r6, #0
 80099a2:	4630      	mov	r0, r6
 80099a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a7c <_malloc_r+0xfc>
 80099ac:	f000 f868 	bl	8009a80 <__malloc_lock>
 80099b0:	f8d8 3000 	ldr.w	r3, [r8]
 80099b4:	461c      	mov	r4, r3
 80099b6:	bb5c      	cbnz	r4, 8009a10 <_malloc_r+0x90>
 80099b8:	4629      	mov	r1, r5
 80099ba:	4638      	mov	r0, r7
 80099bc:	f7ff ffc0 	bl	8009940 <sbrk_aligned>
 80099c0:	1c43      	adds	r3, r0, #1
 80099c2:	4604      	mov	r4, r0
 80099c4:	d155      	bne.n	8009a72 <_malloc_r+0xf2>
 80099c6:	f8d8 4000 	ldr.w	r4, [r8]
 80099ca:	4626      	mov	r6, r4
 80099cc:	2e00      	cmp	r6, #0
 80099ce:	d145      	bne.n	8009a5c <_malloc_r+0xdc>
 80099d0:	2c00      	cmp	r4, #0
 80099d2:	d048      	beq.n	8009a66 <_malloc_r+0xe6>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	4631      	mov	r1, r6
 80099d8:	4638      	mov	r0, r7
 80099da:	eb04 0903 	add.w	r9, r4, r3
 80099de:	f000 fc61 	bl	800a2a4 <_sbrk_r>
 80099e2:	4581      	cmp	r9, r0
 80099e4:	d13f      	bne.n	8009a66 <_malloc_r+0xe6>
 80099e6:	6821      	ldr	r1, [r4, #0]
 80099e8:	1a6d      	subs	r5, r5, r1
 80099ea:	4629      	mov	r1, r5
 80099ec:	4638      	mov	r0, r7
 80099ee:	f7ff ffa7 	bl	8009940 <sbrk_aligned>
 80099f2:	3001      	adds	r0, #1
 80099f4:	d037      	beq.n	8009a66 <_malloc_r+0xe6>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	442b      	add	r3, r5
 80099fa:	6023      	str	r3, [r4, #0]
 80099fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d038      	beq.n	8009a76 <_malloc_r+0xf6>
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	42a2      	cmp	r2, r4
 8009a08:	d12b      	bne.n	8009a62 <_malloc_r+0xe2>
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	605a      	str	r2, [r3, #4]
 8009a0e:	e00f      	b.n	8009a30 <_malloc_r+0xb0>
 8009a10:	6822      	ldr	r2, [r4, #0]
 8009a12:	1b52      	subs	r2, r2, r5
 8009a14:	d41f      	bmi.n	8009a56 <_malloc_r+0xd6>
 8009a16:	2a0b      	cmp	r2, #11
 8009a18:	d917      	bls.n	8009a4a <_malloc_r+0xca>
 8009a1a:	1961      	adds	r1, r4, r5
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	6025      	str	r5, [r4, #0]
 8009a20:	bf18      	it	ne
 8009a22:	6059      	strne	r1, [r3, #4]
 8009a24:	6863      	ldr	r3, [r4, #4]
 8009a26:	bf08      	it	eq
 8009a28:	f8c8 1000 	streq.w	r1, [r8]
 8009a2c:	5162      	str	r2, [r4, r5]
 8009a2e:	604b      	str	r3, [r1, #4]
 8009a30:	4638      	mov	r0, r7
 8009a32:	f104 060b 	add.w	r6, r4, #11
 8009a36:	f000 f829 	bl	8009a8c <__malloc_unlock>
 8009a3a:	f026 0607 	bic.w	r6, r6, #7
 8009a3e:	1d23      	adds	r3, r4, #4
 8009a40:	1af2      	subs	r2, r6, r3
 8009a42:	d0ae      	beq.n	80099a2 <_malloc_r+0x22>
 8009a44:	1b9b      	subs	r3, r3, r6
 8009a46:	50a3      	str	r3, [r4, r2]
 8009a48:	e7ab      	b.n	80099a2 <_malloc_r+0x22>
 8009a4a:	42a3      	cmp	r3, r4
 8009a4c:	6862      	ldr	r2, [r4, #4]
 8009a4e:	d1dd      	bne.n	8009a0c <_malloc_r+0x8c>
 8009a50:	f8c8 2000 	str.w	r2, [r8]
 8009a54:	e7ec      	b.n	8009a30 <_malloc_r+0xb0>
 8009a56:	4623      	mov	r3, r4
 8009a58:	6864      	ldr	r4, [r4, #4]
 8009a5a:	e7ac      	b.n	80099b6 <_malloc_r+0x36>
 8009a5c:	4634      	mov	r4, r6
 8009a5e:	6876      	ldr	r6, [r6, #4]
 8009a60:	e7b4      	b.n	80099cc <_malloc_r+0x4c>
 8009a62:	4613      	mov	r3, r2
 8009a64:	e7cc      	b.n	8009a00 <_malloc_r+0x80>
 8009a66:	230c      	movs	r3, #12
 8009a68:	603b      	str	r3, [r7, #0]
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	f000 f80e 	bl	8009a8c <__malloc_unlock>
 8009a70:	e797      	b.n	80099a2 <_malloc_r+0x22>
 8009a72:	6025      	str	r5, [r4, #0]
 8009a74:	e7dc      	b.n	8009a30 <_malloc_r+0xb0>
 8009a76:	605b      	str	r3, [r3, #4]
 8009a78:	deff      	udf	#255	; 0xff
 8009a7a:	bf00      	nop
 8009a7c:	20001c1c 	.word	0x20001c1c

08009a80 <__malloc_lock>:
 8009a80:	4801      	ldr	r0, [pc, #4]	; (8009a88 <__malloc_lock+0x8>)
 8009a82:	f7ff bf0e 	b.w	80098a2 <__retarget_lock_acquire_recursive>
 8009a86:	bf00      	nop
 8009a88:	20001c18 	.word	0x20001c18

08009a8c <__malloc_unlock>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__malloc_unlock+0x8>)
 8009a8e:	f7ff bf09 	b.w	80098a4 <__retarget_lock_release_recursive>
 8009a92:	bf00      	nop
 8009a94:	20001c18 	.word	0x20001c18

08009a98 <__sfputc_r>:
 8009a98:	6893      	ldr	r3, [r2, #8]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	b410      	push	{r4}
 8009aa0:	6093      	str	r3, [r2, #8]
 8009aa2:	da08      	bge.n	8009ab6 <__sfputc_r+0x1e>
 8009aa4:	6994      	ldr	r4, [r2, #24]
 8009aa6:	42a3      	cmp	r3, r4
 8009aa8:	db01      	blt.n	8009aae <__sfputc_r+0x16>
 8009aaa:	290a      	cmp	r1, #10
 8009aac:	d103      	bne.n	8009ab6 <__sfputc_r+0x1e>
 8009aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ab2:	f7ff bde8 	b.w	8009686 <__swbuf_r>
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	1c58      	adds	r0, r3, #1
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	7019      	strb	r1, [r3, #0]
 8009abe:	4608      	mov	r0, r1
 8009ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <__sfputs_r>:
 8009ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac8:	4606      	mov	r6, r0
 8009aca:	460f      	mov	r7, r1
 8009acc:	4614      	mov	r4, r2
 8009ace:	18d5      	adds	r5, r2, r3
 8009ad0:	42ac      	cmp	r4, r5
 8009ad2:	d101      	bne.n	8009ad8 <__sfputs_r+0x12>
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	e007      	b.n	8009ae8 <__sfputs_r+0x22>
 8009ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009adc:	463a      	mov	r2, r7
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ffda 	bl	8009a98 <__sfputc_r>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d1f3      	bne.n	8009ad0 <__sfputs_r+0xa>
 8009ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009aec <_vfiprintf_r>:
 8009aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	460d      	mov	r5, r1
 8009af2:	b09d      	sub	sp, #116	; 0x74
 8009af4:	4614      	mov	r4, r2
 8009af6:	4698      	mov	r8, r3
 8009af8:	4606      	mov	r6, r0
 8009afa:	b118      	cbz	r0, 8009b04 <_vfiprintf_r+0x18>
 8009afc:	6a03      	ldr	r3, [r0, #32]
 8009afe:	b90b      	cbnz	r3, 8009b04 <_vfiprintf_r+0x18>
 8009b00:	f7ff fcda 	bl	80094b8 <__sinit>
 8009b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b06:	07d9      	lsls	r1, r3, #31
 8009b08:	d405      	bmi.n	8009b16 <_vfiprintf_r+0x2a>
 8009b0a:	89ab      	ldrh	r3, [r5, #12]
 8009b0c:	059a      	lsls	r2, r3, #22
 8009b0e:	d402      	bmi.n	8009b16 <_vfiprintf_r+0x2a>
 8009b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b12:	f7ff fec6 	bl	80098a2 <__retarget_lock_acquire_recursive>
 8009b16:	89ab      	ldrh	r3, [r5, #12]
 8009b18:	071b      	lsls	r3, r3, #28
 8009b1a:	d501      	bpl.n	8009b20 <_vfiprintf_r+0x34>
 8009b1c:	692b      	ldr	r3, [r5, #16]
 8009b1e:	b99b      	cbnz	r3, 8009b48 <_vfiprintf_r+0x5c>
 8009b20:	4629      	mov	r1, r5
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7ff fdec 	bl	8009700 <__swsetup_r>
 8009b28:	b170      	cbz	r0, 8009b48 <_vfiprintf_r+0x5c>
 8009b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b2c:	07dc      	lsls	r4, r3, #31
 8009b2e:	d504      	bpl.n	8009b3a <_vfiprintf_r+0x4e>
 8009b30:	f04f 30ff 	mov.w	r0, #4294967295
 8009b34:	b01d      	add	sp, #116	; 0x74
 8009b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	0598      	lsls	r0, r3, #22
 8009b3e:	d4f7      	bmi.n	8009b30 <_vfiprintf_r+0x44>
 8009b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b42:	f7ff feaf 	bl	80098a4 <__retarget_lock_release_recursive>
 8009b46:	e7f3      	b.n	8009b30 <_vfiprintf_r+0x44>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b4c:	2320      	movs	r3, #32
 8009b4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b56:	2330      	movs	r3, #48	; 0x30
 8009b58:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d0c <_vfiprintf_r+0x220>
 8009b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b60:	f04f 0901 	mov.w	r9, #1
 8009b64:	4623      	mov	r3, r4
 8009b66:	469a      	mov	sl, r3
 8009b68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b6c:	b10a      	cbz	r2, 8009b72 <_vfiprintf_r+0x86>
 8009b6e:	2a25      	cmp	r2, #37	; 0x25
 8009b70:	d1f9      	bne.n	8009b66 <_vfiprintf_r+0x7a>
 8009b72:	ebba 0b04 	subs.w	fp, sl, r4
 8009b76:	d00b      	beq.n	8009b90 <_vfiprintf_r+0xa4>
 8009b78:	465b      	mov	r3, fp
 8009b7a:	4622      	mov	r2, r4
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f7ff ffa1 	bl	8009ac6 <__sfputs_r>
 8009b84:	3001      	adds	r0, #1
 8009b86:	f000 80a9 	beq.w	8009cdc <_vfiprintf_r+0x1f0>
 8009b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b8c:	445a      	add	r2, fp
 8009b8e:	9209      	str	r2, [sp, #36]	; 0x24
 8009b90:	f89a 3000 	ldrb.w	r3, [sl]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 80a1 	beq.w	8009cdc <_vfiprintf_r+0x1f0>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba4:	f10a 0a01 	add.w	sl, sl, #1
 8009ba8:	9304      	str	r3, [sp, #16]
 8009baa:	9307      	str	r3, [sp, #28]
 8009bac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bb0:	931a      	str	r3, [sp, #104]	; 0x68
 8009bb2:	4654      	mov	r4, sl
 8009bb4:	2205      	movs	r2, #5
 8009bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bba:	4854      	ldr	r0, [pc, #336]	; (8009d0c <_vfiprintf_r+0x220>)
 8009bbc:	f7f6 fb08 	bl	80001d0 <memchr>
 8009bc0:	9a04      	ldr	r2, [sp, #16]
 8009bc2:	b9d8      	cbnz	r0, 8009bfc <_vfiprintf_r+0x110>
 8009bc4:	06d1      	lsls	r1, r2, #27
 8009bc6:	bf44      	itt	mi
 8009bc8:	2320      	movmi	r3, #32
 8009bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bce:	0713      	lsls	r3, r2, #28
 8009bd0:	bf44      	itt	mi
 8009bd2:	232b      	movmi	r3, #43	; 0x2b
 8009bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8009bde:	d015      	beq.n	8009c0c <_vfiprintf_r+0x120>
 8009be0:	9a07      	ldr	r2, [sp, #28]
 8009be2:	4654      	mov	r4, sl
 8009be4:	2000      	movs	r0, #0
 8009be6:	f04f 0c0a 	mov.w	ip, #10
 8009bea:	4621      	mov	r1, r4
 8009bec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bf0:	3b30      	subs	r3, #48	; 0x30
 8009bf2:	2b09      	cmp	r3, #9
 8009bf4:	d94d      	bls.n	8009c92 <_vfiprintf_r+0x1a6>
 8009bf6:	b1b0      	cbz	r0, 8009c26 <_vfiprintf_r+0x13a>
 8009bf8:	9207      	str	r2, [sp, #28]
 8009bfa:	e014      	b.n	8009c26 <_vfiprintf_r+0x13a>
 8009bfc:	eba0 0308 	sub.w	r3, r0, r8
 8009c00:	fa09 f303 	lsl.w	r3, r9, r3
 8009c04:	4313      	orrs	r3, r2
 8009c06:	9304      	str	r3, [sp, #16]
 8009c08:	46a2      	mov	sl, r4
 8009c0a:	e7d2      	b.n	8009bb2 <_vfiprintf_r+0xc6>
 8009c0c:	9b03      	ldr	r3, [sp, #12]
 8009c0e:	1d19      	adds	r1, r3, #4
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	9103      	str	r1, [sp, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	bfbb      	ittet	lt
 8009c18:	425b      	neglt	r3, r3
 8009c1a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c1e:	9307      	strge	r3, [sp, #28]
 8009c20:	9307      	strlt	r3, [sp, #28]
 8009c22:	bfb8      	it	lt
 8009c24:	9204      	strlt	r2, [sp, #16]
 8009c26:	7823      	ldrb	r3, [r4, #0]
 8009c28:	2b2e      	cmp	r3, #46	; 0x2e
 8009c2a:	d10c      	bne.n	8009c46 <_vfiprintf_r+0x15a>
 8009c2c:	7863      	ldrb	r3, [r4, #1]
 8009c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c30:	d134      	bne.n	8009c9c <_vfiprintf_r+0x1b0>
 8009c32:	9b03      	ldr	r3, [sp, #12]
 8009c34:	1d1a      	adds	r2, r3, #4
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	9203      	str	r2, [sp, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bfb8      	it	lt
 8009c3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c42:	3402      	adds	r4, #2
 8009c44:	9305      	str	r3, [sp, #20]
 8009c46:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d1c <_vfiprintf_r+0x230>
 8009c4a:	7821      	ldrb	r1, [r4, #0]
 8009c4c:	2203      	movs	r2, #3
 8009c4e:	4650      	mov	r0, sl
 8009c50:	f7f6 fabe 	bl	80001d0 <memchr>
 8009c54:	b138      	cbz	r0, 8009c66 <_vfiprintf_r+0x17a>
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	eba0 000a 	sub.w	r0, r0, sl
 8009c5c:	2240      	movs	r2, #64	; 0x40
 8009c5e:	4082      	lsls	r2, r0
 8009c60:	4313      	orrs	r3, r2
 8009c62:	3401      	adds	r4, #1
 8009c64:	9304      	str	r3, [sp, #16]
 8009c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6a:	4829      	ldr	r0, [pc, #164]	; (8009d10 <_vfiprintf_r+0x224>)
 8009c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c70:	2206      	movs	r2, #6
 8009c72:	f7f6 faad 	bl	80001d0 <memchr>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d03f      	beq.n	8009cfa <_vfiprintf_r+0x20e>
 8009c7a:	4b26      	ldr	r3, [pc, #152]	; (8009d14 <_vfiprintf_r+0x228>)
 8009c7c:	bb1b      	cbnz	r3, 8009cc6 <_vfiprintf_r+0x1da>
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	3307      	adds	r3, #7
 8009c82:	f023 0307 	bic.w	r3, r3, #7
 8009c86:	3308      	adds	r3, #8
 8009c88:	9303      	str	r3, [sp, #12]
 8009c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8c:	443b      	add	r3, r7
 8009c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c90:	e768      	b.n	8009b64 <_vfiprintf_r+0x78>
 8009c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c96:	460c      	mov	r4, r1
 8009c98:	2001      	movs	r0, #1
 8009c9a:	e7a6      	b.n	8009bea <_vfiprintf_r+0xfe>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	3401      	adds	r4, #1
 8009ca0:	9305      	str	r3, [sp, #20]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	f04f 0c0a 	mov.w	ip, #10
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cae:	3a30      	subs	r2, #48	; 0x30
 8009cb0:	2a09      	cmp	r2, #9
 8009cb2:	d903      	bls.n	8009cbc <_vfiprintf_r+0x1d0>
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d0c6      	beq.n	8009c46 <_vfiprintf_r+0x15a>
 8009cb8:	9105      	str	r1, [sp, #20]
 8009cba:	e7c4      	b.n	8009c46 <_vfiprintf_r+0x15a>
 8009cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e7f0      	b.n	8009ca8 <_vfiprintf_r+0x1bc>
 8009cc6:	ab03      	add	r3, sp, #12
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	462a      	mov	r2, r5
 8009ccc:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <_vfiprintf_r+0x22c>)
 8009cce:	a904      	add	r1, sp, #16
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f3af 8000 	nop.w
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	1c78      	adds	r0, r7, #1
 8009cda:	d1d6      	bne.n	8009c8a <_vfiprintf_r+0x19e>
 8009cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cde:	07d9      	lsls	r1, r3, #31
 8009ce0:	d405      	bmi.n	8009cee <_vfiprintf_r+0x202>
 8009ce2:	89ab      	ldrh	r3, [r5, #12]
 8009ce4:	059a      	lsls	r2, r3, #22
 8009ce6:	d402      	bmi.n	8009cee <_vfiprintf_r+0x202>
 8009ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cea:	f7ff fddb 	bl	80098a4 <__retarget_lock_release_recursive>
 8009cee:	89ab      	ldrh	r3, [r5, #12]
 8009cf0:	065b      	lsls	r3, r3, #25
 8009cf2:	f53f af1d 	bmi.w	8009b30 <_vfiprintf_r+0x44>
 8009cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cf8:	e71c      	b.n	8009b34 <_vfiprintf_r+0x48>
 8009cfa:	ab03      	add	r3, sp, #12
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	462a      	mov	r2, r5
 8009d00:	4b05      	ldr	r3, [pc, #20]	; (8009d18 <_vfiprintf_r+0x22c>)
 8009d02:	a904      	add	r1, sp, #16
 8009d04:	4630      	mov	r0, r6
 8009d06:	f000 f879 	bl	8009dfc <_printf_i>
 8009d0a:	e7e4      	b.n	8009cd6 <_vfiprintf_r+0x1ea>
 8009d0c:	0800a8dc 	.word	0x0800a8dc
 8009d10:	0800a8e6 	.word	0x0800a8e6
 8009d14:	00000000 	.word	0x00000000
 8009d18:	08009ac7 	.word	0x08009ac7
 8009d1c:	0800a8e2 	.word	0x0800a8e2

08009d20 <_printf_common>:
 8009d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d24:	4616      	mov	r6, r2
 8009d26:	4699      	mov	r9, r3
 8009d28:	688a      	ldr	r2, [r1, #8]
 8009d2a:	690b      	ldr	r3, [r1, #16]
 8009d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d30:	4293      	cmp	r3, r2
 8009d32:	bfb8      	it	lt
 8009d34:	4613      	movlt	r3, r2
 8009d36:	6033      	str	r3, [r6, #0]
 8009d38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d3c:	4607      	mov	r7, r0
 8009d3e:	460c      	mov	r4, r1
 8009d40:	b10a      	cbz	r2, 8009d46 <_printf_common+0x26>
 8009d42:	3301      	adds	r3, #1
 8009d44:	6033      	str	r3, [r6, #0]
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	0699      	lsls	r1, r3, #26
 8009d4a:	bf42      	ittt	mi
 8009d4c:	6833      	ldrmi	r3, [r6, #0]
 8009d4e:	3302      	addmi	r3, #2
 8009d50:	6033      	strmi	r3, [r6, #0]
 8009d52:	6825      	ldr	r5, [r4, #0]
 8009d54:	f015 0506 	ands.w	r5, r5, #6
 8009d58:	d106      	bne.n	8009d68 <_printf_common+0x48>
 8009d5a:	f104 0a19 	add.w	sl, r4, #25
 8009d5e:	68e3      	ldr	r3, [r4, #12]
 8009d60:	6832      	ldr	r2, [r6, #0]
 8009d62:	1a9b      	subs	r3, r3, r2
 8009d64:	42ab      	cmp	r3, r5
 8009d66:	dc26      	bgt.n	8009db6 <_printf_common+0x96>
 8009d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d6c:	1e13      	subs	r3, r2, #0
 8009d6e:	6822      	ldr	r2, [r4, #0]
 8009d70:	bf18      	it	ne
 8009d72:	2301      	movne	r3, #1
 8009d74:	0692      	lsls	r2, r2, #26
 8009d76:	d42b      	bmi.n	8009dd0 <_printf_common+0xb0>
 8009d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	4638      	mov	r0, r7
 8009d80:	47c0      	blx	r8
 8009d82:	3001      	adds	r0, #1
 8009d84:	d01e      	beq.n	8009dc4 <_printf_common+0xa4>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	6922      	ldr	r2, [r4, #16]
 8009d8a:	f003 0306 	and.w	r3, r3, #6
 8009d8e:	2b04      	cmp	r3, #4
 8009d90:	bf02      	ittt	eq
 8009d92:	68e5      	ldreq	r5, [r4, #12]
 8009d94:	6833      	ldreq	r3, [r6, #0]
 8009d96:	1aed      	subeq	r5, r5, r3
 8009d98:	68a3      	ldr	r3, [r4, #8]
 8009d9a:	bf0c      	ite	eq
 8009d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009da0:	2500      	movne	r5, #0
 8009da2:	4293      	cmp	r3, r2
 8009da4:	bfc4      	itt	gt
 8009da6:	1a9b      	subgt	r3, r3, r2
 8009da8:	18ed      	addgt	r5, r5, r3
 8009daa:	2600      	movs	r6, #0
 8009dac:	341a      	adds	r4, #26
 8009dae:	42b5      	cmp	r5, r6
 8009db0:	d11a      	bne.n	8009de8 <_printf_common+0xc8>
 8009db2:	2000      	movs	r0, #0
 8009db4:	e008      	b.n	8009dc8 <_printf_common+0xa8>
 8009db6:	2301      	movs	r3, #1
 8009db8:	4652      	mov	r2, sl
 8009dba:	4649      	mov	r1, r9
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	47c0      	blx	r8
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d103      	bne.n	8009dcc <_printf_common+0xac>
 8009dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dcc:	3501      	adds	r5, #1
 8009dce:	e7c6      	b.n	8009d5e <_printf_common+0x3e>
 8009dd0:	18e1      	adds	r1, r4, r3
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	2030      	movs	r0, #48	; 0x30
 8009dd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dda:	4422      	add	r2, r4
 8009ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009de0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009de4:	3302      	adds	r3, #2
 8009de6:	e7c7      	b.n	8009d78 <_printf_common+0x58>
 8009de8:	2301      	movs	r3, #1
 8009dea:	4622      	mov	r2, r4
 8009dec:	4649      	mov	r1, r9
 8009dee:	4638      	mov	r0, r7
 8009df0:	47c0      	blx	r8
 8009df2:	3001      	adds	r0, #1
 8009df4:	d0e6      	beq.n	8009dc4 <_printf_common+0xa4>
 8009df6:	3601      	adds	r6, #1
 8009df8:	e7d9      	b.n	8009dae <_printf_common+0x8e>
	...

08009dfc <_printf_i>:
 8009dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e00:	7e0f      	ldrb	r7, [r1, #24]
 8009e02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e04:	2f78      	cmp	r7, #120	; 0x78
 8009e06:	4691      	mov	r9, r2
 8009e08:	4680      	mov	r8, r0
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	469a      	mov	sl, r3
 8009e0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e12:	d807      	bhi.n	8009e24 <_printf_i+0x28>
 8009e14:	2f62      	cmp	r7, #98	; 0x62
 8009e16:	d80a      	bhi.n	8009e2e <_printf_i+0x32>
 8009e18:	2f00      	cmp	r7, #0
 8009e1a:	f000 80d4 	beq.w	8009fc6 <_printf_i+0x1ca>
 8009e1e:	2f58      	cmp	r7, #88	; 0x58
 8009e20:	f000 80c0 	beq.w	8009fa4 <_printf_i+0x1a8>
 8009e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e2c:	e03a      	b.n	8009ea4 <_printf_i+0xa8>
 8009e2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e32:	2b15      	cmp	r3, #21
 8009e34:	d8f6      	bhi.n	8009e24 <_printf_i+0x28>
 8009e36:	a101      	add	r1, pc, #4	; (adr r1, 8009e3c <_printf_i+0x40>)
 8009e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e3c:	08009e95 	.word	0x08009e95
 8009e40:	08009ea9 	.word	0x08009ea9
 8009e44:	08009e25 	.word	0x08009e25
 8009e48:	08009e25 	.word	0x08009e25
 8009e4c:	08009e25 	.word	0x08009e25
 8009e50:	08009e25 	.word	0x08009e25
 8009e54:	08009ea9 	.word	0x08009ea9
 8009e58:	08009e25 	.word	0x08009e25
 8009e5c:	08009e25 	.word	0x08009e25
 8009e60:	08009e25 	.word	0x08009e25
 8009e64:	08009e25 	.word	0x08009e25
 8009e68:	08009fad 	.word	0x08009fad
 8009e6c:	08009ed5 	.word	0x08009ed5
 8009e70:	08009f67 	.word	0x08009f67
 8009e74:	08009e25 	.word	0x08009e25
 8009e78:	08009e25 	.word	0x08009e25
 8009e7c:	08009fcf 	.word	0x08009fcf
 8009e80:	08009e25 	.word	0x08009e25
 8009e84:	08009ed5 	.word	0x08009ed5
 8009e88:	08009e25 	.word	0x08009e25
 8009e8c:	08009e25 	.word	0x08009e25
 8009e90:	08009f6f 	.word	0x08009f6f
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	1d1a      	adds	r2, r3, #4
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	602a      	str	r2, [r5, #0]
 8009e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e09f      	b.n	8009fe8 <_printf_i+0x1ec>
 8009ea8:	6820      	ldr	r0, [r4, #0]
 8009eaa:	682b      	ldr	r3, [r5, #0]
 8009eac:	0607      	lsls	r7, r0, #24
 8009eae:	f103 0104 	add.w	r1, r3, #4
 8009eb2:	6029      	str	r1, [r5, #0]
 8009eb4:	d501      	bpl.n	8009eba <_printf_i+0xbe>
 8009eb6:	681e      	ldr	r6, [r3, #0]
 8009eb8:	e003      	b.n	8009ec2 <_printf_i+0xc6>
 8009eba:	0646      	lsls	r6, r0, #25
 8009ebc:	d5fb      	bpl.n	8009eb6 <_printf_i+0xba>
 8009ebe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ec2:	2e00      	cmp	r6, #0
 8009ec4:	da03      	bge.n	8009ece <_printf_i+0xd2>
 8009ec6:	232d      	movs	r3, #45	; 0x2d
 8009ec8:	4276      	negs	r6, r6
 8009eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ece:	485a      	ldr	r0, [pc, #360]	; (800a038 <_printf_i+0x23c>)
 8009ed0:	230a      	movs	r3, #10
 8009ed2:	e012      	b.n	8009efa <_printf_i+0xfe>
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	6820      	ldr	r0, [r4, #0]
 8009ed8:	1d19      	adds	r1, r3, #4
 8009eda:	6029      	str	r1, [r5, #0]
 8009edc:	0605      	lsls	r5, r0, #24
 8009ede:	d501      	bpl.n	8009ee4 <_printf_i+0xe8>
 8009ee0:	681e      	ldr	r6, [r3, #0]
 8009ee2:	e002      	b.n	8009eea <_printf_i+0xee>
 8009ee4:	0641      	lsls	r1, r0, #25
 8009ee6:	d5fb      	bpl.n	8009ee0 <_printf_i+0xe4>
 8009ee8:	881e      	ldrh	r6, [r3, #0]
 8009eea:	4853      	ldr	r0, [pc, #332]	; (800a038 <_printf_i+0x23c>)
 8009eec:	2f6f      	cmp	r7, #111	; 0x6f
 8009eee:	bf0c      	ite	eq
 8009ef0:	2308      	moveq	r3, #8
 8009ef2:	230a      	movne	r3, #10
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009efa:	6865      	ldr	r5, [r4, #4]
 8009efc:	60a5      	str	r5, [r4, #8]
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	bfa2      	ittt	ge
 8009f02:	6821      	ldrge	r1, [r4, #0]
 8009f04:	f021 0104 	bicge.w	r1, r1, #4
 8009f08:	6021      	strge	r1, [r4, #0]
 8009f0a:	b90e      	cbnz	r6, 8009f10 <_printf_i+0x114>
 8009f0c:	2d00      	cmp	r5, #0
 8009f0e:	d04b      	beq.n	8009fa8 <_printf_i+0x1ac>
 8009f10:	4615      	mov	r5, r2
 8009f12:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f16:	fb03 6711 	mls	r7, r3, r1, r6
 8009f1a:	5dc7      	ldrb	r7, [r0, r7]
 8009f1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f20:	4637      	mov	r7, r6
 8009f22:	42bb      	cmp	r3, r7
 8009f24:	460e      	mov	r6, r1
 8009f26:	d9f4      	bls.n	8009f12 <_printf_i+0x116>
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d10b      	bne.n	8009f44 <_printf_i+0x148>
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	07de      	lsls	r6, r3, #31
 8009f30:	d508      	bpl.n	8009f44 <_printf_i+0x148>
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	6861      	ldr	r1, [r4, #4]
 8009f36:	4299      	cmp	r1, r3
 8009f38:	bfde      	ittt	le
 8009f3a:	2330      	movle	r3, #48	; 0x30
 8009f3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f44:	1b52      	subs	r2, r2, r5
 8009f46:	6122      	str	r2, [r4, #16]
 8009f48:	f8cd a000 	str.w	sl, [sp]
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	aa03      	add	r2, sp, #12
 8009f50:	4621      	mov	r1, r4
 8009f52:	4640      	mov	r0, r8
 8009f54:	f7ff fee4 	bl	8009d20 <_printf_common>
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d14a      	bne.n	8009ff2 <_printf_i+0x1f6>
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	b004      	add	sp, #16
 8009f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	f043 0320 	orr.w	r3, r3, #32
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	4833      	ldr	r0, [pc, #204]	; (800a03c <_printf_i+0x240>)
 8009f70:	2778      	movs	r7, #120	; 0x78
 8009f72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	6829      	ldr	r1, [r5, #0]
 8009f7a:	061f      	lsls	r7, r3, #24
 8009f7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f80:	d402      	bmi.n	8009f88 <_printf_i+0x18c>
 8009f82:	065f      	lsls	r7, r3, #25
 8009f84:	bf48      	it	mi
 8009f86:	b2b6      	uxthmi	r6, r6
 8009f88:	07df      	lsls	r7, r3, #31
 8009f8a:	bf48      	it	mi
 8009f8c:	f043 0320 	orrmi.w	r3, r3, #32
 8009f90:	6029      	str	r1, [r5, #0]
 8009f92:	bf48      	it	mi
 8009f94:	6023      	strmi	r3, [r4, #0]
 8009f96:	b91e      	cbnz	r6, 8009fa0 <_printf_i+0x1a4>
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	f023 0320 	bic.w	r3, r3, #32
 8009f9e:	6023      	str	r3, [r4, #0]
 8009fa0:	2310      	movs	r3, #16
 8009fa2:	e7a7      	b.n	8009ef4 <_printf_i+0xf8>
 8009fa4:	4824      	ldr	r0, [pc, #144]	; (800a038 <_printf_i+0x23c>)
 8009fa6:	e7e4      	b.n	8009f72 <_printf_i+0x176>
 8009fa8:	4615      	mov	r5, r2
 8009faa:	e7bd      	b.n	8009f28 <_printf_i+0x12c>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	6826      	ldr	r6, [r4, #0]
 8009fb0:	6961      	ldr	r1, [r4, #20]
 8009fb2:	1d18      	adds	r0, r3, #4
 8009fb4:	6028      	str	r0, [r5, #0]
 8009fb6:	0635      	lsls	r5, r6, #24
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	d501      	bpl.n	8009fc0 <_printf_i+0x1c4>
 8009fbc:	6019      	str	r1, [r3, #0]
 8009fbe:	e002      	b.n	8009fc6 <_printf_i+0x1ca>
 8009fc0:	0670      	lsls	r0, r6, #25
 8009fc2:	d5fb      	bpl.n	8009fbc <_printf_i+0x1c0>
 8009fc4:	8019      	strh	r1, [r3, #0]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	6123      	str	r3, [r4, #16]
 8009fca:	4615      	mov	r5, r2
 8009fcc:	e7bc      	b.n	8009f48 <_printf_i+0x14c>
 8009fce:	682b      	ldr	r3, [r5, #0]
 8009fd0:	1d1a      	adds	r2, r3, #4
 8009fd2:	602a      	str	r2, [r5, #0]
 8009fd4:	681d      	ldr	r5, [r3, #0]
 8009fd6:	6862      	ldr	r2, [r4, #4]
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f7f6 f8f8 	bl	80001d0 <memchr>
 8009fe0:	b108      	cbz	r0, 8009fe6 <_printf_i+0x1ea>
 8009fe2:	1b40      	subs	r0, r0, r5
 8009fe4:	6060      	str	r0, [r4, #4]
 8009fe6:	6863      	ldr	r3, [r4, #4]
 8009fe8:	6123      	str	r3, [r4, #16]
 8009fea:	2300      	movs	r3, #0
 8009fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ff0:	e7aa      	b.n	8009f48 <_printf_i+0x14c>
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	462a      	mov	r2, r5
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	47d0      	blx	sl
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d0ad      	beq.n	8009f5c <_printf_i+0x160>
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	079b      	lsls	r3, r3, #30
 800a004:	d413      	bmi.n	800a02e <_printf_i+0x232>
 800a006:	68e0      	ldr	r0, [r4, #12]
 800a008:	9b03      	ldr	r3, [sp, #12]
 800a00a:	4298      	cmp	r0, r3
 800a00c:	bfb8      	it	lt
 800a00e:	4618      	movlt	r0, r3
 800a010:	e7a6      	b.n	8009f60 <_printf_i+0x164>
 800a012:	2301      	movs	r3, #1
 800a014:	4632      	mov	r2, r6
 800a016:	4649      	mov	r1, r9
 800a018:	4640      	mov	r0, r8
 800a01a:	47d0      	blx	sl
 800a01c:	3001      	adds	r0, #1
 800a01e:	d09d      	beq.n	8009f5c <_printf_i+0x160>
 800a020:	3501      	adds	r5, #1
 800a022:	68e3      	ldr	r3, [r4, #12]
 800a024:	9903      	ldr	r1, [sp, #12]
 800a026:	1a5b      	subs	r3, r3, r1
 800a028:	42ab      	cmp	r3, r5
 800a02a:	dcf2      	bgt.n	800a012 <_printf_i+0x216>
 800a02c:	e7eb      	b.n	800a006 <_printf_i+0x20a>
 800a02e:	2500      	movs	r5, #0
 800a030:	f104 0619 	add.w	r6, r4, #25
 800a034:	e7f5      	b.n	800a022 <_printf_i+0x226>
 800a036:	bf00      	nop
 800a038:	0800a8ed 	.word	0x0800a8ed
 800a03c:	0800a8fe 	.word	0x0800a8fe

0800a040 <__sflush_r>:
 800a040:	898a      	ldrh	r2, [r1, #12]
 800a042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a046:	4605      	mov	r5, r0
 800a048:	0710      	lsls	r0, r2, #28
 800a04a:	460c      	mov	r4, r1
 800a04c:	d458      	bmi.n	800a100 <__sflush_r+0xc0>
 800a04e:	684b      	ldr	r3, [r1, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	dc05      	bgt.n	800a060 <__sflush_r+0x20>
 800a054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a056:	2b00      	cmp	r3, #0
 800a058:	dc02      	bgt.n	800a060 <__sflush_r+0x20>
 800a05a:	2000      	movs	r0, #0
 800a05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a062:	2e00      	cmp	r6, #0
 800a064:	d0f9      	beq.n	800a05a <__sflush_r+0x1a>
 800a066:	2300      	movs	r3, #0
 800a068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a06c:	682f      	ldr	r7, [r5, #0]
 800a06e:	6a21      	ldr	r1, [r4, #32]
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	d032      	beq.n	800a0da <__sflush_r+0x9a>
 800a074:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	075a      	lsls	r2, r3, #29
 800a07a:	d505      	bpl.n	800a088 <__sflush_r+0x48>
 800a07c:	6863      	ldr	r3, [r4, #4]
 800a07e:	1ac0      	subs	r0, r0, r3
 800a080:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a082:	b10b      	cbz	r3, 800a088 <__sflush_r+0x48>
 800a084:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a086:	1ac0      	subs	r0, r0, r3
 800a088:	2300      	movs	r3, #0
 800a08a:	4602      	mov	r2, r0
 800a08c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a08e:	6a21      	ldr	r1, [r4, #32]
 800a090:	4628      	mov	r0, r5
 800a092:	47b0      	blx	r6
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	89a3      	ldrh	r3, [r4, #12]
 800a098:	d106      	bne.n	800a0a8 <__sflush_r+0x68>
 800a09a:	6829      	ldr	r1, [r5, #0]
 800a09c:	291d      	cmp	r1, #29
 800a09e:	d82b      	bhi.n	800a0f8 <__sflush_r+0xb8>
 800a0a0:	4a29      	ldr	r2, [pc, #164]	; (800a148 <__sflush_r+0x108>)
 800a0a2:	410a      	asrs	r2, r1
 800a0a4:	07d6      	lsls	r6, r2, #31
 800a0a6:	d427      	bmi.n	800a0f8 <__sflush_r+0xb8>
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	6062      	str	r2, [r4, #4]
 800a0ac:	04d9      	lsls	r1, r3, #19
 800a0ae:	6922      	ldr	r2, [r4, #16]
 800a0b0:	6022      	str	r2, [r4, #0]
 800a0b2:	d504      	bpl.n	800a0be <__sflush_r+0x7e>
 800a0b4:	1c42      	adds	r2, r0, #1
 800a0b6:	d101      	bne.n	800a0bc <__sflush_r+0x7c>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b903      	cbnz	r3, 800a0be <__sflush_r+0x7e>
 800a0bc:	6560      	str	r0, [r4, #84]	; 0x54
 800a0be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0c0:	602f      	str	r7, [r5, #0]
 800a0c2:	2900      	cmp	r1, #0
 800a0c4:	d0c9      	beq.n	800a05a <__sflush_r+0x1a>
 800a0c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0ca:	4299      	cmp	r1, r3
 800a0cc:	d002      	beq.n	800a0d4 <__sflush_r+0x94>
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f7ff fbea 	bl	80098a8 <_free_r>
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	6360      	str	r0, [r4, #52]	; 0x34
 800a0d8:	e7c0      	b.n	800a05c <__sflush_r+0x1c>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4628      	mov	r0, r5
 800a0de:	47b0      	blx	r6
 800a0e0:	1c41      	adds	r1, r0, #1
 800a0e2:	d1c8      	bne.n	800a076 <__sflush_r+0x36>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0c5      	beq.n	800a076 <__sflush_r+0x36>
 800a0ea:	2b1d      	cmp	r3, #29
 800a0ec:	d001      	beq.n	800a0f2 <__sflush_r+0xb2>
 800a0ee:	2b16      	cmp	r3, #22
 800a0f0:	d101      	bne.n	800a0f6 <__sflush_r+0xb6>
 800a0f2:	602f      	str	r7, [r5, #0]
 800a0f4:	e7b1      	b.n	800a05a <__sflush_r+0x1a>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	e7ad      	b.n	800a05c <__sflush_r+0x1c>
 800a100:	690f      	ldr	r7, [r1, #16]
 800a102:	2f00      	cmp	r7, #0
 800a104:	d0a9      	beq.n	800a05a <__sflush_r+0x1a>
 800a106:	0793      	lsls	r3, r2, #30
 800a108:	680e      	ldr	r6, [r1, #0]
 800a10a:	bf08      	it	eq
 800a10c:	694b      	ldreq	r3, [r1, #20]
 800a10e:	600f      	str	r7, [r1, #0]
 800a110:	bf18      	it	ne
 800a112:	2300      	movne	r3, #0
 800a114:	eba6 0807 	sub.w	r8, r6, r7
 800a118:	608b      	str	r3, [r1, #8]
 800a11a:	f1b8 0f00 	cmp.w	r8, #0
 800a11e:	dd9c      	ble.n	800a05a <__sflush_r+0x1a>
 800a120:	6a21      	ldr	r1, [r4, #32]
 800a122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a124:	4643      	mov	r3, r8
 800a126:	463a      	mov	r2, r7
 800a128:	4628      	mov	r0, r5
 800a12a:	47b0      	blx	r6
 800a12c:	2800      	cmp	r0, #0
 800a12e:	dc06      	bgt.n	800a13e <__sflush_r+0xfe>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	e78e      	b.n	800a05c <__sflush_r+0x1c>
 800a13e:	4407      	add	r7, r0
 800a140:	eba8 0800 	sub.w	r8, r8, r0
 800a144:	e7e9      	b.n	800a11a <__sflush_r+0xda>
 800a146:	bf00      	nop
 800a148:	dfbffffe 	.word	0xdfbffffe

0800a14c <_fflush_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	690b      	ldr	r3, [r1, #16]
 800a150:	4605      	mov	r5, r0
 800a152:	460c      	mov	r4, r1
 800a154:	b913      	cbnz	r3, 800a15c <_fflush_r+0x10>
 800a156:	2500      	movs	r5, #0
 800a158:	4628      	mov	r0, r5
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	b118      	cbz	r0, 800a166 <_fflush_r+0x1a>
 800a15e:	6a03      	ldr	r3, [r0, #32]
 800a160:	b90b      	cbnz	r3, 800a166 <_fflush_r+0x1a>
 800a162:	f7ff f9a9 	bl	80094b8 <__sinit>
 800a166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0f3      	beq.n	800a156 <_fflush_r+0xa>
 800a16e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a170:	07d0      	lsls	r0, r2, #31
 800a172:	d404      	bmi.n	800a17e <_fflush_r+0x32>
 800a174:	0599      	lsls	r1, r3, #22
 800a176:	d402      	bmi.n	800a17e <_fflush_r+0x32>
 800a178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a17a:	f7ff fb92 	bl	80098a2 <__retarget_lock_acquire_recursive>
 800a17e:	4628      	mov	r0, r5
 800a180:	4621      	mov	r1, r4
 800a182:	f7ff ff5d 	bl	800a040 <__sflush_r>
 800a186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a188:	07da      	lsls	r2, r3, #31
 800a18a:	4605      	mov	r5, r0
 800a18c:	d4e4      	bmi.n	800a158 <_fflush_r+0xc>
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	059b      	lsls	r3, r3, #22
 800a192:	d4e1      	bmi.n	800a158 <_fflush_r+0xc>
 800a194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a196:	f7ff fb85 	bl	80098a4 <__retarget_lock_release_recursive>
 800a19a:	e7dd      	b.n	800a158 <_fflush_r+0xc>

0800a19c <__swhatbuf_r>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	460c      	mov	r4, r1
 800a1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a4:	2900      	cmp	r1, #0
 800a1a6:	b096      	sub	sp, #88	; 0x58
 800a1a8:	4615      	mov	r5, r2
 800a1aa:	461e      	mov	r6, r3
 800a1ac:	da0d      	bge.n	800a1ca <__swhatbuf_r+0x2e>
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a1b4:	f04f 0100 	mov.w	r1, #0
 800a1b8:	bf0c      	ite	eq
 800a1ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a1be:	2340      	movne	r3, #64	; 0x40
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	6031      	str	r1, [r6, #0]
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	b016      	add	sp, #88	; 0x58
 800a1c8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ca:	466a      	mov	r2, sp
 800a1cc:	f000 f848 	bl	800a260 <_fstat_r>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	dbec      	blt.n	800a1ae <__swhatbuf_r+0x12>
 800a1d4:	9901      	ldr	r1, [sp, #4]
 800a1d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a1da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a1de:	4259      	negs	r1, r3
 800a1e0:	4159      	adcs	r1, r3
 800a1e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e6:	e7eb      	b.n	800a1c0 <__swhatbuf_r+0x24>

0800a1e8 <__smakebuf_r>:
 800a1e8:	898b      	ldrh	r3, [r1, #12]
 800a1ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1ec:	079d      	lsls	r5, r3, #30
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	d507      	bpl.n	800a204 <__smakebuf_r+0x1c>
 800a1f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	6123      	str	r3, [r4, #16]
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	6163      	str	r3, [r4, #20]
 800a200:	b002      	add	sp, #8
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	ab01      	add	r3, sp, #4
 800a206:	466a      	mov	r2, sp
 800a208:	f7ff ffc8 	bl	800a19c <__swhatbuf_r>
 800a20c:	9900      	ldr	r1, [sp, #0]
 800a20e:	4605      	mov	r5, r0
 800a210:	4630      	mov	r0, r6
 800a212:	f7ff fbb5 	bl	8009980 <_malloc_r>
 800a216:	b948      	cbnz	r0, 800a22c <__smakebuf_r+0x44>
 800a218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21c:	059a      	lsls	r2, r3, #22
 800a21e:	d4ef      	bmi.n	800a200 <__smakebuf_r+0x18>
 800a220:	f023 0303 	bic.w	r3, r3, #3
 800a224:	f043 0302 	orr.w	r3, r3, #2
 800a228:	81a3      	strh	r3, [r4, #12]
 800a22a:	e7e3      	b.n	800a1f4 <__smakebuf_r+0xc>
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	6020      	str	r0, [r4, #0]
 800a230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a234:	81a3      	strh	r3, [r4, #12]
 800a236:	9b00      	ldr	r3, [sp, #0]
 800a238:	6163      	str	r3, [r4, #20]
 800a23a:	9b01      	ldr	r3, [sp, #4]
 800a23c:	6120      	str	r0, [r4, #16]
 800a23e:	b15b      	cbz	r3, 800a258 <__smakebuf_r+0x70>
 800a240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a244:	4630      	mov	r0, r6
 800a246:	f000 f81d 	bl	800a284 <_isatty_r>
 800a24a:	b128      	cbz	r0, 800a258 <__smakebuf_r+0x70>
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	f023 0303 	bic.w	r3, r3, #3
 800a252:	f043 0301 	orr.w	r3, r3, #1
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	431d      	orrs	r5, r3
 800a25c:	81a5      	strh	r5, [r4, #12]
 800a25e:	e7cf      	b.n	800a200 <__smakebuf_r+0x18>

0800a260 <_fstat_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d07      	ldr	r5, [pc, #28]	; (800a280 <_fstat_r+0x20>)
 800a264:	2300      	movs	r3, #0
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	4611      	mov	r1, r2
 800a26c:	602b      	str	r3, [r5, #0]
 800a26e:	f7f6 ff28 	bl	80010c2 <_fstat>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	d102      	bne.n	800a27c <_fstat_r+0x1c>
 800a276:	682b      	ldr	r3, [r5, #0]
 800a278:	b103      	cbz	r3, 800a27c <_fstat_r+0x1c>
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	bd38      	pop	{r3, r4, r5, pc}
 800a27e:	bf00      	nop
 800a280:	20001c14 	.word	0x20001c14

0800a284 <_isatty_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d06      	ldr	r5, [pc, #24]	; (800a2a0 <_isatty_r+0x1c>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	f7f6 ff27 	bl	80010e2 <_isatty>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_isatty_r+0x1a>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_isatty_r+0x1a>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20001c14 	.word	0x20001c14

0800a2a4 <_sbrk_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d06      	ldr	r5, [pc, #24]	; (800a2c0 <_sbrk_r+0x1c>)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	602b      	str	r3, [r5, #0]
 800a2b0:	f7f6 ff30 	bl	8001114 <_sbrk>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_sbrk_r+0x1a>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_sbrk_r+0x1a>
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20001c14 	.word	0x20001c14

0800a2c4 <_init>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	bf00      	nop
 800a2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ca:	bc08      	pop	{r3}
 800a2cc:	469e      	mov	lr, r3
 800a2ce:	4770      	bx	lr

0800a2d0 <_fini>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	bf00      	nop
 800a2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d6:	bc08      	pop	{r3}
 800a2d8:	469e      	mov	lr, r3
 800a2da:	4770      	bx	lr
